__resolveJsonp("course:und","	{
	    "course":
	    {
	        "id": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	        "originalId": null,
	        "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	        "selectedAuthorId": "none",
	        "color": "#e40428",
	        "navigationMode": "free",
	        "title": "Educación sobre el cuidado de heridas en las farmacias",
	        "sharePassword": "",
	        "description": "<p><span style=\"font-size: 24px;\">Bienvenido a nuestro curso de eLearning centrado en la farmacia, donde obtendrá información sobre diferentes tipos de heridas, sus fases de cicatrización y estrategias de tratamiento efectivas. Equipado con este conocimiento, podrá brindar mejores consejos a los clientes y ofrecer recomendaciones de productos personalizadas según cada necesidad y cada herida. El curso tiene una duración aproximada de 45 minutos y finaliza con una prueba de conocimientos. Puede encontrar la lista de referencias de consulta al final del entrenamiento.</span></p><p><br></p><p><span style=\"font-size: 18px;\">*Este entrenamiento tiene como objetivo proporcionar ayuda informativa y no constituye un consejo profesional médico. Las recomendaciones de los tratamientos son ejemplos y no reemplazan los protocolos locales de tratamiento de heridas. Para obtener información detallada sobre los dispositivos médicos, incluidas las contraindicaciones, efectos, precauciones y advertencias, consulta la etiqueta específica de cada producto.</span></p>",
	        "shareId": "3Tf1qNACA2IqUsCKdkoPw8uHDoBqXSAd",
	        "copyOf": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
	        "order": "1706880668369",
	        "fonts": null,
	        "media":
	        {
	            "tmp":
	            {
	                "image":
	                {
	                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/vO9WolFej6gaGKHR-Essity_logo_colour_RGB.png",
	                    "type": "image",
	                    "width": 140,
	                    "height": 59,
	                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/QVdBWF7borwCOYOa.png",
	                    "originalUrl": "Essity_logo_colour_RGB.png",
	                    "useCrushedKey": true
	                }
	            },
	            "image":
	            {
	                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/0YYzZWLzMRZX3irv-181120_Leukoplast_Logo_RGB.png",
	                "type": "image",
	                "width": 174,
	                "height": 40,
	                "crushedKey": "aj_NJ2/181120_Leukoplast_Logo_RGB.png",
	                "originalUrl": "181120_Leukoplast_Logo_RGB.png",
	                "useCrushedKey": true
	            }
	        },
	        "coverImage":
	        {
	            "alpha": 50,
	            "media":
	            {
	                "image":
	                {
	                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/hdqNF6QI1qy1DUa6.jpg",
	                    "type": "image",
	                    "isSquare": false,
	                    "crushedKey": "wKOtED/Leukoplast_Kids_Hero Edition_Lifestyle_Pharmacy.png",
	                    "dimensions":
	                    {
	                        "top": 0,
	                        "left": 0,
	                        "width": 1680,
	                        "height": 910,
	                        "originalWidth": 1680,
	                        "originalHeight": 1183
	                    },
	                    "originalUrl": "Leukoplast_Kids_Hero Edition_Lifestyle_Pharmacy.png",
	                    "originalImage":
	                    {
	                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/I-KjvWWg1SrljLXZ-Leukoplast_Kids_Hero%2520Edition_Lifestyle_Pharmacy.png",
	                        "type": "image",
	                        "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Xi0PM89MfTqNedec.jpg",
	                        "originalUrl": "Leukoplast_Kids_Hero Edition_Lifestyle_Pharmacy.png",
	                        "useCrushedKey": true
	                    },
	                    "useCrushedKey": true,
	                    "src": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg"
	                }
	            },
	            "displaySidebar": true
	        },
	        "lessons":
	        [
	            {
	                "id": "uCQP3keOtYc8htW3WDakBZEd62GPIpSi",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "Módulo 1: Anatomía y Funciones de la Piel",
	                "description": "",
	                "type": "blocks",
	                "icon": "Article",
	                "items":
	                [
	                    {
	                        "id": "cl445k9390006356ocm3cwnek",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cl445k9390007356okbzuplbp",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/5_EGpc6_O_bldZ6e.jpg",
	                                        "type": "image",
	                                        "isSquare": false,
	                                        "crushedKey": "GHEaC7_GHVyQ4zeg_5_EGpc6_O_bldZ6e.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 292,
	                                            "left": 0,
	                                            "width": 1680,
	                                            "height": 594,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1120
	                                        },
	                                        "originalUrl": "Skin Health - A nurse holding a residents hand. Close up..png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/pJwigMcyeLv6dVO9-Skin%2520Health%2520-%2520A%2520nurse%2520holding%2520a%2520residents%2520hand.%2520Close%2520up..png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/5_kvw6hgycZYOaX0.jpg",
	                                            "originalUrl": "Skin Health - A nurse holding a residents hand. Close up..png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p>La piel, el órgano más grande de nuestro cuerpo, representa <b>el 15% de nuestro peso</b> y almacena <b>el 33% del agua de nuestro cuerpo</b>. Sirve como una barrera protectora entre el entorno externo y nuestros órganos internos, manteniendo todo en su lugar.</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.3,
	                            "cardMode": null,
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljdzh2sv001o356qahsz11yg",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljdzh2sw001p356qx0cdrl8z",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">A continuación, observa el video para aprender más sobre la estructura de la piel y sus funciones.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljegbvb400dy356reu95u6el",
	                        "type": "multimedia",
	                        "items":
	                        [
	                            {
	                                "id": "cljegbvb500dz356r8ropz1p5",
	                                "media":
	                                {
	                                    "video":
	                                    {
	                                        "key": "W8efJgTmiVNV6JOr_rise_2Fcourses_2FDs8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6_2FN32ShgLD4nfqM2Vc-Skin_2520structure_NOPROCESS_.mp4",
	                                        "url": "https://articulate-us.s3.amazonaws.com/rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/N32ShgLD4nfqM2Vc-Skin%2520structure_NOPROCESS_.mp4?AWSAccessKeyId=ASIATDIHEUTRCVFYJNOP&Content-Type=video%2Fmp4&Expires=1695876091&Signature=GpmZ6fum5yN8tOne7bY1SdSHSnI%3D&x-amz-acl=public-read&x-amz-security-token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJHMEUCIQCIsr5ccAYn%2FNRpn8OHYbSKkgk6%2FPkej7LrbtesxIjipwIgWyo6JqL0ppfceLibsiPcAB7Y15bcF79FsowF2MfLYXYqgwUInf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwyMTMxNTI3MzY0ODIiDBJuSL%2BEiRAyu1fZ4SrXBMfzKimKP2YOWxb7Nq7ypJ5GfcvP%2FRb0JaFQzW%2FsTGrx5f1542kAz3uCY%2FAQ%2B67XxeyUBgObYojXaaB3otlrzFt%2B5acujr%2BB9tL9Tya5uTWGm3CNlMzTMczIifpJ7KmJQGkuEjHImMNALMw0720CtazeSO4NDeVrWZ9biIhlqFT2ECnE5D2yJc0T%2BEmTeFXy66qVpiPFpnMMpSzq7ZkL0G8a74YLD%2F9bT1R4K2WQOm57fCl6ZTcYiNVt16a8tPVBqqgRSBxPx%2FjvqyUH1kiY7ly2x9WfQ944VyfK40ZYfKo7hperkiLZ8efN5KAuRNEdM%2FhafVX2hrM1s4YZplkeWMIcUgMvawvU2MlxlVHlAlg8%2FHcLaZ7m0f1tPQtPORIl8RTOjqHdPA084hh4bKQdilDoIB%2FYsdOELboZzKXACQ24hUtZEWnGU1lQT9O6ouckr0HoFXhP4FuXRVVRIWWaj28seBr0PS%2FYGiyCOpGuapVu0iRZ6l0ssMqz3HrkJSosycc%2BHO%2BFlSC4uDtXtQ8Slj9TCrQHZ5RvbXDykOuPqgbB4aihP2pn0ZzTKiA2xqH3Ei%2FXua5x95q8zoFMvXQ2QcWOIq6Cr8vXceC6L%2FIdGQPHKmv0NlGpVGriMTKJQxeRrwLFU35ZqE3VlwjovA8CZizjthROXZ6lkfEWjPP7FYFz5acReneYmiv%2BS%2F7wi9cWRkA7EtBo2n6xLVswJNWtFckrRakt%2FLsScnHywzMJLWjQU%2BvV6I2uqe5ZXI9FsbB3PcdPvvqaVJHfOOaCVxa6Gaw%2BMjg6wt8JMM7506gGOpoBwIS9M7aZmwMaVYovGHMNTITiaEkFWno8TiOYH%2B%2BbL0xMCHOOGU267D2J71nykKeEPftoqYzNZ8KmZ1%2BAOQm4Fwk%2FrTuJ4pWh%2BUMc5yzRGSTDxo%2FQ6Pb1XQjmnrc%2Fn3HEc7ljr4PomjrQaoUhxcuqrMYXmYo2JDWBfLo9E3rpXdHYHgL3AO%2FmltMkjDidm13ztupNvcBkpq%2Bidg%3D%3D",
	                                        "type": "video",
	                                        "poster": "2RvGkkdSf7Ct1Q5C_rise_2Fcourses_2FDs8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6_2FuSrifKCakWMfLzp7-Skin_2520structure_NOPROCESS_.png",
	                                        "captions":
	                                        [
	                                            {
	                                                "id": "cln2okjvi003s356z29etp5ia",
	                                                "key": "4uKdOOe7g_ft8zBm_WScdZzmAVrJ54xMo-Skin_2520structure.vtt",
	                                                "code": "en",
	                                                "name": "English",
	                                                "filename": "Skin structure.vtt"
	                                            }
	                                        ],
	                                        "filename": "N32ShgLD4nfqM2Vc-Skin%20structure_NOPROCESS_.mp4",
	                                        "thumbnail": "https://images.articulate.com/f:jpg,b:fff,w:100,h:100,s:cover/rise%2Fcourses%2FDs8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6%2FuSrifKCakWMfLzp7-Skin%2520structure_NOPROCESS_.png",
	                                        "captionUID": "cln2oknfa003t356z6bsnhf1g",
	                                        "trackingId": "cljegbvb400dy356reu95u6el",
	                                        "originalUrl": "Skin structure_NOPROCESS_.mp4",
	                                        "skipProcess": true,
	                                        "cancelSource":
	                                        {
	                                            "token":
	                                            {
	                                                "promise":
	                                                {}
	                                            }
	                                        },
	                                        "trackingContext": "block:video"
	                                    }
	                                },
	                                "caption": ""
	                            }
	                        ],
	                        "family": "multimedia",
	                        "variant": "video",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": "LIGHT",
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clisq4qvl007x0zegclnpf9zc",
	                        "type": "knowledgeCheck",
	                        "items":
	                        [
	                            {
	                                "id": "cl31t7bpl0004396u8s3zbk23",
	                                "type": "MULTIPLE_RESPONSE",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/FYPCkkUouxIVoj9g.jpg",
	                                        "type": "image",
	                                        "align": "left",
	                                        "isSquare": false,
	                                        "crushedKey": "PCkY0p1wHcPHm7lm_FYPCkkUouxIVoj9g.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 99,
	                                            "left": 0,
	                                            "width": 1680,
	                                            "height": 987,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1118
	                                        },
	                                        "originalUrl": "AdobeStock_596097817.jpeg",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/5j_gY69jqICAsFbX-AdobeStock_596097817.jpeg",
	                                            "type": "image",
	                                            "align": "left",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/fgYLOEKAR7R8JezJ.jpg",
	                                            "originalUrl": "AdobeStock_596097817.jpeg",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "<p><span style=\"font-size: 24px;\">Funciones de la Piel:</span></p><p><span style=\"font-size: 17px;\">Seleccionar todas las funciones correctas de la piel. Recibirás comentarios al responder.</span></p>",
	                                "answers":
	                                [
	                                    {
	                                        "id": "ckoq2c9jk00133c5jgdnbqqub",
	                                        "title": "<p><span style=\"font-size: 22px;\">Regulación de la temperatura corporal.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "ckoq2c9jk00123c5jalf7gv0a",
	                                        "title": "<p><span style=\"font-size: 22px;\">Protección contra microorganismos, contaminantes y luz ultravioleta.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cl0az4eyb000g396fkmjkvvei",
	                                        "title": "<p><span style=\"font-size: 22px;\">Sintetiza la vitamina D.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cl5v606h80008356q31x06luq",
	                                        "title": "<p><span style=\"font-size: 22px;\">Respiración.</span></p>",
	                                        "correct": false
	                                    },
	                                    {
	                                        "id": "cl5v60qij0009356qfn2xtvcl",
	                                        "title": "<p><span style=\"font-size: 22px;\">Sensación de calor, frío, presión, tacto y dolor.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "clisqgndt011l356r7lsvch3c",
	                                        "title": "<p><span style=\"font-size: 22px;\">Absorción de nutrientes.</span></p>",
	                                        "correct": false
	                                    }
	                                ],
	                                "feedback": "",
	                                "feedbackType": "CORRECT_INCORRECT",
	                                "feedbackCorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Correcto. La piel nos protege de microorganismos invasivos, contaminantes y radiación ultravioleta y nos permite sentir nuestro entorno. Ayuda a mantener la homeostasis regulando la temperatura corporal y previniendo la deshidratación. La piel también sintetiza vitamina D con la ayuda de la luz solar.</span></p>",
	                                "feedbackIncorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">No del todo bien. La piel nos protege de microorganismos invasivos, contaminantes y radiación ultravioleta y nos permite sentir nuestro entorno. Ayuda a mantener la homeostasis regulando la temperatura corporal y previniendo la deshidratación. La piel también sintetiza vitamina D con la ayuda de la luz solar.</span></p>"
	                            }
	                        ],
	                        "family": "knowledgeCheck",
	                        "variant": "multiple choice",
	                        "settings":
	                        {
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundColor": "#9ca9b1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clisr3a0t02o411b32qmihmnn",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clhkde4lc000f356xf9phf225",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">¿Recuerdas las diferentes características de las tres capas principales de la piel? Asocia las descripciones a la capa de piel correcta y recibe retroalimentación directa.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clisr39yu00dd11g4ed9x4eik",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "clhzwty7r000d356p8u0xfzqb",
	                                "title": "Consta de tejido adiposo y tejido conectivo",
	                                "pileId": "clhzwty7r000c356p0bsab2yr"
	                            },
	                            {
	                                "id": "clhzwuqmc000g356pr3t0l8a1",
	                                "title": "Conectado a la dermis en la unión dermoepidérmica",
	                                "pileId": 1
	                            },
	                            {
	                                "id": "clhzwvjao000i356p0zy4uo85",
	                                "title": "No tiene su propio suministro de sangre",
	                                "pileId": 1
	                            },
	                            {
	                                "id": "clhzwvt96000k356p85mal8qg",
	                                "title": "Recibe oxígeno y nutrientes a través de la <b>dermis.</b>",
	                                "pileId": 1
	                            },
	                            {
	                                "id": "clhzwz20b000m356pz1ib6zhi",
	                                "title": "Consta de tejido conectivo",
	                                "pileId": 2
	                            },
	                            {
	                                "id": "clhzx1jra000o356peupq8eh3",
	                                "title": "Contiene fibras elásticas",
	                                "pileId": 2
	                            },
	                            {
	                                "id": "clhzx3rlp000q356p5ztnmmus",
	                                "title": "Contiene vasos sanguíneos, vasos linfáticos, nervios y glándulas sudoríparas.",
	                                "pileId": 2
	                            },
	                            {
	                                "id": "clisr4jyh0003356roy18ug2j",
	                                "title": "Contiene células que determinan el tono de la piel.",
	                                "pileId": 1,
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "piles":
	                        [
	                            {
	                                "id": 1,
	                                "title": "Epidermis"
	                            },
	                            {
	                                "id": 2,
	                                "title": "Dermis"
	                            },
	                            {
	                                "id": "clhzwty7r000c356p0bsab2yr",
	                                "title": "Hipodermis"
	                            }
	                        ],
	                        "family": "interactive-fullscreen",
	                        "variant": "sorting",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clhyuzh5j001o356rkptdj0n6",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clhyuzh5j001p356rad82ac57",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/NG3rBe3yZy8IiPV5-Skin%2520Health%2520-%2520Close%2520up%2520on%2520a%2520female%2520residents%2520shoulder%252C%2520nurse%2520holding%2520her%2520hand%2520around%2520it.png",
	                                        "type": "image",
	                                        "crushedKey": "omobGLhVo6wQb-Bw_vgw2HD5qn34mWXB3.jpg",
	                                        "originalUrl": "Skin Health - Close up on a female residents shoulder, nurse holding her hand around it.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p>Varios factores relacionados con el paciente afectan la salud de la piel y la cicatrización de heridas. Sigue leyendo y haz clic en los encabezados para obtener más información.</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.3,
	                            "cardMode": null,
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cliss6co700g80zev3qbldyhq",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cl6j33923000e356qa1yh5mm1",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/ih6_og_17W8qLkRJ-elderly%25202.png",
	                                        "type": "image",
	                                        "crushedKey": "62K20H1D-ne5ojYo_mwiXKJ8VNdgZTJiC.png",
	                                        "originalUrl": "elderly 2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">El proceso de envejecimiento</span></p>"
	                            },
	                            {
	                                "id": "cl6j33923000g356qep3bsi95",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Vvw3AvCMpvhtoRGO-diseases%25202.png",
	                                        "type": "image",
	                                        "crushedKey": "9IUFXaYEOHTlASxV_v6ROBjzCZK5jsyhl.png",
	                                        "originalUrl": "diseases 2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Enfermedades subyacentes</span></p>"
	                            },
	                            {
	                                "id": "cl6j33923000f356qt3ixxan3",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/djweR_hSgjd7Le8S-medication%25202.png",
	                                        "type": "image",
	                                        "crushedKey": "aVhW47VTfhtK_G16_r7ob0bzQrGQ6jA6z.png",
	                                        "originalUrl": "medication 2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Medicamentos</span></p>"
	                            }
	                        ],
	                        "family": "gallery",
	                        "variant": "three column",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 3,
	                            "zoomOnClick": false,
	                            "paddingBottom": 0,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cliss6ms8000h356rrldemjvj",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clistb5uf000u356rhhgh3wnt",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/b8HpArcVbnoFNFT0-nutrition_icon2.png",
	                                        "type": "image",
	                                        "crushedKey": "5H-I2MwyC9tB-Qev_6D1_EvDSg-9lExE6.png",
	                                        "originalUrl": "nutrition_icon2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Ingesta insuficiente de nutrientes esenciales</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "id": "cliss6ms8000i356rbj8qmb83",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Ib9nMv7EkfxErPic-psychosocial%25202.png",
	                                        "type": "image",
	                                        "crushedKey": "ESUsvdzYuFW8OukP_y0d69aGw-jDq34AQ.png",
	                                        "originalUrl": "psychosocial 2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Factores psicosociales</span></p>"
	                            },
	                            {
	                                "id": "cliss6ms8000k356rscwnzhoz",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/hLyMOWhUVUjVSC_1-pain%25202.png",
	                                        "type": "image",
	                                        "crushedKey": "aDMT1HzcwmeNQJj6_yUACaiZ810pLpmGb.png",
	                                        "originalUrl": "pain 2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Dolor</span></p>"
	                            }
	                        ],
	                        "family": "gallery",
	                        "variant": "three column",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 0,
	                            "zoomOnClick": false,
	                            "paddingBottom": 3,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clkcdt5lh00gp11if0o87a1t0",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "clkcckqgz00043575j5ub1e6v",
	                                "title": "El proceso de envejecimiento",
	                                "description": "<p><span style=\"font-size: 17px;\">El proceso de envejecimiento puede afectar significativamente tanto la piel como la capacidad del cuerpo para sanar heridas. Los cambios relacionados con la edad, como la disminución de la producción de colágeno, el flujo sanguíneo comprometido y la reducción de la renovación celular, pueden provocar una cicatrización de heridas más lenta, mayor susceptibilidad a infecciones y un mayor riesgo de desarrollar heridas crónicas</span><span style=\"font-size: 16px;\"><sup>1</sup></span><span style=\"font-size: 17px;\">.</span></p>"
	                            },
	                            {
	                                "id": "clkcckqgz00053575dyfhjl44",
	                                "title": "Enfermedades subyacentes",
	                                "description": "<p><span style=\"font-size: 17px;\">La cicatrización deficiente de heridas puede ser una preocupación para personas con diabetes, infecciones, enfermedades renales y otras afecciones. En la diabetes, el alto nivel de azúcar en sangre y la circulación reducida retrasan la curación e incrementan el riesgo de infección. Las infecciones dificultan la cicatrización, especialmente en sistemas inmunológicos debilitados. Las enfermedades renales reducen la producción de factores de crecimiento y la entrega de oxígeno, lo que afecta la cicatrización. La gestión adecuada y la atención personalizada son cruciales para una óptima cicatrización de heridas en estas condiciones</span><span style=\"font-size: 16px;\"><sup>2</sup></span><span style=\"font-size: 17px;\">.</span></p>"
	                            },
	                            {
	                                "id": "clkcfinv0001u3575ny85pstl",
	                                "media":
	                                {},
	                                "title": "Medicamentos",
	                                "description": "<p><span style=\"font-size: 17px;\">Algunos medicamentos, como los esteroides e inmunosupresores, pueden debilitar el sistema inmunológico, haciéndolo más vulnerable a infecciones y retrasando el proceso de curación. Los medicamentos antiinflamatorios no esteroides (AINEs) pueden inhibir la respuesta inflamatoria, lo que también retrasa la cicatrización de heridas. Además, ciertos medicamentos pueden interferir con la coagulación sanguínea o afectar la formación de nuevo tejido, dificultando aún más la cicatrización de heridas</span><span style=\"font-size: 16px;\"><sup>3</sup></span><span style=\"font-size: 17px;\">.</span></p>"
	                            },
	                            {
	                                "id": "clkcfiow1001x3575aec4ctj4",
	                                "media":
	                                {},
	                                "title": "Ingesta insuficiente de nutrientes esenciales",
	                                "description": "<p><sup><span style=\"font-size: 17px;\">La falta de nutrientes esenciales como vitaminas, minerales y ácidos grasos puede afectar significativamente la piel, provocando sequedad, opacidad, mayor susceptibilidad a daños y una capacidad comprometida para reparar y regenerar, lo que en última instancia afecta la salud general de la piel</span></sup><sup><span style=\"font-size: 17px;\"><sup>4</sup></span></sup><sup><span style=\"font-size: 17px;\">.</span></sup></p>"
	                            },
	                            {
	                                "id": "clkcfiqei00203575a9rovf5i",
	                                "media":
	                                {},
	                                "title": "Factores psicosociales",
	                                "description": "<p><span style=\"font-size: 17px;\">El estrés, la ansiedad, la depresión y otros factores psicosociales pueden influir en la salud de la piel y la cicatrización de heridas. Es importante considerar estos aspectos en el manejo integral de pacientes con heridas<sup>5</sup>.</span></p>"
	                            },
	                            {
	                                "id": "clkcfirir00233575qqm1tjyg",
	                                "media":
	                                {},
	                                "title": "Dolor",
	                                "description": "<p><span style=\"font-size: 17px;\">El dolor puede obstaculizar la cicatrización de heridas al desencadenar una respuesta de estrés, reducir la movilidad, perturbar los patrones de sueño y causar angustia psicológica. Estos factores pueden afectar la función inmunológica, limitar el flujo sanguíneo y dificultar los procesos naturales de curación del cuerpo. La gestión efectiva del dolor es crucial para promover resultados óptimos en la cicatrización de heridas<sup>6</sup>.</span></p>",
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "family": "interactive",
	                        "variant": "accordion",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 2,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljb9md2c001s356wy2zd8o0e",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljb9m7k6001o356wede4j7s6",
	                                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\" bis_skin_checked=\"1\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(0, 0, 0);\"><b>Leukoplast<sup>®</sup></b> ofrece un amplio portafolio de soluciones para el cuidado de heridas para todo tipo de piel. Da clic en los signos de más (+) para conocer los productos adecuados para personas con piel sana y para personas con piel frágil o sensible.</span></span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 5,
	                            "paddingBottom": 3,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljb9k5bs0017356wdasmjlrz",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "59.46242490768978",
	                                "y": "67.48658726505286",
	                                "id": "cljb9k5bt0018356whxoz9ccw",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/kYCvdJjvhOkrwA73-Leukomed%2520absorbent%2520plus.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "B3btotSqdSp0yzUc_5SjG18OiCy7Chmxd.png",
	                                        "originalUrl": "Leukomed absorbent plus.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukomed<sup>®</sup> T plus",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas. Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                            },
	                            {
	                                "x": "42.430965428600096",
	                                "y": "43.724630801633694",
	                                "id": "cljb9k5bt0019356wuc0wolg1",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/9bl494HvJO0tfqea-leukoplast_leukomed%2520tplus%2520waterproof_ecom%2520packshot_f_7995405_EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "yPnFpdxExXIiAuUi_tDp8BqQNEgzgdNcw.png",
	                                        "originalUrl": "leukoplast_leukomed tplus waterproof_ecom packshot_f_7995405_EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Profesional Elásticas",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores permitiendo la movilidad por ser flexibles. <br>Son autoadhesivas, elásticas, de color piel en formas surtidas para diferentes tipos de heridas.</span></p>"
	                            },
	                            {
	                                "x": "40.6431877032189",
	                                "y": "68.17015744649004",
	                                "id": "cljb9rz7f001v356wa983ombv",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/yrIW3paOBxrGx4x8-Leukoplast-Elastic-B2C-Website-Packshot-Front-1000x1000px.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "XwcY9VVReZcgAH7g_7wdRu1-1ZkdQKA6N.png",
	                                        "originalUrl": "Leukoplast-Elastic-B2C-Website-Packshot-Front-1000x1000px.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Esparadrapo de tela",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Indicado para dar soporte y fijación de apósitos y vendajes. Tiene una fijación fuerte y confiable, es de alta resistencia y fácil rasgado garantizando excelente adhesividad inicial y permanente.</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "34.865865444665424",
	                                "y": "25.38300154777442",
	                                "id": "cljb9lgbx001f356wj33pptwm",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/RO6tsWn8wv7I-nl1-Hypafix_Skin_Sensitive_2.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "idw3URnNfWDtiean_566yRCseuV599zyj.png",
	                                        "originalUrl": "Hypafix_Skin_Sensitive_2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> Stretch",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Gasa adhesiva para la fijación segura de apósitos, catéteres, cánulas, sondas, tubos, dispositivos de medición y otros instrumentos. Garantiza fijación incluso sobre los contornos del cuerpo y articulaciones móviles hasta por 7 días, es 10 veces más elástico y brinda una mejor transpirabilidad permitiendo que la piel respire y así reducir riesgos de infección.</span></p>"
	                            },
	                            {
	                                "x": "63.74255852526285",
	                                "y": "25.984524989773206",
	                                "id": "cljb9ljha001h356wl38mjsf1",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/L0QhHVeXqZg4X5hY-leukoplast-cuticell-contact-silicone-2.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "XLkFE7f--CPMnqAp_FWU3BTNuiITbWT2a.png",
	                                        "originalUrl": "leukoplast-cuticell-contact-silicone-2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> Skin sensitive",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Es un producto de fijación para áreas amplias del cuerpo con adhesivo de silicona, diseñado para fijar apósitos y dispositivos médicos en piel frágil o sensible. Permite el reposicionamiento y tiene un retiro atraumático y sin dolor.</span></p>"
	                            },
	                            {
	                                "x": "57.248883401861036",
	                                "y": "43.989423598416614",
	                                "id": "cljb9ll3i001j356wt8n6fyhr",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/kbf-cEmrDTiGOFsB-Leukoplast-Leukomed-T-Plus-Skin-Sensitive-Website-Packshot-Front-1000x1000px.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "532e0uUrQ7uIxbnk_JkKDlSPNxWMaX7n8.png",
	                                        "originalUrl": "Leukoplast-Leukomed-T-Plus-Skin-Sensitive-Website-Packshot-Front-1000x1000px.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Esparadrapo skin sensitive",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Es una cinta de fijación o esparadrapo con adhesivo de silicona, en presentación de carrete, ideal para el cuidado de heridas en piel frágil o sensible, como la de bebés o adultos mayores. Permite el reposicionamiento y tiene un retiro atraumático y sin dolor.</span></p>"
	                            },
	                            {
	                                "x": "68",
	                                "y": "85",
	                                "id": "cljb9ll3i001j356wt8n6fyh1",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/01Leukopor.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "01Leukopor.png",
	                                        "originalUrl": "01Leukopor.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukopor<sup>®</sup> ",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Cinta microporosa usada como material auxiliar en procesos de curación y otros, ideal para asegurar o fijar gasas, apósitos y vendajes. Con adhesión suave, es flexible, de fácil rasgado, cómodo y amigable con la piel.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/HYCXwYswfSEy3kFJ-normal%2520vs%2520sensitive%2520skin.png",
	                                "type": "image",
	                                "crushedKey": "YdXGuDZ8h_iV3PMf_0WAMFhS4FwfJbtPX.png",
	                                "originalUrl": "normal vs sensitive skin.png",
	                                "useCrushedKey": true
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#ffffff",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cli011z5o003r356ph0g2qnuj",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cli011r25003n356psg9rd2lp",
	                                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(255, 255, 255);\">En el próximo capítulo, examinaremos más de cerca los productos de Leukoplast que son adecuados para diferentes tipos de heridas.</span></span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "styleMode": "BRANDED",
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundMode": "COLOR",
	                            "backgroundColor": "#9CA9B1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cl6c208r8003a356qrxd8sy3q",
	                        "type": "divider",
	                        "items":
	                        [
	                            {
	                                "id": "ckus5rpu70010386fx0vf3m3s",
	                                "type": "",
	                                "title": "Módulo 2: Tipos de Heridas y Productos Adecuados",
	                                "buttonColor": "brand",
	                                "completeHint": "Complete el contenido anterior antes de continuar."
	                            }
	                        ],
	                        "family": "continue",
	                        "variant": "continue",
	                        "settings":
	                        {
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {},
	                "duplicatedFromId": "",
	                "deleted": false,
	                "createdAt": "2021-01-18T13:04:23.387Z",
	                "updatedAt": "2024-01-04T14:12:42.093Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": null,
	                "headerImage":
	                {}
	            },
	            {
	                "id": "QOHdSGHtT0NOIR6p-qHIdVZfLhOqj6vk",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "Módulo 2: Tipos de Heridas y Productos Adecuados",
	                "description": "",
	                "type": "blocks",
	                "icon": "Article",
	                "items":
	                [
	                    {
	                        "id": "cli1m1a410003356p43d85yey",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cli1m1a410004356ptsl7a1ed",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/O5ttcJvKeR4NlOXm-Leukoplast-Wound-Advisor-Scratches-Treatment-Lifestyle-flipped.png",
	                                        "type": "image",
	                                        "crushedKey": "cFrHLWQzwUeRV7g1_MIATKV2c2H_fFHSh.jpg",
	                                        "originalUrl": "Leukoplast-Wound-Advisor-Scratches-Treatment-Lifestyle-flipped.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p>Una herida puede ocurrir como resultado de una lesión, si el suministro de sangre está comprometido o después de una operación. Cuando alguien tiene una herida, puede sentir dolor y esto podría ser un signo de riesgo de complicaciones en la herida.</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.3,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cli1maw9b0009356pht68flfb",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cli1maw9b000a356plcmbctje",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Dependiendo del tiempo de cicatrización, las heridas se pueden clasificar como <b>agudas o crónicas</b>. Sigue leyendo y haz clic en los encabezados para obtener más información:</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 1,
	                            "backgroundType": null,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clhn3rjo7004m356unmfekobt",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clhn3rjo8004r356uus57k05r",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/6tYpLQ3dMsaHPPCf-acute%2520wound%2520icon%25202.png",
	                                        "type": "image",
	                                        "crushedKey": "AEP99zET5xg1mqXV_lH1ZGdAB7KOKPiQ_.png",
	                                        "originalUrl": "acute wound icon 2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: left;\"><span style=\"font-size: 24px;\">Las <strong>heridas agudas</strong> son lesiones repentinas, como cortes y laceraciones, que afectan las capas externas de la piel o los tejidos subyacentes. Estas heridas pasan por etapas normales de cicatrización.</span></p>"
	                            },
	                            {
	                                "id": "clhn3rjo8004s356uwg94qyy4",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/kkgQknF27EjoH5og-leg%2520ulcer.png",
	                                        "type": "image",
	                                        "crushedKey": "9S8blMijxvyYKA3n_EEIXVLmbRmqZamy2.png",
	                                        "originalUrl": "leg ulcer.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p style=\"text-align: left;\"><span style=\"font-size: 24px;\">Las <strong>heridas crónicas</strong> persisten y no sanan dentro del tiempo esperado. Tipos comunes de heridas crónicas incluyen úlceras por presión, úlceras diabéticas en los pies, úlceras venosas, úlceras arteriales y heridas quirúrgicas que no cicatrizan.</span></p>"
	                            }
	                        ],
	                        "family": "gallery",
	                        "variant": "two column",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 1,
	                            "accentColor": null,
	                            "zoomOnClick": false,
	                            "paddingBottom": 2,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clkcckqgz000235753o5dizg7",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "clkcckqgz00043575j5ub1e6v",
	                                "title": "Heridas Agudas:",
	                                "description": "<p><span style=\"font-size: 17px;\">Las heridas agudas</span><span style=\"font-size: 17px;\"> tienen bordes bien definidos y pueden sangrar e hincharse. El tratamiento implica limpiar la herida, cerrarla si es necesario y proporcionar el cuidado adecuado. El tiempo de cicatrización varía según el tamaño y la gravedad de la herida. En casos graves, se requiere atención médica<sup>7</sup>.</span></p>"
	                            },
	                            {
	                                "id": "clkcckqgz00053575dyfhjl44",
	                                "title": "Heridas Crónicas:",
	                                "description": "<p><span style=\"font-size: 17px;\">El tratamiento implica abordar la causa subyacente, promover la cicatrización de la herida y manejar las complicaciones. Buscar atención médica especializada es importante para una evaluación y tratamiento adecuados<sup>8</sup>.</span></p>"
	                            }
	                        ],
	                        "family": "interactive",
	                        "variant": "accordion",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 2,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clivp15jn000c356w07ajo61a",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clivp15jn000d356wuumjpyyb",
	                                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">En el manejo de heridas, se pueden considerar apósitos estériles para ayudar a minimizar el riesgo de infección. Sigue leyendo y da clic en los signos de más (+) para obtener más información sobre los diferentes tipos de heridas agudas y los productos adecuados dentro del portafolio de <b>Leukoplast</b>.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#9CA9B1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljeeqtuw003r356r6hqsg830",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljeeqs0k003q356rvh6ad5y0",
	                                "heading": "<p><strong>Abrasiones</strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Las <b>abrasiones</b>, también conocidas como raspaduras o rozaduras, ocurren cuando las capas superiores de la piel se desprenden generalmente debido a una superficie áspera. Suelen ocurrir en las piernas, brazos, manos o caderas. Las abrasiones rara vez sangran profusamente, pero duelen, a menudo supuran mucho y son propensas a infecciones.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljeeqbnw0035356rd5xof9qe",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "28.115526925820255",
	                                "y": "20.184375",
	                                "id": "clkqom3qp00043575wrrt8eoj",
	                                "icon": "01",
	                                "title": "Cuando buscar asesoramiento médico",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Se recomienda visitar a un <b>profesional de la salud</b> si una persona:</span></p><ul><li><span style=\"font-size: 20px;\"><b>No puede detener el sangrado.</b></span></li><li><span style=\"font-size: 20px;\">Experimenta <b>pérdida persistente o significativa de sensación cerca de la herida</b> o tiene dificultad para mover alguna parte del cuerpo.</span></li><li><p><span style=\"font-size: 20px;\">Tiene un <b>corte grave en la cara.</b></span></p></li><li><p><span style=\"font-size: 20px;\"><b>Muestra signos de infección.</b></span></p></li><li><p><span style=\"font-size: 20px;\"><b>Indica que existe la posibilidad de que un cuerpo extraño aún esté dentro de la herida.</b></span></p></li><li><p><span style=\"font-size: 20px;\"><b>Ha pasado más de cinco años desde su última vacuna antitetánica.</b></span></p></li></ul>"
	                            },
	                            {
	                                "x": "52.45729166666667",
	                                "y": "76.34424408728603",
	                                "id": "cljeeqbnw0037356r4uvp50op",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/-7Jb72YjNIn8C2sn-leukoplast-soft-compress-ecom-packshot-f-7999502-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "PqGOx9kvwN_mOCTt_yMyv-rAGp1i3ZxMI.png",
	                                        "originalUrl": "leukoplast-soft-compress-ecom-packshot-f-7999502-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Profesional Estándar",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores. Son plásticas, autoadhesivas, de color piel y resistentes al agua. Ayudan a prevenir la infección en las heridas, son altamente adaptables y flexibles, además fáciles de remover.</span></p>"
	                            },
	                            {
	                                "x": "71.66666666666667",
	                                "y": "78.8187638834444",
	                                "id": "clmak18qk000h3579lfgxl7to",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/CfCNjI3dRSImFSQH-leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "kSduCyF5il0t4XqK_OdZbl8UM0aHS94R1.png",
	                                        "trackingId": "cljeeqbnw0035356rd5xof9qe",
	                                        "originalUrl": "leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "useCrushedKey": true,
	                                        "trackingContext": "block:labeled-graphic"
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Leukomed<sup>®</sup>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Gasa blanca adhesiva estéril con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas.</span></p><p><span style=\"font-size: 20px;\">No se adhiere a la herida, brinda transpirabilidad, tiene una buena capacidad de absorción y adhesión y al mismo tiempo es amigable con la piel.</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "88.40625",
	                                "y": "76.8342480073174",
	                                "id": "cljeeqbnw0036356rot61vy3z",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/52sIpI6LX5TOPm_N-leukoplast-absorbent-plus-ecom-packshot-f-7995205-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "6IhMVGnUKlJlSHKW_uYyHW3f8rburUy-X.png",
	                                        "originalUrl": "leukoplast-absorbent-plus-ecom-packshot-f-7995205-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Profesional Elásticas",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores permitiendo la movilidad por ser flexibles. <br>Son autoadhesivas, elásticas, de color piel en formas surtidas para diferentes tipos de heridas.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "4JDv5qO1Kq-9H9kW_NUCPhmZ9_QbLakZI.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/NUCPhmZ9_QbLakZI.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 239,
	                                    "width": 1402,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "abrasion2_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/O4HCVm80_4k2gDWX-abrasion2_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/HO_HOFPKz4BYPCr-.png",
	                                    "originalUrl": "abrasion2_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljeeyrck0066356rtjp2hc4j",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljeeyprn0065356rk5a2byle",
	                                "heading": "<p><strong>Mordeduras</strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Las <strong>mordeduras</strong> son penetraciones en la piel y daño en los tejidos causados por los dientes de un ser humano o un animal. Estas mordeduras requieren una evaluación médica inmediata por parte de un profesional médico. Los mosquitos, garrapatas, pulgas, chinches y otros insectos también pueden causar mordeduras.<strong> Las mordeduras requieren una evaluación médica inmediata.</strong> Se debe recomendar una visita a un <strong>profesional de la salud.</strong></span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljeeywup006c356rbbeqxsbo",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "30.81133994389035",
	                                "y": "23.200000000000003",
	                                "id": "clkuus3b10004356wkyz2te5h",
	                                "icon": "01",
	                                "title": "Se recomienda visitar a un profesional de la salud, además tener en cuenta qué:",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<ul><li><span style=\"font-size: 20px;\"><b>Para las mordeduras de animales</b>, se debe considerar el riesgo del <b>virus de la rabia y el tétanos.</b></span></li><li><span style=\"font-size: 20px;\"><b>Para las mordeduras humanas,</b> se debe tener en cuenta el riesgo de <b>hepatitis, VIH y otras infecciones.</b></span></li><li><span style=\"font-size: 20px;\"><b>Es posible mantener el cuidado después del tratamiento médico.</b></span></li></ul>"
	                            },
	                            {
	                                "x": "54",
	                                "y": "70",
	                                "id": "clk83all1000g3575xnsod9dl",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/K20yY9XzEwwYn9a7-leukoplast-soft-compress-ecom-packshot-f-7999502-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "ppig_PE7Qzh7S8d2_qT1aQbeOVEx-8UMO.png",
	                                        "originalUrl": "leukoplast-soft-compress-ecom-packshot-f-7999502-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Leukomed<sup>®</sup> Sorbact<sup>®</sup>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito adhesivo estéril indicado para heridas post quirúrgicas en riesgo de infección o infectadas, gracias a su tecnología Sorbact atrae y retiene las bacterias mediante un método de acción puramente físico.</span></p><p><br></p>"
	                            },
	                            {
	                                "x": "67.64643101092896",
	                                "y": "75.4",
	                                "id": "clmevfon900083579rge4jeg4",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/_p3TBpLvG3kEaNqK-leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "Qx0bZQ2E4c8IhhJ1_JBWy3vl7gME_D67z.png",
	                                        "trackingId": "cljeeywup006c356rbbeqxsbo",
	                                        "originalUrl": "leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "useCrushedKey": true,
	                                        "trackingContext": "block:labeled-graphic"
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> Stretch",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Gasa adhesiva para la fijación segura de apósitos, catéteres, cánulas, sondas, tubos, dispositivos de medición y otros instrumentos.</span></p><p><span style=\"font-size: 20px;\">Garantiza fijación incluso sobre los contornos del cuerpo y articulaciones móviles hasta por 7 días, es 10 veces más elástico y brinda una mejor transpirabilidad permitiendo que la piel respire y así reducir riesgos de infección.</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "84.47052168715847",
	                                "y": "73.53125",
	                                "id": "cljeeyu070068356rhszf6298",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/KW53qzpxx0m_5an8-Leukomed%2520sorbact%2520infection%2520control.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "XbwF5HNKEd0QI7x8_SJHs4JrddCVthkXQ.png",
	                                        "originalUrl": "Leukomed sorbact infection control.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> Transparent",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Película transparente e impermeable para fijación de apósitos, catéteres, cánulas, sondas, tubos, dispositivos de medición y otros instrumentos. </span><span style=\"font-size: 20px;\">Garantiza fijación e inspección incluso sobre los contornos del cuerpo y articulaciones móviles hasta por 7 días, es 10 veces más elástico y brinda una mejor transpirabilidad permitiendo que la piel respire y así reducir riesgos de infección.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "Rje7UXiy22V1jg62_qhWEVjh9g0mvF_yC.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/qhWEVjh9g0mvF_yC.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 198,
	                                    "width": 1467,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "bite2_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/oXyQV0HQ6sA08j3V-bite2_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/WyT-S6k5On8Mj0Vh.png",
	                                    "originalUrl": "bite2_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgucbo5000z356wy4y7hd6r",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljguc6wz000w356w9ptnywt5",
	                                "heading": "<p><strong><strong>Ampollas</strong></strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\"><b>Las ampollas</b> son elevaciones redondeadas de la piel que contienen <b>líquido claro,</b> causadas por la separación entre las capas de la epidermis o entre la epidermis y la dermis. Las ampollas suelen resultar de <b>fricción o presión</b> en áreas como las palmas o las plantas de los pies, y aunque pueden ser dolorosas, sanan fácilmente una vez que se elimina la causa.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljguckuc0019356wklqupy9t",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "35.09202157079646",
	                                "y": "22",
	                                "id": "clkqpx5km00043575aj7dbgfe",
	                                "icon": "01",
	                                "title": "Cómo tratar una ampolla:",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<ul><li><span style=\"font-size: 20px;\"><b>No revientes una ampolla tú mismo;</b> es probable que contamines la herida.</span></li><li><span style=\"font-size: 20px;\">Si ya se ha reventado, <b>permite que el líquido drene antes de cubrirla con un apósito o vendaje.</b></span></li></ul><p><span style=\"font-size: 20px;\"><strong>Cuando buscar asesoramiento médico: </strong></span></p><p><br></p><p><span style=\"font-size: 20px;\">Se recomienda consultar a un <b>profesional de la salud</b> si:</span></p><ul><li><span style=\"font-size: 20px;\">Una ampolla es <b>muy dolorosa o sigue reapareciendo.</b></span></li><li><span style=\"font-size: 20px;\">La piel alrededor de la ampolla <b>parece infectada</b> (está caliente y la ampolla está llena de pus verde o amarillo).</span></li><li><span style=\"font-size: 20px;\">La piel alrededor de la ampolla <b>se ve roja</b> (esto puede ser más difícil de ver en tonos de piel más oscuros).</span></li><li><span style=\"font-size: 20px;\">Una ampolla está en un lugar <b>inusual</b>, como los párpados, la boca o los genitales.</span></li><li><span style=\"font-size: 20px;\">Han aparecido <b>varias ampollas sin motivo aparente.</b></span></li><li><span style=\"font-size: 20px;\">Una ampolla fue causada por <b>quemadura, escaldadura, quemadura solar o una reacción alérgica.</b></span></li></ul>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "62.66362463126843",
	                                "y": "72.075",
	                                "id": "cljgucfc80012356wo99kgt1f",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Cy4hJpovX5yGpfhc-leukoplast-elastic-ecom-packshot-f-7321923-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "XTFGgNNCNxxHc8up_lwRvifcy_EAWsYzf.png",
	                                        "originalUrl": "leukoplast-elastic-ecom-packshot-f-7321923-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukomed<sup>®</sup> T plus",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas.</span></p><p><span style=\"font-size: 20px;\">Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                            },
	                            {
	                                
	                                "x": "93.66362463126843",
	                                "y": "72.075",
	                                "id": "cljgucfc80012356wo99kgt16",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Cy4hJpovX5yGpfhc-03LeukoplastAquaPro.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "03LeukoplastAquaPro.png",
	                                        "originalUrl": "03LeukoplastAquaPro.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Aqua Pro",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Curas transparentes, impermeables, surtidas y casi invisibles. Ideales para proteger heridas menores del agua, la suciedad y las bacterias. Son transpirables, cómodas y flexibles. Cuentan con una almohadilla central absorbente de baja adherencia.</span></p>"
	                            },
	                            {
	                                
	                                "x": "77.66362463126843",
	                                "y": "60.075",
	                                "id": "cljgucfc80012356wo99kgt17",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/04LeukoplastProfesionalElasticas.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "04LeukoplastProfesionalElasticas.png",
	                                        "originalUrl": "04LeukoplastProfesionalElasticas.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Profesional Elásticas",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores permitiendo la movilidad por ser flexibles. <br>Son autoadhesivas, elásticas, de color piel en formas surtidas para diferentes tipos de heridas.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "45Dja1VWaF76HroW_FXEtUxT2dmaClFmm.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/FXEtUxT2dmaClFmm.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 249,
	                                    "width": 1356,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "blister_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/LjmYmbtbeGjmjj60-blister_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/5iNWz_xPCNXuKb8P.png",
	                                    "originalUrl": "blister_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljguu3fa0034356weab70y9w",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljgutxdh0031356wxvu9w7e8",
	                                "heading": "<p><strong>Grietas</strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Las <b>grietas,</b> también conocidas como fisuras, son pequeñas aberturas dolorosas en la piel. Pueden afectar diversas partes del cuerpo, como las manos, los pies, los talones o los labios. Las grietas pueden ser causadas por sequedad, clima frío, lavado frecuente de manos, exposición a productos químicos agresivos, deshidratación y ciertas condiciones médicas como el eczema o la psoriasis.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgutu2r002y356w0cf706tj",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "36.49099576271186",
	                                "y": "21",
	                                "id": "clkqqee0z000e3575fsn41hwn",
	                                "icon": "01",
	                                "title": "Para tratar la <strong>piel agrietada,</strong> sigue estos consejos:",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<ul><li><span style=\"font-size: 20px;\"><b>Mantén el área limpia.</b></span></li><li><span style=\"font-size: 20px;\"><b>Usa emolientes para hidratar la piel.</b></span></li><li><span style=\"font-size: 20px;\"><b>Cubre la piel con un apósito suave</b> para mantener la crema en su lugar y protegerla.</span></li><li><span style=\"font-size: 20px;\">Asegura el apósito con una venda elástica o fijación de vendaje, especialmente en manos y pies.</span></li></ul><p><span style=\"font-size: 20px;\">Cuándo buscar <strong>asesoramiento médico:</strong></span></p><p><span style=\"font-size: 20px;\"><br></span></p><p><span style=\"font-size: 20px;\"><b>Recomienda consultar a un profesional de la salud</b> si hay dolor intenso, enrojecimiento o signos de infección. ¡Cuida bien de tu piel!</span></p>"
	                            },
	                            {
	                                "x": "47.55985169491525",
	                                "y": "69.734375",
	                                "id": "clk81z2mk000435756c5jkxi5",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/OJAd5Na7Iw4YTci2-leukoplast-soft-compress-ecom-packshot-f-7999502-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "PHl6n0QXy1Ulgu7K_oiQuiwRtfRa2tKOG.png",
	                                        "originalUrl": "leukoplast-soft-compress-ecom-packshot-f-7999502-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukomed<sup>®</sup> T plus",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas.</span></p><p><span style=\"font-size: 20px;\">Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                            },
	                            {
	                                "x": "66.87552966101696",
	                                "y": "75.4",
	                                "id": "clmevqmq9000t3579nuqtoqqz",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/h2utjaIrRIoKisEk-leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "TmjV0NpQedsqtZJs_MYlrCmpTBcwFwcx4.png",
	                                        "trackingId": "cljgutu2r002y356w0cf706tj",
	                                        "originalUrl": "leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "useCrushedKey": true,
	                                        "trackingContext": "block:labeled-graphic"
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> Stretch",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Gasa adhesiva para la fijación segura de apósitos, catéteres, cánulas, sondas, tubos, dispositivos de medición y otros instrumentos.</span></p><p><span style=\"font-size: 20px;\">Garantiza fijación incluso sobre los contornos del cuerpo y articulaciones móviles hasta por 7 días, es 10 veces más elástico y brinda una mejor transpirabilidad permitiendo que la piel respire y así reducir riesgos de infección.</span></p>",
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "35AIKE7a9-GsUG9d_-BnCPyBsFxot8CfS.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/-BnCPyBsFxot8CfS.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 193,
	                                    "width": 1475,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "crack_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/UYcbATpR7B4S1OWp-crack_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/978SXgB9Y7jewrWu.png",
	                                    "originalUrl": "crack_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgw5gp1004z356w8bhzbacx",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljgw5btr004w356wnrjlkj52",
	                                "heading": "<p><strong><strong>Cortes</strong></strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Los <b>cortes</b> son rupturas o aberturas en la piel causadas por un objeto afilado o un traumatismo. Los cortes pueden variar en tamaño, forma y profundidad. Algunos cortes pueden provocar un sangrado mínimo, mientras que otros pueden causar un sangrado significativo, según los vasos sanguíneos involucrados.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgw58f5004t356w98tmmxaj",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "25.64766920487539",
	                                "y": "19.091314663940786",
	                                "id": "clkqrbiwm000x3575skf8g3tw",
	                                "icon": "01",
	                                "title": "Cuando se trata de <b>buscar asesoramiento médico</b>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Se recomienda visitar a un profesional de la salud si: </span></p><ul><li><span style=\"font-size: 20px;\">La herida está en la cara, especialmente cerca de los ojos.</span></li><li><span style=\"font-size: 20px;\">La herida no deja de sangrar.</span></li><li><span style=\"font-size: 20px;\">La herida muestra signos de infección.</span></li></ul><p><span style=\"font-size: 20px;\">Es importante cuidar bien de las heridas y buscar atención médica cuando sea necesario.</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                
	                                "x": "51.87985946986886",
	                                "y": "76.15705299003552",
	                                "id": "cljgw549e004o356wx3181ghh",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/QRDdeZKxOM_fLNMa-leukoplast-elastic-ecom-packshot-f-7321923-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "GANFwpLtkeGOROTE_-BwWeIps7nyRF9K_.png",
	                                        "originalUrl": "leukoplast-elastic-ecom-packshot-f-7321923-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Profesional Elásticas",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores permitiendo la movilidad por ser flexibles. <br>Son autoadhesivas, elásticas, de color piel en formas surtidas para diferentes tipos de heridas.</span></p>"
	                            },
	                            {
	                                "x": "42.025045033985045",
	                                "y": "76.48217287679171",
	                                "id": "clk9nkncn000f3575g5augp06",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/f6VI6yxZVIKLMyFV-leukoplast-aqua-pro-ecom-packshot-f-7322114-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "9CKIHLUpd_1bQFAz_LvxAS_Klk8KcsCky.png",
	                                        "originalUrl": "leukoplast-aqua-pro-ecom-packshot-f-7322114-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Aqua Pro",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Curas transparentes, impermeables, surtidas y casi invisibles. Ideales para proteger heridas menores del agua, la suciedad y las bacterias. Son transpirables, cómodas y flexibles. Cuentan con una almohadilla central absorbente de baja adherencia.</span></p>"
	                            },
	                            {
	                                "x": "60.88083125711016",
	                                "y": "75.40991331281174",
	                                "id": "clkghvtkr000535752f1tev2b",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/jeHtT4_2-KuGPLoR-leukoplast-absorbent-plus-ecom-packshot-f-7995205-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "1DQ_DJoFgNWQaHji_EKxcBjY0QOtKDmXL.png",
	                                        "originalUrl": "leukoplast-absorbent-plus-ecom-packshot-f-7995205-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Eco",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Curas fabricadas con un tejido de bambú blanco que cuida tu piel. Se han producido de manera sostenible con al menos un 90 % de materiales naturales y renovables que se han usado tanto en el producto como en el embalaje. Estas curas suaves y altamente absorbentes son cómodas y se adhieren perfectamente.</span></p>"
	                            },
	                            {
	                                
	                                "x": "80.26835454494827",
	                                "y": "70",
	                                "id": "cljgw549e004p356w3yfd1i2b",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/NPTw3UcRkm7B1jxj-leukoplast-barrier-ecom-packshot-f-7321605-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "UEHU31hdwKi_bdQE_P8OTCN92ArH8FYK4.png",
	                                        "originalUrl": "leukoplast-barrier-ecom-packshot-f-7321605-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Profesional Estándar",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores. Son plásticas, autoadhesivas, de color piel y resistentes al agua. Ayudan a prevenir la infección en las heridas, son altamente adaptables y flexibles, además fáciles de remover.</span></p>"
	                            },
	                            {
	                                "x": "91.26835454494827",
	                                "y": "72.8558689662174",
	                                "id": "cljgw549e004p356w3yfd1i2v",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/NPTw3UcRkm7B1jxj-05LeukoplastKidsHeroEdition.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "05LeukoplastKidsHeroEdition.png",
	                                        "originalUrl": "05LeukoplastKidsHeroEdition.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Kids Hero Edition",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores. Son autoadhesivas, resistentes al agua, de buena adherencia y amigables con la piel. Están recubiertas por adhesivo transparente libre de látex, impreso de figuras (Batman, Mujer Maravilla y Superman)</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "7lqNCL8QrXvsT7nQ_9YG21Mszn5zvpb5f.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/9YG21Mszn5zvpb5f.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 276,
	                                    "width": 1380,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "cut_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/iewT5om9bGlYgahl-cut_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/0LOEP3b6Cm1PJB0J.png",
	                                    "originalUrl": "cut_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgwvzzy0065356wunlbugnq",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljgwvvir0062356wd2l237ci",
	                                "heading": "<p><strong>Dermatitis de contacto</strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">La <b>dermatitis de contacto</b> ocurre cuando la piel se pone roja, dolorida o inflamada después del contacto con una sustancia irritante.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgwx6he006d356wwqrlw6ma",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "22.91942998656816",
	                                "y": "18",
	                                "id": "clkqzh36s001d3575p019xgga",
	                                "icon": "01",
	                                "title": "Para tratar la <b>dermatitis de contacto,</b> sigue estos pasos:",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<ul><li><span style=\"font-size: 20px;\"><b>Evita el desencadenante</b> que provocó la reacción.</span></li><li><span style=\"font-size: 20px;\"><b>Limpia suavemente el área afectada</b> con agua tibia y jabón para eliminar cualquier rastro del irritante.</span></li><li><span style=\"font-size: 20px;\"><b>Hidrata la piel</b> aplicando una crema humectante.</span></li></ul><p><span style=\"font-size: 20px;\">En cuanto a <b>cuándo buscar asesoramiento médico,</b> se recomienda visitar a un profesional de la salud si los síntomas persisten.</span></p>"
	                            },
	                            {
	                                
	                                "x": "68.55067249811889",
	                                "y": "74.709375",
	                                "id": "clmew7i5n001s3579rhk9folt",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/4irTd72a48ttYjKL-leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "Xuq4AyixPqNuOd2g_aznvND6bqlaT27HX.png",
	                                        "trackingId": "cljgwx6he006d356wwqrlw6ma",
	                                        "originalUrl": "leukoplast-hypafix-dressing-fixation-ecom-packshot-f-7994903-EN.png",
	                                        "useCrushedKey": true,
	                                        "trackingContext": "block:labeled-graphic"
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> Stretch",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Gasa adhesiva para la fijación segura de apósitos, catéteres, cánulas, sondas, tubos, dispositivos de medición y otros instrumentos.</span></p><p><span style=\"font-size: 20px;\">Garantiza fijación incluso sobre los contornos del cuerpo y articulaciones móviles hasta por 7 días, es 10 veces más elástico y brinda una mejor transpirabilidad permitiendo que la piel respire y así reducir riesgos de infección.</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "50.32084744168548",
	                                "y": "74.6",
	                                "id": "cljgwx0hq0067356w667qwigg",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/kpIw9qO-uK1657ue-Tube%2520bandage.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "HXPZUfeiVYk2nH4I_AUSpamDDyN4o63Cy.png",
	                                        "originalUrl": "Tube bandage.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> Transparent",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Película transparente e impermeable para fijación de apósitos, catéteres, cánulas, sondas, tubos, dispositivos de medición y otros instrumentos.</span></p><p><span style=\"font-size: 20px;\">Garantiza fijación e inspección incluso sobre los contornos del cuerpo y articulaciones móviles hasta por 7 días, es 10 veces más elástico y brinda una mejor transpirabilidad permitiendo que la piel respire y así reducir riesgos de infección.</span></p>"
	                            },
	                            {
	                                "x": "87.55067249811889",
	                                "y": "74.709375",
	                                "id": "cljgwx0hq0067356w667qwig5",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/kpIw9qO-06LeukoplastFixomullskinsensitive.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "06LeukoplastFixomullskinsensitive.png",
	                                        "originalUrl": "06LeukoplastFixomullskinsensitive.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Fixomull<sup>®</sup> / Hypafix<sup>®</sup> skin sensitive",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Fixomull<sup>®</sup> skin sensitive es un producto de fijación para áreas amplias del cuerpo con adhesivo de silicona, diseñado para fijar apósitos y dispositivos médicos en piel frágil o sensible. Permite el reposicionamiento y tienen un retiro atraumático.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "JeijF0-yJGILctMT_2XxVIfW_MBnf1Jj4.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/2XxVIfW_MBnf1Jj4.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 252,
	                                    "width": 1329,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "dermatitis_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/_-c44Bjr04xG3hp_-dermatitis_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/MqSbzrqTn_JVjdvb.png",
	                                    "originalUrl": "dermatitis_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgzft09007m356w3ci4ugqo",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljgzfoff007j356w2eio7oxe",
	                                "heading": "<p><strong><strong>Quemaduras leves o menores</strong></strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Las <b>quemaduras leves o menores,</b> también conocidas como quemaduras de primer grado, son quemaduras superficiales que solo afectan la capa más externa de la piel. Por lo general, resultan de un contacto breve con objetos calientes, líquidos calientes, vapor o exposición al sol. Estas quemaduras suelen causar dolor, enrojecimiento y pequeñas ampollas.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljgzfhkk007g356wwr3203q9",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "27.176109855877144",
	                                "y": "23.200000000000003",
	                                "id": "clkqqn9k0000i3575jz0l6cmy",
	                                "icon": "01",
	                                "title": "Cuando se trata de <b>buscar asesoramiento médico</b>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Se recomienda visitar a un profesional de la salud si:<br></span></p><ul><li><span style=\"font-size: 20px;\">La quemadura es más grande que la mano de la persona.</span></li><li><span style=\"font-size: 20px;\">La quemadura está en un área sensible.</span></li><li><span style=\"font-size: 20px;\">La persona está embarazada, es un niño o una persona mayor.</span></li><li><span style=\"font-size: 20px;\">La persona sufre un shock.</span></li><li><span style=\"font-size: 20px;\">La quemadura fue causada por productos químicos, electricidad o radiactividad.</span></li></ul><p><span style=\"font-size: 20px;\">Es importante buscar atención médica adecuada según la gravedad y las circunstancias de la quemadura.</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "48.26425023099277",
	                                "y": "69.3833402706526",
	                                "id": "cljgzyqp60081356wh6sxwnxe",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/cOfcebwBoNYpvWMO-leukoplast-cuticell-contact-silicone-2.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "UekoamXuDWFjyjhn_plh699HxgIn-X2mM.png",
	                                        "originalUrl": "leukoplast-cuticell-contact-silicone-2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Leukomed<sup>®</sup> Sorbact<sup>®</sup>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Es un apósito adhesivo estéril indicada para heridas post quirúrgicas en riesgo de infección o infectadas, gracias a su tecnología Sorbact atrae y retiene las bacterias mediante un método de acción puramente físico.</span></p>"
	                            },
	                            {
	                                "x": "60.373489628877465",
	                                "y": "67.52176863380582",
	                                "id": "cljgzfe63007b356wtzbsr73h",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/aANR_lEHRgQ41N-b-leukoplast_leukomed%2520tplus%2520waterproof_ecom%2520packshot_f_7995405_EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "Jj1zccdtm_tRbNY1_f5512KfpvaP4DLgR.png",
	                                        "originalUrl": "leukoplast_leukomed tplus waterproof_ecom packshot_f_7995405_EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukomed<sup>®</sup> T plus",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas.</span></p><p><span style=\"font-size: 20px;\">Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                            },
	                            {
	                                "x": "79.23036167695393",
	                                "y": "67.67405447555926",
	                                "id": "cljgzfe63007c356wnmgopox7",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/aL46wmS-tadEHteS-Leukomed%2520sorbact%2520infection%2520control.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "ndob-gd5vtQGlJsb_vWorFUK9Fs9kAUDt.png",
	                                        "originalUrl": "Leukomed sorbact infection control.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Cuticell<sup>®</sup>",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito estéril de baja adherencia impregnado con ungüento de Eucerit<sup>®</sup>. Ideal para promover la cicatrización, indicado para quemaduras de primer y segundo grado.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "i1xWyjN3132xCCW4_tGMj5QDzegJ8XAqd.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/tGMj5QDzegJ8XAqd.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 319,
	                                    "width": 1253,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "burn_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/osyRClCT2aA6XHVd-burn_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/TMVQOM_GIoCiZM84.png",
	                                    "originalUrl": "burn_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljh03y0i00al356w5ydmferc",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljh03t9j00ai356wrgolnfrf",
	                                "heading": "<p><strong>Laceraciones</strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Las <b>laceraciones</b> son heridas causadas por desgarros o por una fuerza contundente de corta duración. Una laceración es una herida irregular distinta de un corte limpio (una herida incisa).</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljh03q7y00af356wclyifxh2",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "39.91550748112352",
	                                "y": "20",
	                                "id": "clkqrgfi300133575up1i3dhb",
	                                "icon": "01",
	                                "title": "Cuando se trata de <b>buscar asesoramiento médico</b>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Se recomienda visitar a un profesional de la salud si:</span></p><ul><li><span style=\"font-size: 20px;\">La herida muestra signos de infección.</span></li><li><span style=\"font-size: 20px;\">La herida sigue sangrando.</span></li><li><span style=\"font-size: 20px;\">La herida tiene suciedad, vidrio, una espina u otro cuerpo extraño.</span></li><li><span style=\"font-size: 20px;\">La herida parece grande o profunda.</span></li><li><span style=\"font-size: 20px;\">La herida no está sanando.</span></li><li><span style=\"font-size: 20px;\">La persona tiene otra lesión o golpe en la cabeza en el momento de la herida.</span></li></ul><p><span style=\"font-size: 20px;\">Es importante buscar atención médica adecuada según la gravedad y las circunstancias de la herida.</span></p>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "76.26942195564826",
	                                "y": "72.2",
	                                "id": "cljh03mt600ab356w2zoeckdn",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/p0batrv2gpcsdHKF-Leukosan%2520Strip.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "MbYMH1Mr54O1snb9_jW6LFp1Ir6UFqKPl.png",
	                                        "originalUrl": "Leukosan Strip.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Leukomed<sup>®</sup>",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Leukoplast<sup>®</sup> Leukomed<sup>®</sup> es una gasa blanca adhesiva estéril con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas. No se adhiere a la herida, permite que la herida respire, tiene una buena capacidad de absorción y adhesión, también es amigable con la piel.</span></p>"
	                            },
	                            {
	                                "x": "57.941539698902545",
	                                "y": "81.50972290039063",
	                                "id": "cljh0ga5100ao356wc4pmjjn9",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/WXPQc_3rChQMM89l-leukoplast_leukomed%2520tplus%2520waterproof_ecom%2520packshot_f_7995405_EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "I7Qic07Mc6AIXLUF_Vm_Po_gSScylFnag.png",
	                                        "originalUrl": "leukoplast_leukomed tplus waterproof_ecom packshot_f_7995405_EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukomed<sup>®</sup> T plus",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas. Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "a30HUDT_YoWoZCSD_dEyNb7_pxluc9-2J.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/dEyNb7_pxluc9-2J.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 284,
	                                    "width": 1223,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "laceration_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/iKAP9xNEHjIyGDM3-laceration_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/W5_tXsupKz7VKvuE.png",
	                                    "originalUrl": "laceration_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljh03f7w00a9356wbdud2wiu",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljh03dkd00a8356wzr3i9iu2",
	                                "heading": "<p><strong><strong><strong>Rasguños</strong></strong></strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Los <b>rasguños</b> son lesiones leves que ocurren cuando un objeto afilado, como una uña o una espina, raspa la piel.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljh03aso00a2356wypmbm0on",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "44.530799351825614",
	                                "y": "18.6",
	                                "id": "clkqrl75r001735757jbxq9bz",
	                                "icon": "01",
	                                "title": "Cuando se trata de <b>buscar asesoramiento médico</b>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Se recomienda visitar a un profesional de la salud si:</span></p><ul><li><span style=\"font-size: 20px;\">La herida está en la cara, especialmente cerca de los ojos.</span></li><li><span style=\"font-size: 20px;\">La herida está contaminada con suciedad.</span></li><li><span style=\"font-size: 20px;\">La herida muestra signos de infección.</span></li></ul>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "65.55099935317493",
	                                "y": "71.51944580078124",
	                                "id": "cljh03aso00a4356wuj9y83yf",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/LVHZZlSH3XmeBA_U-leukoplast-elastic-ecom-packshot-f-7321902-EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "gq724RQkaUDNeXz__8h-nK-5kGOq-QJVQ.png",
	                                        "originalUrl": "leukoplast-elastic-ecom-packshot-f-7321902-EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Profesional Elásticas",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Protegen y cubren heridas menores permitiendo la movilidad por ser flexibles. <br>Son autoadhesivas, elásticas, de color piel y vienen en formas surtidas para diferentes tipos de heridas.</span></p>"
	                            },
	                            {
	                                "x": "80.55099935317493",
	                                "y": "71.51944580078124",
	                                "id": "cljh03aso00a4356wuj9y83yg",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/LVHZZlSH3XmeBA_07LeukoplastEco.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "07LeukoplastEco.png",
	                                        "originalUrl": "07LeukoplastEco.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Eco",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Curas fabricadas con un tejido de bambú blanco que cuida tu piel. Se han producido de manera sostenible con al menos un 90 % de materiales naturales y renovables que se han usado tanto en el producto como en el embalaje. Estas curas suaves y altamente absorbentes son cómodas y se adhieren perfectamente.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "RznRvjRJreBXPdQc_HeRE-uReEvFYJSHd.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/HeRE-uReEvFYJSHd.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 365,
	                                    "width": 1158,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "scratch_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/RbRAI-lAnygYPEJD-scratch_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/s77R7xMOv42x1Bav.png",
	                                    "originalUrl": "scratch_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljh1i8vp00cs356wwvn6doh9",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cljh1i4ht00cp356wmspp7dib",
	                                "heading": "<p><strong>Heridas quirúrgicas</strong></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Estas son incisiones realizadas en la piel por el cirujano durante una operación. Al final de la operación, los márgenes de la incisión se unen para que la herida pueda sanar.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljh1jde100d5356wcwv9rvfz",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "32.301098230934926",
	                                "y": "20.599999999999998",
	                                "id": "clkqzlun3001p35750fwvf64i",
	                                "icon": "01",
	                                "title": "Cuando se trata de <b>buscar asesoramiento médico</b>",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Se debe buscar <b>asesoramiento médico</b> de un profesional de la salud si:</span></p><ul><li><span style=\"font-size: 20px;\">La herida muestra signos de infección.</span></li><li><span style=\"font-size: 20px;\">La temperatura corporal está por encima de 37.5&deg;C.</span></li></ul>",
	                                "isNewlyInserted": true
	                            },
	                            {
	                                "x": "71.73233444361057",
	                                "y": "65",
	                                "id": "cljh1j8ht00cy356wx4grgkwu",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/R7x77Gct61ZF24ER-Leukomed%2520sorbact%2520infection%2520control.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "AvDKmAiG0rhm9yEM_mdxXCsp3QNUAS4Hv.png",
	                                        "originalUrl": "Leukomed sorbact infection control.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukoplast<sup>®</sup> Leukomed<sup>®</sup> Sorbact<sup>®</sup>",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Es un apósito adhesivo estéril indicado para heridas post quirúrgicas en riesgo de infección o infectadas, gracias a su tecnología Sorbact atrae y retiene las bacterias mediante un método de acción puramente físico.</span></p>"
	                            },
	                            {
	                                
	                                "x": "53.98325212975407",
	                                "y": "64.50972290039061",
	                                "id": "cljh1j8ht00cz356wtaql2kdg",
	                                "icon": "01",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/WXPQc_3rChQMM89l-leukoplast_leukomed%2520tplus%2520waterproof_ecom%2520packshot_f_7995405_EN.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "I7Qic07Mc6AIXLUF_Vm_Po_gSScylFnag.png",
	                                        "originalUrl": "leukoplast_leukomed tplus waterproof_ecom packshot_f_7995405_EN.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "Leukomed<sup>®</sup> T plus",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas. Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "5ugpnS8qn1vW5AlN_LGPWfvEL7qq-eDjs.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/LGPWfvEL7qq-eDjs.png",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 352,
	                                    "width": 1215,
	                                    "height": 500,
	                                    "originalWidth": 1920,
	                                    "originalHeight": 500
	                                },
	                                "originalUrl": "surgical2_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Hf54JTMmb_njQY-M-surgical2_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/_nHzpElu8L43ICCi.png",
	                                    "originalUrl": "surgical2_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj2ou2v100aj356wxm86nabi",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clj2ou2v200an356wnrmj40ej",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/vO0Cp17TgddKS2zO.jpg",
	                                        "type": "image",
	                                        "isSquare": false,
	                                        "crushedKey": "fucqjGOME-ViFcSX_vO0Cp17TgddKS2zO.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 44,
	                                            "left": 0,
	                                            "width": 1395,
	                                            "height": 688,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1120
	                                        },
	                                        "originalUrl": "Leukoplast-Wound-Advisor-Bites-Treatment-Lifestyle2.png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/YBjQ9DIj1iuAPReM-Leukoplast-Wound-Advisor-Bites-Treatment-Lifestyle2.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/LhOhzpWdGiFMYCc-.jpg",
	                                            "originalUrl": "Leukoplast-Wound-Advisor-Bites-Treatment-Lifestyle2.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p>Aunque la mayoría de las heridas menores se pueden tratar en casa, ciertos tipos de heridas requieren la evaluación de un profesional médico.</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.5,
	                            "cardMode": null,
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljbanxgj013l10djh5kv5rt7",
	                        "type": "knowledgeCheck",
	                        "items":
	                        [
	                            {
	                                "id": "cl31t7bpl0004396u8s3zbk23",
	                                "type": "MULTIPLE_RESPONSE",
	                                "media":
	                                {
	                                    "tmp":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/4ArnJDyXpx-DKYJy.jpg",
	                                            "type": "image",
	                                            "align": "left",
	                                            "isSquare": false,
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/4ArnJDyXpx-DKYJy.jpg",
	                                            "dimensions":
	                                            {
	                                                "top": 165,
	                                                "left": 0,
	                                                "width": 1680,
	                                                "height": 955,
	                                                "originalWidth": 1680,
	                                                "originalHeight": 1120
	                                            },
	                                            "originalUrl": "Skin Health - CGR and relative holding hands.png",
	                                            "originalImage":
	                                            {
	                                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Hm1z66NrD1H9b6KR-Skin%2520Health%2520-%2520CGR%2520and%2520relative%2520holding%2520hands.png",
	                                                "type": "image",
	                                                "align": "left",
	                                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/bAJVjrQV8NAvTON4.jpg",
	                                                "originalUrl": "Skin Health - CGR and relative holding hands.png",
	                                                "useCrushedKey": true
	                                            },
	                                            "useCrushedKey": true
	                                        }
	                                    }
	                                },
	                                "title": "<p><span style=\"font-size: 24px;\">¿Puedes identificar cuáles de estas heridas deben ser evaluadas por un profesional médico?</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas a continuación:</span></p>",
	                                "answers":
	                                [
	                                    {
	                                        "id": "ckoq2c9jk00133c5jgdnbqqub",
	                                        "title": "<p><span style=\"font-size: 22px;\">Heridas de punción, especialmente aquellas que involucran objetos extraños.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "ckoq2c9jk00123c5jalf7gv0a",
	                                        "title": "<p><span style=\"font-size: 22px;\">Arañazos o mordeduras de animales.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cl0az4eyb000g396fkmjkvvei",
	                                        "title": "<p><span style=\"font-size: 22px;\">Quemaduras extensas.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cl5v606h80008356q31x06luq",
	                                        "title": "<p><span style=\"font-size: 22px;\">Quemaduras menores.</span></p>",
	                                        "correct": false
	                                    },
	                                    {
	                                        "id": "cl5v60qij0009356qfn2xtvcl",
	                                        "title": "<p><span style=\"font-size: 22px;\">Heridas que sangran profusamente.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cljbasw34004h356wb2j296ch",
	                                        "title": "<p><span style=\"font-size: 22px;\">Heridas crónicas.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cljbatfhb0058356wn1ad5ybr",
	                                        "title": "<p><span style=\"font-size: 22px;\">Heridas infectadas.</span></p>",
	                                        "correct": true
	                                    }
	                                ],
	                                "feedback": "",
	                                "feedbackType": "CORRECT_INCORRECT",
	                                "feedbackCorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Correcto. Heridas punzantes, especialmente aquellas que involucran objetos extraños; rasguños o mordeduras de animales; quemaduras extensas; Las heridas sangrantes, infectadas y crónicas requieren una evaluación por parte de un profesional médico.</span></p>",
	                                "feedbackIncorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Esto no está del todo bien. Heridas punzantes, especialmente aquellas que involucran objetos extraños; rasguños o mordeduras de animales; quemaduras extensas; Las heridas sangrantes, infectadas y crónicas requieren una evaluación por parte de un profesional médico.</span></p>"
	                            }
	                        ],
	                        "family": "knowledgeCheck",
	                        "variant": "multiple choice",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj493mmp0072356wdebna7zx",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clj493mmq0073356w7sshraw2",
	                                "heading": "<p><span style=\"color: rgb(255, 255, 255);\">Práctica</span></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">¿Qué productos recomendarías en los siguientes casos? Haz clic en la respuesta que creas que es la más adecuada. Recibirás retroalimentación directa.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#9CA9B1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj48xojo006c356wrlt8rob3",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clj48xlay006a356wqmc018gh",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "alt": "",
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/TthgaehFTn0tOIv3.jpg",
	                                        "type": "image",
	                                        "isSquare": true,
	                                        "crushedKey": "3GHANHsVyhTYGJ8i_TthgaehFTn0tOIv3.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 0,
	                                            "left": 190,
	                                            "width": 1120,
	                                            "height": 1120,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1120
	                                        },
	                                        "originalUrl": "Leukoplast-Wound-Advisor-Lacerations-Close-Up-Lifestyle.png",
	                                        "originalImage":
	                                        {
	                                            "alt": "",
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/d8ZeLdy256rAJBSR-Leukoplast-Wound-Advisor-Lacerations-Close-Up-Lifestyle.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/uUeuIAXb5kSBNEfb.jpg",
	                                            "originalUrl": "Leukoplast-Wound-Advisor-Lacerations-Close-Up-Lifestyle.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "",
	                                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Una laceración en la ceja:</strong></span></p><p><span style=\"font-size: 24px;\">Una madre está buscando un apósito para la herida de su hijo. Durante un partido de fútbol, él y otro jugador chocaron, lo que resultó en una laceración en su ceja. El sangrado se ha detenido, pero la herida es bastante profunda. Debido a la ubicación, un apósito grande no es apropiado, pero se necesita un apósito que soporte los bordes de la herida para cerrarla.</span></p>"
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text aside",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.5,
	                            "cardMode": null,
	                            "imageSize": "small",
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "zoomOnClick": false,
	                            "opacityColor": "#000000",
	                            "imagePosition": "right",
	                            "paddingBottom": 2,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cljbamwnk0036356wyda82puv",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "cljbamwnk0037356wl1q345v6",
	                                "back":
	                                {
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "assets/rise/assets/block-defaults/mountains.jpg",
	                                            "src": "Wgu_NGOc7000QQbh_mountains.jpg",
	                                            "type": "image",
	                                            "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
	                                            "originalUrl": "mountains.jpg"
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 18px;\"><strong>Incorrecto</strong>. Leukomed<sup>®</sup> T plus es un Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas. Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                                },
	                                "front":
	                                {
	                                    "type": "fullimage",
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/edU9XRXCve7XAfre-leukoplast_leukomed%2520tplus%2520waterproof_ecom%2520packshot_f_7995405_EN.png",
	                                            "type": "image",
	                                            "crushedKey": "NseiqmvKeHCkO1hn_KGy1BvRCkzmZCQJR.png",
	                                            "originalUrl": "leukoplast_leukomed tplus waterproof_ecom packshot_f_7995405_EN.png",
	                                            "useCrushedKey": true
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 20px;\">Leukomed<sup>®</sup> T plus</span></p>"
	                                }
	                            },
	                            {
	                                "id": "cljbamwnk0038356wkjgfwcdu",
	                                "back":
	                                {
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "assets/rise/assets/block-defaults/mountains.jpg",
	                                            "src": "Wgu_NGOc7000QQbh_mountains.jpg",
	                                            "type": "image",
	                                            "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
	                                            "originalUrl": "mountains.jpg"
	                                        }
	                                    },
	                                    "description": "<p><strong><span style=\"font-size: 18px;\">¡Correcto!&nbsp;</span></strong><span style=\"font-size: 18px;\">Leukoplast<sup>®</sup> Eco esta fabricadas con un tejido de bambú blanco que cuida tu piel. Se han producido de manera sostenible con al menos un 90 % de materiales naturales y renovables que se han usado tanto en el producto como en el embalaje. Estas curas suaves y altamente absorbentes son cómodas y se adhieren perfectamente.</span></p>"
	                                },
	                                "front":
	                                {
	                                    "type": "fullimage",
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/L-jMInZ2wehliK4k-Leukosan%2520Strip.png",
	                                            "type": "image",
	                                            "crushedKey": "3m-qu84wuvgSgwE0_snuoTMYpVZVPM0ip.png",
	                                            "originalUrl": "Leukosan Strip.png",
	                                            "useCrushedKey": true
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 20px;\">Leukoplast<sup>®</sup> Eco</span></p>"
	                                }
	                            },
	                            {
	                                "id": "cljbamwnk0039356ww4y888el",
	                                "back":
	                                {
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "assets/rise/assets/block-defaults/mountains.jpg",
	                                            "src": "Wgu_NGOc7000QQbh_mountains.jpg",
	                                            "type": "image",
	                                            "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
	                                            "originalUrl": "mountains.jpg"
	                                        }
	                                    },
	                                    "description": "<p style=\"text-align: left;\"><strong><span style=\"font-size: 18px;\">Incorrecto</span></strong><span style=\"font-size: 18px;\">. Leukoplast<sup>®</sup> Esparadrapo de tela es indicado para dar soporte y fijación de apósitos y vendajes. Tiene una fijación fuerte y confiable, es de alta resistencia, fácil rasgado y adaptable.</span></p>"
	                                },
	                                "front":
	                                {
	                                    "type": "fullimage",
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/lKv75AqRHfI-PnpO-leukoplast-skin-sensitive-productshot.png",
	                                            "type": "image",
	                                            "crushedKey": "MKuk5y1tBSqCu_aR_caZ2Rg_X83cXYcHM.png",
	                                            "originalUrl": "leukoplast-skin-sensitive-productshot.png",
	                                            "useCrushedKey": true
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 20px;\">Leukoplast<sup>®</sup> Esparadrapo</span></p>"
	                                }
	                            }
	                        ],
	                        "family": "flashcard",
	                        "variant": "flashcard",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj4as5du000w356rp73jqpfj",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clj4as1yv000v356r7j3xf9xf",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/w8y4Ga4UUtRpOeEv.jpg",
	                                        "type": "image",
	                                        "isSquare": true,
	                                        "crushedKey": "5Jfptr5KbChOIm4i_w8y4Ga4UUtRpOeEv.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 166,
	                                            "left": 249,
	                                            "width": 1073,
	                                            "height": 1073,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1680
	                                        },
	                                        "originalUrl": "Leukoplast_Leukomed-t-plus_Skin_Sensitive_Lifestyle_Pharmacy (1).png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/VvN1sq_0o6Y0sJVy-Leukoplast_Leukomed-t-plus_Skin_Sensitive_Lifestyle_Pharmacy%2520(1).png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/llIG7_-GVoEgBya2.jpg",
	                                            "originalUrl": "Leukoplast_Leukomed-t-plus_Skin_Sensitive_Lifestyle_Pharmacy (1).png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "",
	                                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Herida post-biopsia</strong></span></p><p><span style=\"font-size: 24px;\">Una <b>herida posterior a la biopsia</b> es aquella que se produce después de un procedimiento de biopsia quirúrgica. En este caso, una persona fue enviada a casa después de una curación con un apósito que se desprendió poco después. Ahora, esta persona busca un producto que proteja la herida y le permita retomar sus actividades diarias, incluyendo ducharse.</span></p>"
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text aside",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.5,
	                            "cardMode": null,
	                            "imageSize": "small",
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "zoomOnClick": false,
	                            "opacityColor": "#000000",
	                            "imagePosition": "left",
	                            "paddingBottom": 2,
	                            "backgroundType": null,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj4as9030011356rc1yvvzmk",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "clj4as7o1000z356r9ce7z2jj",
	                                "back":
	                                {
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "assets/rise/assets/block-defaults/mountains.jpg",
	                                            "src": "Wgu_NGOc7000QQbh_mountains.jpg",
	                                            "type": "image",
	                                            "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
	                                            "originalUrl": "mountains.jpg"
	                                        }
	                                    },
	                                    "description": "<p><strong><span style=\"font-size: 18px;\">Incorrecto. </span></strong><span style=\"font-size: 18px;\">Leukoplast<sup>®</sup> Aqua Pro, Curas impermeables, transparentes y casi invisibles. Ideales para proteger heridas menores del agua, la suciedad y las bacterias. Son transpirables, cómodas y flexibles. Cuentan con una almohadilla central absorbente de baja adherencia.</span></p>"
	                                },
	                                "front":
	                                {
	                                    "type": "fullimage",
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/iZLyCH0tplyQ-cTd-Leukosan%2520Strip.png",
	                                            "type": "image",
	                                            "crushedKey": "CF3niVPBiLkXQiA9_2cj0X9JTUrd6Ms84.png",
	                                            "originalUrl": "Leukosan Strip.png",
	                                            "useCrushedKey": true
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 20px;\">Leukoplast<sup>®</sup> Aqua Pro</span></p>"
	                                }
	                            },
	                            {
	                                "id": "clj4as7o10010356r826rx4rw",
	                                "back":
	                                {
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "assets/rise/assets/block-defaults/mountains.jpg",
	                                            "src": "Wgu_NGOc7000QQbh_mountains.jpg",
	                                            "type": "image",
	                                            "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
	                                            "originalUrl": "mountains.jpg"
	                                        }
	                                    },
	                                    "description": "<p><strong><span style=\"font-size: 18px;\">Incorrecto. </span></strong><span style=\"font-size: 18px;\">Leukoplast<sup>®</sup> Eco es fabricada con un tejido de bambú blanco que cuida tu piel. Se han producido de manera sostenible con al menos un 90 % de materiales naturales y renovables que se han usado tanto en el producto como en el embalaje. Estas curas suaves y altamente absorbentes son cómodas y se adhieren perfectamente.</span></p>"
	                                },
	                                "front":
	                                {
	                                    "type": "fullimage",
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/LnsPhp88cvE1ZEXH.png",
	                                            "type": "image",
	                                            "isSquare": true,
	                                            "crushedKey": "vD2Bh0tJtyhsQopj_LnsPhp88cvE1ZEXH.png",
	                                            "dimensions":
	                                            {
	                                                "top": 0,
	                                                "left": 8,
	                                                "width": 986,
	                                                "height": 985,
	                                                "originalWidth": 1000,
	                                                "originalHeight": 1000
	                                            },
	                                            "originalUrl": "Leukoplast-Elastic-B2C-Website-Packshot-Front-1000x1000px.png",
	                                            "originalImage":
	                                            {
	                                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/gQrsZKID9o4Yd5W3-Leukoplast-Elastic-B2C-Website-Packshot-Front-1000x1000px.png",
	                                                "type": "image",
	                                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/lhI1wrpRPs-bi7v2.png",
	                                                "originalUrl": "Leukoplast-Elastic-B2C-Website-Packshot-Front-1000x1000px.png",
	                                                "useCrushedKey": true
	                                            },
	                                            "useCrushedKey": true
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 20px;\">Leukoplast<sup>®</sup> Eco</span></p>"
	                                }
	                            },
	                            {
	                                "id": "clj4as7o1000y356rr82wj9h2",
	                                "back":
	                                {
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "assets/rise/assets/block-defaults/mountains.jpg",
	                                            "src": "Wgu_NGOc7000QQbh_mountains.jpg",
	                                            "type": "image",
	                                            "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
	                                            "originalUrl": "mountains.jpg"
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 18px;\"><strong>¡Correcto!</strong> Leukomed<sup>®</sup> T plus, Apósito estéril y transparente con pad absorbente para proteger y disminuir el riesgo de infección en heridas post quirúrgicas. Permite la inspección del entorno de la herida garantizando que la piel respire y evita riesgos de fricción.</span></p>"
	                                },
	                                "front":
	                                {
	                                    "type": "fullimage",
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/0f9UP4ai7kGz763q-leukoplast_leukomed%2520tplus%2520waterproof_ecom%2520packshot_f_7995405_EN.png",
	                                            "type": "image",
	                                            "crushedKey": "Hq-w_rmP_waab6i7_buKbX43CkXMmD2jN.png",
	                                            "originalUrl": "leukoplast_leukomed tplus waterproof_ecom packshot_f_7995405_EN.png",
	                                            "useCrushedKey": true
	                                        }
	                                    },
	                                    "description": "<p><span style=\"font-size: 20px;\">Leukomed<sup>®</sup> T plus</span></p>"
	                                }
	                            }
	                        ],
	                        "family": "flashcard",
	                        "variant": "flashcard",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clhn4e8qg008v356uunmugqxc",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cl6m7erow002c356q2xrha4xk",
	                                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">En el próximo capítulo, exploraremos más a fondo las fases de la cicatrización de heridas.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "styleMode": "BRANDED",
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundMode": "COLOR",
	                            "backgroundColor": "#9CA9B1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clhn4fmyi008w356ui0gz3c4g",
	                        "type": "divider",
	                        "items":
	                        [
	                            {
	                                "id": "clhn4fmyj008x356u04y506rz",
	                                "type": "",
	                                "title": "Módulo 3: Fases de la cicatrización de heridas",
	                                "buttonColor": "brand",
	                                "completeHint": "Complete the content above before moving on."
	                            }
	                        ],
	                        "family": "continue",
	                        "variant": "continue",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {},
	                "duplicatedFromId": "VteOPPGvTW9jmdsp2e2MQlXy5ECkTKM0",
	                "deleted": false,
	                "createdAt": "2023-05-16T13:18:08.411Z",
	                "updatedAt": "2024-01-26T10:14:18.635Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": null,
	                "headerImage":
	                {}
	            },
	            {
	                "id": "1w851B4TNbnGMlNJVd_MnTYeb2yAnel1",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "Módulo 3: Fases de la cicatrización de heridas",
	                "description": "",
	                "type": "blocks",
	                "icon": "Article",
	                "items":
	                [
	                    {
	                        "id": "clia8gme100j911dbak8acupr",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cl6xezxqz000n356q54dta0c8",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/yvJcTG7zsL6xMhbZ-Leukoplast_Leukomed-t-plus_Skin_Sensitive_Lifestyle_Pharmacy%2520(wide).png",
	                                        "type": "image",
	                                        "crushedKey": "yTYAnba4cI8_Gyi2_G7FuXoCzMWYAJG0t.jpg",
	                                        "originalUrl": "Leukoplast_Leukomed-t-plus_Skin_Sensitive_Lifestyle_Pharmacy (wide).png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p>Comprender la evolución natural de la cicatrización de heridas te permite participar activamente en el proceso de recuperación y contribuir a mejores resultados en la curación de las personas.</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.5,
	                            "cardMode": null,
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cl7ugonfd0010356p19gecdx9",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cl7ugonfk0011356p3dye0jav",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Observa el video para aprender acerca de las <strong>cuatro fases de la cicatrización de heridas:</strong> hemostasia, inflamación, proliferación y maduración</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 5,
	                            "paddingBottom": 1,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clivpbjaa000g356wjsqtrolk",
	                        "type": "multimedia",
	                        "items":
	                        [
	                            {
	                                "id": "clivpbjab000h356wys3lsub5",
	                                "media":
	                                {
	                                    "video":
	                                    {
	                                        "key": "wEr_6E9cWwCWDOLS_rise_2Fcourses_2FDs8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6_2FPJt3q8vPlsFu1LKZ-Wound_2520healing_NOPROCESS_.mp4",
	                                        "url": "https://articulate-us.s3.amazonaws.com/rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/PJt3q8vPlsFu1LKZ-Wound%2520healing_NOPROCESS_.mp4?AWSAccessKeyId=ASIATDIHEUTRA2IRXOTX&Content-Type=video%2Fmp4&Expires=1695367735&Signature=S6QRK4%2FQZOCQRAWM3rxIa23spzo%3D&x-amz-acl=public-read&x-amz-security-token=IQoJb3JpZ2luX2VjEBcaCXVzLWVhc3QtMSJGMEQCIAzxgLRXC88E%2BT4nO1B%2BWpTN6AKqwzVISFvGfLpcH5rVAiBSjgkI0FAs4PYjHOCTID5dlgv9Dm2vh3RbfkIN897HRSqDBQj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDIxMzE1MjczNjQ4MiIMo9WfQkVG7d%2Fq%2FmWMKtcE%2F7fE5Q4K5jf0H%2Fuj886KrorPYmmLVw6Zjx0BFtKq%2BXnE0EgUf8Vkawx%2FTCkPpSEbuRJQi7Ef%2FvmK7jnYgNdg0cKhTWiRParvInA2WKXZbv3p0XQ%2FL%2FRMYWGc9byxDrp7UH9XEReogaM57AQ1MaUmXZ7MlT0DZ1UbmR4mDWD1lgNhGpzUNG%2Fp3Q7XlWgVE61sHFX266ElbEfVVZieilhwHccpipxlB2ltCf3nqeAbjaZL%2F0tI%2F36EOHIExhaL7lGKv34rRvOB8BO2iuEbxeRAfh32mSK6JlLACXQN7dCZQal%2B%2Bn1I%2FIO%2FDOuaKMKi36fxmA6z3bZeTTa%2F9Jd%2BWlf39VUsIZoKZ4kWeXIcfyldqEF4tx8IXVKdTtH%2B5M46zifft9ap8yvGj%2FgMAl58d%2F0hIV0yzQFjE88eoL2h2qzdRt73oolMqgy6GM%2FN6PADbcZYHJ8skK6l5fG%2BFVVtYkd%2BFOkdDaDV5242S%2FiPB%2BJLGrrBrr%2FUDb5ZFE0bhQIp5%2Boj3P6o977%2FD2jjcqr4MVTyEJB0UHMiXbO0ZlHh%2BQbWGi9B3xx2wmmzRlDRTqB3UileDSoZhzQd75xo7OPDV095Z1vDp6leXY9YHo11yPaRRxvvBLkqSQFR%2B1xTKbFlbFIBx7gUt5wh9pJkIb%2FnnPqws8ym6AzabIxvbUJAyqiKsGumArmssJsRgjtc1kSTdjowrvEdqE6pD6U%2B9E5u2ePZJev1i%2Bl29gwBU4eo3nr%2B5KB%2B%2FMG9izDYInqmFxM8%2Bzcyr02ClMHWvwwip0hnAd%2FG6gCn7HJ0ywgw0eS0qAY6mwGF%2Bj7F%2Fs8dzEJ6ueF7%2Bz5v43czDORy9bNwgXwjbgQvwXwMQUUetVkGmM%2BNMGaOovn3F1ZLfeoEpMlRQVbHtI2ZCNdweiY52XkIEHdcAskia7qP9CAIzH6YVmOG9mVF1Ie1ZVvVsjCyjmtYDeTV1GBxfN%2FPpSVz097MnvCEdrLlUXcO9ha29vSkgzzD1R3J4ip1BIkBZwl4jjlg6g%3D%3D",
	                                        "type": "video",
	                                        "poster": "k0C7yH4Qd-qspiMR_rise_2Fcourses_2FDs8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6_2FYUlroD0y67rjoXVW-Wound_2520healing_NOPROCESS_.png",
	                                        "captions":
	                                        [
	                                            {
	                                                "id": "clmu9mu5m0064356zv33p6jio",
	                                                "key": "3o_b6kZIiaDWkFYt_HalNVjdu6wdDjyhx-wound_2520healing.vtt",
	                                                "code": "en",
	                                                "name": "English",
	                                                "filename": "wound healing.vtt"
	                                            }
	                                        ],
	                                        "filename": "PJt3q8vPlsFu1LKZ-Wound%20healing_NOPROCESS_.mp4",
	                                        "thumbnail": "https://images.articulate.com/f:jpg,b:fff,w:100,h:100,s:cover/rise%2Fcourses%2FDs8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6%2FYUlroD0y67rjoXVW-Wound%2520healing_NOPROCESS_.png",
	                                        "captionUID": "clmu9mvjj0065356zjfyw4ona",
	                                        "trackingId": "clivpbjaa000g356wjsqtrolk",
	                                        "originalUrl": "Wound healing_NOPROCESS_.mp4",
	                                        "skipProcess": true,
	                                        "cancelSource":
	                                        {
	                                            "token":
	                                            {
	                                                "promise":
	                                                {}
	                                            }
	                                        },
	                                        "trackingContext": "block:video"
	                                    }
	                                },
	                                "caption": ""
	                            }
	                        ],
	                        "family": "multimedia",
	                        "variant": "video",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": "LIGHT",
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clivrnt090014356tyc1gkcey",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clivrnt0d0015356tz6pex6gv",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">¿Qué caracteriza a cada fase de la cicatrización de heridas? Mueve las descripciones a la casilla correspondiente de la fase del proceso de cicatrización y revisa los comentarios.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clivrnhe40011356t0ieekuhp",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "clivrnhe40012356te4avyx75",
	                                "title": "Es la respuesta inicial a una lesión en los primeros minutos. ",
	                                "pileId": 1
	                            },
	                            {
	                                "id": "clivrnhe40013356txqnqhtvp",
	                                "title": "Los glóbulos blancos destruyen bacterias, cuerpos extraños y eliminan los desechos.",
	                                "pileId": 2
	                            },
	                            {
	                                "id": "clivrpqnr0020356tb5zdhvq2",
	                                "title": "La herida se regenera con nuevo tejido y crecen nuevos vasos sanguíneos.",
	                                "pileId": "clivrpqnr001z356tz7yea8tn"
	                            },
	                            {
	                                "id": "clivrprj70022356tt99hdcbo",
	                                "title": "La cicatriz se vuelve más plana y flexible. ",
	                                "pileId": "clivrprj70021356t4cirk97y"
	                            },
	                            {
	                                "id": "clivrrdh90025356twcbolsuu",
	                                "title": "La sangre forma un coágulo para detener el sangrado.",
	                                "pileId": 1
	                            },
	                            {
	                                "id": "clivrrux70027356txee6x6po",
	                                "title": "En esta etapa, puede aparecer hinchazón, calor, dolor y enrojecimiento",
	                                "pileId": 2
	                            },
	                            {
	                                "id": "clivrt12k0029356t71luq7h6",
	                                "title": "Esta fase dura de 4 a 6 días",
	                                "pileId": 2
	                            },
	                            {
	                                "id": "clivru9ex002d356tj94kyf7r",
	                                "title": "Esta fase dura de 3 a 21 días.",
	                                "pileId": "clivrpqnr001z356tz7yea8tn"
	                            },
	                            {
	                                "id": "clivrv5ax002f356txaa6wy5p",
	                                "title": "Esta fase puede durar de 21 días a 2 años.",
	                                "pileId": "clivrprj70021356t4cirk97y",
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "piles":
	                        [
	                            {
	                                "id": 1,
	                                "title": "Hemostasia"
	                            },
	                            {
	                                "id": 2,
	                                "title": "Inflamación"
	                            },
	                            {
	                                "id": "clivrpqnr001z356tz7yea8tn",
	                                "title": "Proliferación"
	                            },
	                            {
	                                "id": "clivrprj70021356t4cirk97y",
	                                "title": "Maduración"
	                            }
	                        ],
	                        "family": "interactive-fullscreen",
	                        "variant": "sorting",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 2,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clivqayxh05hq116qc7wscbw9",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clhzxq7u40019356pkyl9dr32",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">¿Lo entendiste correctamente? Aquí hay un resumen de las cuatro fases de la cicatrización de heridas.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "#ffffff",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clivqayxh05hr116q3qjdhh7z",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clhkc71mr0007356x50s8btjq",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/kvo2BPwPvztlF1kw-Artboard%25203.png",
	                                        "type": "image",
	                                        "crushedKey": "PzJmT9tnbt6bhpmW_WUNPV3ocaVdxGSI-.png",
	                                        "originalUrl": "Artboard 3.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Hemostasia:</strong></span></p><p><span style=\"font-size: 22px;\"><strong>(Primeros minutos)</strong></span></p><p><span style=\"font-size: 22px;\">Durante esta fase, se produce la <b>coagulación de la sangre</b> para detener el sangrado<sup>9</sup>.</span></p><p><span style=\"font-size: 22px;\">Se forma un <b>coágulo sanguíneo</b> en la herida.</span></p"
	                            },
	                            {
	                                "id": "clhkc71mr0008356xpoug4wy5",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/pnbVY-61hbOjmjLk-Artboard%25203_1.png",
	                                        "type": "image",
	                                        "crushedKey": "5PWR4vXGCbQ2noTf_VrRYmv3e8Ury9392.png",
	                                        "originalUrl": "Artboard 3_1.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Inflamación</strong></span></p><p><span style=\"font-size: 22px;\"><strong>(4-6 días)</strong></span></p><p><span style=\"font-size: 22px;\">La herida se inflama debido a la <b>respuesta inmunitaria.</b></span></p><p><span style=\"font-size: 22px;\"><b>Células inflamatorias</b> migran al área afectada<sup>9</sup>.</span></p><p><br></p>"
	                            },
	                            {
	                                "id": "clhkc71mr0009356xuy4kuy64",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/f1kmJXkn2CJL8tWS-Artboard%25203_2.png",
	                                        "type": "image",
	                                        "crushedKey": "2MumVZ58j-MOyoew_lid715iMhY_HOixb.png",
	                                        "originalUrl": "Artboard 3_2.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Proliferación</strong></span></p><p><span style=\"font-size: 22px;\"><strong>(3-21 días)</strong></span></p><p><span style=\"font-size: 22px;\">En esta fase, se produce la <b>formación de tejido de granulación</b><sup>9</sup>.</span></p><p><span style=\"font-size: 22px;\">Las <b>células fibroblásticas</b> ayudan a cerrar la herida.</span></p>"
	                            },
	                            {
	                                "id": "clivqeu7p000e356tpf80ggmw",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/nPW4okNIcr8BI3JK-Artboard%25203_3.png",
	                                        "type": "image",
	                                        "crushedKey": "lBKgW5Uwct_XTsfl_FjZmcMTqleLwYD6Z.png",
	                                        "originalUrl": "Artboard 3_3.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><strong><span style=\"font-size: 22px;\">Maduración</span></strong></p><p><strong><span style=\"font-size: 22px;\">(21 días – 2 años)</span></strong></p><p><span style=\"font-size: 22px;\">La herida se <b>fortalece y remodela</b><sup>9</sup>.&nbsp;</span></p><p><span style=\"font-size: 22px;\">El <b>colágeno</b> se reorganiza para mejorar la resistencia de la piel.</b></span></p><p><span style=\"font-size: 22px;\">La cicatriz se vuelve más plana y flexible.</span></p>",
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "family": "gallery",
	                        "variant": "four column",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clix0mi2m0005356rjgpu7rqi",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clhrln8fv00353c5yk1628kzw",
	                                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(0, 0, 0);\">Dependiendo del tipo y la gravedad que se presente en la herida, estas pueden cicatrizar por intención primaria o secundaria. Da clic en los signos de más (+) para aprender la diferencia entre ellas.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 5,
	                            "paddingBottom": 2,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clix1fljv000m356rrbpypbty",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clix0mfnb0004356rbiwun9x5",
	                                "paragraph": "<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><strong>Cicatrización por intención primaria vs. cicatrización por intención secundaria</strong></span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 3,
	                            "paddingBottom": 1,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clix206xa001r356rcx3bl8rf",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "30.801514959039594",
	                                "y": "18.30659662323967",
	                                "id": "clix206xb001s356r79iuy0se",
	                                "icon": "01",
	                                "title": "",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\"><strong>La cicatrización de heridas por intención primaria</strong> generalmente se refiere a heridas superficiales que involucran solo la epidermis y la dermis. Los bordes de la herida están cerca uno del otro, como en heridas quirúrgicas, laceraciones y cortes.</span></p>"
	                            },
	                            {
	                                "x": "67.60633707046509",
	                                "y": "17.546805357321716",
	                                "id": "clix206xb001t356r47bft3a6",
	                                "icon": "01",
	                                "title": "",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">La <strong>cicatrización por intención secundaria</strong> es común en heridas más grandes o de forma irregular, o en heridas con pérdida significativa de tejido, sin bordes de herida directamente opuestos. Por ejemplo, heridas traumáticas y abrasiones.</span></p>"
	                            },
	                            {
	                                "x": "30.91362714767456",
	                                "y": "53.400999635130496",
	                                "id": "cliym89ue001w356rnlgimj7y",
	                                "icon": "01",
	                                "title": "",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Cuando una herida cicatriza por intención primaria, la proximidad de los bordes de la herida permite una <b>formación de coágulos más fácil</b> y previene la infección al formar una costra.<br></span></p>"
	                            },
	                            {
	                                "x": "67.66438722610474",
	                                "y": "52.4483649285285",
	                                "id": "cliymir590003356wkcwy8gmu",
	                                "icon": "01",
	                                "title": "",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Cuando la cicatrización ocurre por intención secundaria, la herida <strong>granula y sana desde la base.</strong> La reacción inflamatoria puede ser más intensa que en la cicatrización por intención primaria.</span></p>"
	                            },
	                            {
	                                "x": "31.050987248378714",
	                                "y": "89.37023104459112",
	                                "id": "cliymlwah0005356wa62rlm58",
	                                "icon": "01",
	                                "title": "",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">En el caso de la cicatrización por intención primaria, la herida sana con <b>mínima formación de cicatrices.</b></span></p>"
	                            },
	                            {
	                                "x": "67.5093228824049",
	                                "y": "88.44471446362554",
	                                "id": "cliymn40s0007356wsi76nvm6",
	                                "icon": "01",
	                                "title": "",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">La cicatrización de heridas por intención secundaria <strong>tarda más tiempo</strong>, tiene un <strong>mayor riesgo de complicaciones</strong> y causa cicatrices.</span></p>",
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "E12kEiL6oPkxoXw9_WKpLKwRrcDiCKEL_.png",
	                                "type": "image",
	                                "isSquare": false,
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/WKpLKwRrcDiCKEL_.png",
	                                "dimensions":
	                                {
	                                    "top": 653,
	                                    "left": 0,
	                                    "width": 6400,
	                                    "height": 2559,
	                                    "originalWidth": 6400,
	                                    "originalHeight": 3400
	                                },
	                                "originalUrl": "primary-and-secondary-intention_NOPROCESS_.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/sMzdxHlmf1CS2uBL-primary-and-secondary-intention_NOPROCESS_.png",
	                                    "type": "image",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/ohUqSO-Rg8QtJPXG.png",
	                                    "originalUrl": "primary-and-secondary-intention_NOPROCESS_.png",
	                                    "useCrushedKey": false
	                                },
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "paddingBottom": 3,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cliymvlqp0016356wpzd8q4s0",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cliymvlqp0017356wxa1mrvzr",
	                                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">En el próximo capítulo, nos centraremos en los <strong>pasos para el tratamiento de heridas</strong> y las <strong>barreras para la cicatrización de heridas</strong>.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#9CA9B1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "ckwktdw19003a386jec30uh8x",
	                        "type": "divider",
	                        "items":
	                        [
	                            {
	                                "id": "ckus5rpu70010386fx0vf3m3s",
	                                "type": "",
	                                "title": "Módulo 4: Tratamiento de heridas y barreras para la cicatrización",
	                                "buttonColor": "brand",
	                                "completeHint": "Complete the content above before moving on."
	                            }
	                        ],
	                        "family": "continue",
	                        "variant": "continue",
	                        "settings":
	                        {
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {},
	                "duplicatedFromId": "5UO3fLLyEgo46X7PcKWKTHWjTTpVH6OK",
	                "deleted": false,
	                "createdAt": "2022-07-21T14:28:18.763Z",
	                "updatedAt": "2024-01-18T13:46:43.188Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": null,
	                "headerImage":
	                {}
	            },
	            {
	                "id": "Q1OsQ7P4QrnFBxGdWiGNkVcwXonqY9IN",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "Módulo 4: Tratamiento de heridas y barreras para la cicatrización",
	                "description": "",
	                "type": "blocks",
	                "icon": "Article",
	                "items":
	                [
	                    {
	                        "id": "cli1m1a410003356p43d85yey",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cli1m1a410004356ptsl7a1ed",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/hiGc_gOwKOPELtY1-Leukoplast_Pharmacy_Key%2520Visual%2520South_Father%2520and%2520Son.png",
	                                        "type": "image",
	                                        "crushedKey": "R_vHmBBpPsInRID6_DeqiSR6muCWHMdaq.jpg",
	                                        "originalUrl": "Leukoplast_Pharmacy_Key Visual South_Father and Son.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"color: rgb(255, 255, 255);\">Al tratar cortes y raspones de la manera correcta, puedes prevenir infecciones y minimizar complicaciones. La herida cicatrizará mejor y será menos dolorosa e incómoda. Haz clic en los signos de más para obtener más información sobre los pasos para el tratamiento de heridas.</span></p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.3,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clje5582h002s356r5o73g1y5",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clje5582h002t356r563tn70p",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Da clic en los signos de más (+) sobre los pasos del tratamiento de heridas.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 1,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clje4zmwc001b356ragk7uu1b",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "x": "15.24827442064906",
	                                "y": "69.61768937205186",
	                                "id": "clje4zmwc001c356rxn7wzs0v",
	                                "icon": "01",
	                                "title": "Lavarse las manos:",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Antes de limpiar o cubrir la herida, lavarse las manos para prevenir la contaminación y la infección de la herida.</span></p>"
	                            },
	                            {
	                                "x": "35.90673688682554",
	                                "y": "68.71418827773871",
	                                "id": "clje4zmwc001d356r37pfrpuf",
	                                "icon": "01",
	                                "title": "Limpiar la herida:",
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Enjuagar la herida con agua limpia para eliminar cualquier suciedad, ya que esto reducirá el riesgo de infección.</span></p>"
	                            },
	                            {
	                                "x": "55.95855099245539",
	                                "y": "66.72941592547514",
	                                "id": "clje51la3001h356rxent1oh7",
	                                "icon": "01",
	                                "title": "Secar la piel:",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><br></p><p><span style=\"font-size: 20px;\">Secar la piel circundante con una toalla o paño limpio.</span></p><p><br></p>"
	                            },
	                            {
	                                "x": "76.01036509808524",
	                                "y": "68.1118542148633",
	                                "id": "clje525jl001j356r5yehoslm",
	                                "icon": "01",
	                                "title": "Detener el sangrado:",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Usar una toalla limpia para aplicar una ligera presión en la zona hasta que el sangrado se detenga (esto puede llevar unos minutos).</span></p>"
	                            },
	                            {
	                                "x": "96.4507802522738",
	                                "y": "67.50952015198789",
	                                "id": "clje52vrl001l356rqb88re60",
	                                "icon": "01",
	                                "title": "Cubrir la herida:",
	                                "hasMedia": false,
	                                "isActive": false,
	                                "description": "<p><span style=\"font-size: 20px;\">Aplicar un apósito adecuado. El apósito se puede cambiar diariamente si es necesario o cada vez que se moje o ensucie.</span></p>",
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "t1NzXeub-z5-XTf2_x7Uw7_bChuIyTx56-steps2_NOPROCESS_.png",
	                                "type": "image",
	                                "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/UDxObVT4Kg09KSww.png",
	                                "originalUrl": "steps2_NOPROCESS_.png",
	                                "useCrushedKey": false
	                            }
	                        },
	                        "family": "interactive-fullscreen",
	                        "variant": "labeledgraphic",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "mediaWidth": "1",
	                            "paddingTop": 1,
	                            "accentColor": null,
	                            "markerColor": "",
	                            "zoomOnClick": true,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#ffffff",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cll7qg8zk004p3575egvwizte",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cll7p8od6000s3575cl7lqsey",
	                                "heading": "<p style=\"text-align: center;\"><span style=\"color: rgb(228, 2, 40);\">¿Por qué debes cubrir una herida?</span></p>",
	                                "paragraph": "<p><span style=\"font-size: 24px;\"Cuando una herida queda al descubierto, las nuevas células superficiales pueden secarse fácilmente, lo que puede causar dolor y ralentizar el proceso de cicatrización. Las heridas sin cubrir también son más susceptibles a la infección.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "heading paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 2,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cll7pxfo100413575anufzwkm",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cll7pxfo300443575oz2lfwa7",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/GWoS_rMjVtTcNy9f.jpg",
	                                        "type": "image",
	                                        "isSquare": true,
	                                        "crushedKey": "Xa-4tprH3cM8UNxv_GWoS_rMjVtTcNy9f.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 0,
	                                            "left": 432,
	                                            "width": 1120,
	                                            "height": 1120,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1120
	                                        },
	                                        "originalUrl": "Leukoplast_Eco_01857.png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/FNNVGzIVVT4z4w6s-Leukoplast_Eco_01857.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Ft4xctLQXNfQNNjY.jpg",
	                                            "originalUrl": "Leukoplast_Eco_01857.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Los apósitos o productos médicos adecuadamente seleccionados promueven una cicatrización más rápida al:</span></p><ul><li><span style=\"font-size: 24px;\">Proteger la herida contra la contaminación y el trauma adicional.</span></li><li><span style=\"font-size: 24px;\">Mantener un equilibrio óptimo de humedad y oxígeno.</span></li><li><span style=\"font-size: 24px;\">Aplicar presión para controlar el sangrado y ayudar a la coagulación.</span></li><li><span style=\"font-size: 24px;\">Reducir el dolor y minimizar potencialmente las cicatrices<sup>10</sup>.</span></li></ul>"
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text aside",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.5,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "zoomOnClick": false,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cll6fytmq000q3575xte5wrfb",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cll6fytmq000r3575vr0zt1qk",
	                                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Las infecciones, la diabetes, la edad, las hormonas sexuales, el estrés, la obesidad, los medicamentos, el alcoholismo, el tabaquismo y la nutrición pueden alterar la cicatrización de las heridas, lo que conduce a dolor prolongado, incomodidad y cicatrices.</span><span style=\"font-size: 24px; color: rgb(49, 53, 55);\"> Veamos otros factores que pueden convertirse en barreras para la cicatrización normal de las heridas:</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": null,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj2t7el000ca356waue1tdef",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clj2t7el100cf356wi863xbx2",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/MDL5pAxRUaVrgCR--AdobeStock_312033977.jpeg",
	                                        "type": "image",
	                                        "crushedKey": "o6CNhiOKgjlBHoqw_lwayalLH06tUYjEA.jpg",
	                                        "originalUrl": "AdobeStock_312033977.jpeg",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Duración de la herida:</strong></span></p><p><span style=\"font-size: 22px;\">La duración de la herida se asocia con el riesgo de infección, retrasos en la reparación, mala circulación sanguínea, formación de biofilm, inflamación y efectos psicológicos<sup>2</sup>.</span></p>"
	                            },
	                            {
	                                "id": "clj2t7el100cg356wfccklm9d",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/6mY3rr32eUmn5Fn5.jpg",
	                                        "type": "image",
	                                        "isSquare": true,
	                                        "crushedKey": "aOWIqjzycjN7HXCi_6mY3rr32eUmn5Fn5.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 0,
	                                            "left": 34,
	                                            "width": 800,
	                                            "height": 800,
	                                            "originalWidth": 1200,
	                                            "originalHeight": 800
	                                        },
	                                        "originalUrl": "Abrasion1.png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/_KD6E_A0H3edwBi5-Abrasion1.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/RKgEqKea8ay_cC0p.jpg",
	                                            "originalUrl": "Abrasion1.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Tamaño y profundidad de la herida:</strong></span></p><p><span style=\"font-size: 22px;\">Las heridas más grandes y profundas dificultan la cicatrización debido a la circulación sanguínea comprometida, la formación retardada de coágulos, un mayor riesgo de infección, la regeneración extensa del tejido y la formación prominente de cicatrices<sup>9</sup>.</span></p>"
	                            },
	                            {
	                                "id": "clj2t7el100ch356wq2gsqest",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/GksqQk9f41t8KSQl-Leukoplast-Wound-Closure-Strip-Website-Lifestyle-1000x1000px.png",
	                                        "type": "image",
	                                        "crushedKey": "xDbkU1PEAeY_rzdG_4eFSQj0RczhOj64M.jpg",
	                                        "originalUrl": "Leukoplast-Wound-Closure-Strip-Website-Lifestyle-1000x1000px.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Ubicación anatómica:</strong></span></p><p><span style=\"font-size: 22px;\">La ubicación de la herida puede retrasar la cicatrización debido a la limitada irrigación sanguínea, el movimiento o estrés mecánico, el riesgo de infección, el difícil acceso para el cuidado y la interacción con condiciones médicas subyacentes<sup>11</sup>.&nbsp;</span></p>"
	                            }
	                        ],
	                        "family": "gallery",
	                        "variant": "three column",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 2,
	                            "accentColor": null,
	                            "zoomOnClick": false,
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj2ud55f00ct356wfx7v7ecj",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clj2ud55f00cu356w7znwiq8t",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/5eltxRvpykyfXpGF.jpg",
	                                        "type": "image",
	                                        "isSquare": true,
	                                        "crushedKey": "Tpb_R4iuF5A4sd2u_5eltxRvpykyfXpGF.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 0,
	                                            "left": 57,
	                                            "width": 1120,
	                                            "height": 1120,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1120
	                                        },
	                                        "originalUrl": "AdobeStock_267587484.jpeg",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/hu22DI8OR89Uw2tA-AdobeStock_267587484.jpeg",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/BIBrrNNyrpDUeD-4.jpg",
	                                            "originalUrl": "AdobeStock_267587484.jpeg",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Inflamación:</strong></span></p><p><span style=\"font-size: 22px;\">Varias comorbilidades como la diabetes, la obesidad o las deficiencias inmunológicas afectan la fase inflamatoria. Estas heridas quedan atrapadas en la etapa inflamatoria debido a la inflamación prolongada, lo que dificulta la cicatrización<sup>12</sup>.</span></p><p><br></p>"
	                            },
	                            {
	                                "id": "clj2ud55f00cv356w6zp89r2s",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/J4UZ2hSAcGEtInxD-Leukoplast-Website-Wound-Care-Infection-Prevention-Header-1600x500px.png",
	                                        "type": "image",
	                                        "crushedKey": "hqghmn3VdYlbE4ty_fMHxsYCxGBOaPAQE.jpg",
	                                        "originalUrl": "Leukoplast-Website-Wound-Care-Infection-Prevention-Header-1600x500px.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Infección:</strong></span></p><p><span style=\"font-size: 22px;\">Los microorganismos dañinos liberan toxinas que retrasan la cicatrización de las heridas. En casos graves, la infección puede provocar una infección profunda de los tejidos o incluso una infección de la estructura ósea<sup>2</sup>.</span></p><p><br></p><p><br></p><p><br></p>"
	                            },
	                            {
	                                "id": "clje5i8lq003i356rtacptkgn",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/thaXnbbqCsLnvzxc.jpg",
	                                        "type": "image",
	                                        "isSquare": true,
	                                        "crushedKey": "ThQqBVRpCkyTmjX3_thaXnbbqCsLnvzxc.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 0,
	                                            "left": 58,
	                                            "width": 800,
	                                            "height": 800,
	                                            "originalWidth": 1200,
	                                            "originalHeight": 800
	                                        },
	                                        "originalUrl": "burn.png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/xt_g_UhUsnuKxZxt-burn.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/ESgNstrpZDHgpVKo.jpg",
	                                            "originalUrl": "burn.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><span style=\"font-size: 22px;\"><strong>Condición del lecho de la herida:</strong></span></p><p><span style=\"font-size: 22px;\">La síntesis deficiente de proteínas debido a la baja oxigenación, cambios en el pH, flujo sanguíneo insuficiente dentro del lecho de la herida y una vascularización deficiente pueden retrasar la cicatrización y dar lugar a una formación prominente de cicatrices<sup>13, 14, 15</sup>.</span></p>",
	                                "isNewlyInserted": true
	                            }
	                        ],
	                        "family": "gallery",
	                        "variant": "three column",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 2,
	                            "accentColor": null,
	                            "zoomOnClick": false,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj6ud4ba00dd0zbdc3b9hux8",
	                        "type": "knowledgeCheck",
	                        "items":
	                        [
	                            {
	                                "id": "cl31t7bpl0004396u8s3zbk23",
	                                "type": "MULTIPLE_RESPONSE",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Rfqvir1P8UBEPy9p-Leukoplast-Website-Wound-Care-Infection-Prevention-Header-1600x500px.png",
	                                        "type": "image",
	                                        "align": "left",
	                                        "fillWidth": false,
	                                        "crushedKey": "2_oKa4PAzUDZsklo_5FyL5_48xOrS-AnJ.jpg",
	                                        "originalUrl": "Leukoplast-Website-Wound-Care-Infection-Prevention-Header-1600x500px.png",
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "title": "<p><span style=\"font-size: 24px;\">Ahora veamos si puedes reconocer si una herida está infectada. ¿Cuáles de las siguientes son señales de infección en una herida? </span></p><p>Selecciona todas las respuestas correctas a continuación. Recibirás retroalimentación cuando respondas:</p>",
	                                "answers":
	                                [
	                                    {
	                                        "id": "ckoq2c9jk00133c5jgdnbqqub",
	                                        "title": "<p><span style=\"font-size: 22px;\">Hinchazón o enrojecimiento que se extiende más allá del área inmediata de la herida.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "ckoq2c9jk00123c5jalf7gv0a",
	                                        "title": "<p><span style=\"font-size: 22px;\">Hinchazón sin dolor alrededor de la herida.</span></p>",
	                                        "correct": false
	                                    },
	                                    {
	                                        "id": "cl0az4eyb000g396fkmjkvvei",
	                                        "title": "<p><span style=\"font-size: 22px;\">Aumento del dolor.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cl5v606h80008356q31x06luq",
	                                        "title": "<p><span style=\"font-size: 22px;\">Sensación general de enfermedad.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "cl5v60qij0009356qfn2xtvcl",
	                                        "title": "<p><span style=\"font-size: 22px;\">Calor o aumento inusual de temperatura alrededor de la herida.</span></p>",
	                                        "correct": true
	                                    },
	                                    {
	                                        "id": "clj6uesra000n356tj896s50f",
	                                        "title": "<p><span style=\"font-size: 22px;\">Presencia de pus o sangre en la herida, olor desagradable.</span></p>",
	                                        "correct": true
	                                    }
	                                ],
	                                "feedback": "",
	                                "feedbackType": "CORRECT_INCORRECT",
	                                "feedbackCorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Correcto.</span></p><p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(49, 53, 55);\"></span><span style=\"font-size: 24px;\">una herida infectada se vuelve más dolorosa, está inusualmente o cada vez más caliente al tacto, se ve roja o hinchada, pierde pus o sangre, tiene un olor desagradable y puede causar una sensación general de enfermedad que incluye fatiga, escalofríos, dolores corporales e inflamación de los ganglios linfáticos</span></p><p style=\"text-align: center;\"><span style=\"font-size: 24px;\">Las heridas infectadas requieren evaluación por parte de un profesional médico.<sup>16</sup>.&nbsp;</span></p><p style=\"text-align: center;\"><br></p>",
	                                "feedbackIncorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Esto no está del todo bien.</span></p><p style=\"text-align: center;\"><span style=\"font-size: 24px;\">Una herida infectada se vuelve más dolorosa, está inusualmente o cada vez más caliente al tacto, se ve roja o hinchada, pierde pus o sangre, tiene un olor desagradable y puede causar una sensación general de enfermedad que incluye fatiga, escalofríos, dolores corporales e inflamación de los ganglios linfáticos.</span></p><p style=\"text-align: center;\"><span style=\"font-size: 24px;\">Las heridas infectadas requieren evaluación por parte de un profesional médico<sup>16</sup>.&nbsp;</span></p><p style=\"text-align: center;\"><br></p>"
	                            }
	                        ],
	                        "family": "knowledgeCheck",
	                        "variant": "multiple choice",
	                        "settings":
	                        {
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundColor": "#9ca9b1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clj2nzywo0078356w9f89ajpp",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clj2nzywu007c356w4hj1ijzd",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "ye1KVuRGmjXu8A49_NVFdRAfAiRRauIDo-Leukoplast_Elastic_Visual_South_TenderCare_v1_NOPROCESS_.png",
	                                        "type": "image",
	                                        "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/-IsCLmnWfNdtdmZ-.jpg",
	                                        "originalUrl": "Leukoplast_Elastic_Visual_South_TenderCare_v1_NOPROCESS_.png",
	                                        "useCrushedKey": false
	                                    }
	                                },
	                                "caption": "<p>La elección adecuada de apósitos y productos médicos es crucial para superar las barreras en la cicatrización de heridas. Leukoplast ofrece un amplio portafolio de productos que gestionan infecciones menores, eliminan el exceso de humedad y se adaptan a diferentes ubicaciones anatómicas, proporcionando un tratamiento adecuado y una fijación segura y confiable.</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.3,
	                            "cardMode": null,
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clhn4e8qg008v356uunmugqxc",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cl6m7erow002c356q2xrha4xk",
	                                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">En el próximo capítulo, tendrás la oportunidad de poner en práctica lo aprendido.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "styleMode": "BRANDED",
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundMode": "COLOR",
	                            "backgroundColor": "#9CA9B1",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clhn4fmyi008w356ui0gz3c4g",
	                        "type": "divider",
	                        "items":
	                        [
	                            {
	                                "id": "clhn4fmyj008x356u04y506rz",
	                                "type": "",
	                                "title": "Módulo 5: Conocer a un cliente",
	                                "buttonColor": "brand",
	                                "completeHint": "Complete the content above before moving on."
	                            }
	                        ],
	                        "family": "continue",
	                        "variant": "continue",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {},
	                "duplicatedFromId": "QOHdSGHtT0NOIR6p-qHIdVZfLhOqj6vk",
	                "deleted": false,
	                "createdAt": "2023-06-16T13:23:22.845Z",
	                "updatedAt": "2024-01-22T13:35:29.319Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": null,
	                "headerImage":
	                {}
	            },
	            {
	                "id": "CBewCTJsEO2ny051KSIX7fuq0LYQpwPS",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "Módulo 5: Conocer a un cliente",
	                "description": "",
	                "type": "blocks",
	                "icon": "Article",
	                "items":
	                [
	                    {
	                        "id": "clk84zmgg040m12b69jeu6bpy",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "clj2nzywu007c356w4hj1ijzd",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/-02mw16OpXswEHwG.jpg",
	                                        "type": "image",
	                                        "isSquare": false,
	                                        "crushedKey": "Phh6tmMemfiGYi-8_-02mw16OpXswEHwG.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 88,
	                                            "left": 0,
	                                            "width": 1400,
	                                            "height": 491,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1120
	                                        },
	                                        "originalUrl": "Leukoplast_Spool_Lifestyle_Pharmacy.png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/-8GnXOjy_P9fXf6u-Leukoplast_Spool_Lifestyle_Pharmacy.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/31A5Eaa8jYtfGjD6.jpg",
	                                            "originalUrl": "Leukoplast_Spool_Lifestyle_Pharmacy.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p>Cuando se necesite información sobre una herida menor, siempre es buena idea hacer algunas preguntas básicas para comprender mejor la situación:</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "v": 1,
	                            "opacity": 0.4,
	                            "cardMode": null,
	                            "paddingTop": 0,
	                            "accentColor": null,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundType": null,
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cll11w8ow00223575s36aeok5",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "clk84dwzb001i3575in77t7u2",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Por ejemplo:</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 5,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "clk852dep000o3575okoiy5gu",
	                        "type": "list",
	                        "items":
	                        [
	                            {
	                                "id": "clk852dep000p3575lffjpgsw",
	                                "paragraph": "<p><span style=\"font-size: 22px;\">¿Qué tipo de herida es?</span></p>"
	                            },
	                            {
	                                "id": "clk852dep000q3575a77zvnyk",
	                                "paragraph": "<p><span style=\"font-size: 22px;\">¿Cómo y cuándo ocurrió?</span></p>"
	                            },
	                            {
	                                "id": "cll11x86u002j3575itv13p9f",
	                                "paragraph": "<p><span style=\"font-size: 22px;\">¿Qué tamaño tiene la herida?</span><span style=\"font-size: 24px;\">&nbsp;</span></p>",
	                                "isNewlyInserted": false
	                            },
	                            {
	                                "id": "clk852w3u000v3575jhm9hqhv",
	                                "paragraph": "<p><span style=\"font-size: 22px;\">¿Sientes algún dolor o molestia?</span></p>",
	                                "isNewlyInserted": false
	                            }
	                        ],
	                        "family": "list",
	                        "variant": "checkboxes",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 2,
	                            "accentColor": null,
	                            "paddingBottom": 2,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cll11w6gw00203575f41lh0v7",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cll11w6gw00213575n04o92q8",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">Basándonos en las respuestas, se pueden proporcionar consejos apropiados y recomendar soluciones de tratamiento adecuadas. También se puede sugerir buscar atención médica si es necesario.</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "paddingBottom": 5,
	                            "backgroundType": null,
	                            "backgroundColor": "#EFF1F2",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cl2zyauid0002396jo94lf8ww",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "cl2zyauie0003396jp44x259d",
	                                "title": "Scene 1",
	                                "slides":
	                                [
	                                    {
	                                        "id": "cl2zyauie0004396jmo9jceno",
	                                        "goTo": "next",
	                                        "type": "text",
	                                        "title": "Preparándote para unas vacaciones de senderismo:",
	                                        "emotion": "neutral",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [],
	                                        "description": "<p><span style=\"font-size: 22px;\">Un cliente entra buscando apósitos y productos médicos, y necesita ayuda.</span></p>",
	                                        "hasCharacter": false
	                                    },
	                                    {
	                                        "id": "cl2zyauif0005396jyg1ee13i",
	                                        "goTo": "next",
	                                        "type": "dialogue",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [
	                                            {
	                                                "id": "cl2zyauif0006396j5b0599yq",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "neutral",
	                                                "feedback": "",
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clj45jsrw000z356r1nwd52f5"
	                                                },
	                                                "description": "<p>¡Buenas tardes! ¿Puedo preguntarte para qué necesitas un apósito o cura?</p>"
	                                            }
	                                        ],
	                                        "description": "<p>Hola. Necesito ayuda para elegir un apósito o cura.</p>",
	                                        "hasCharacter": true
	                                    },
	                                    {
	                                        "id": "clj45jsrw000z356r1nwd52f5",
	                                        "goTo": "next",
	                                        "type": "dialogue",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [
	                                            {
	                                                "id": "cl2zyauif0006396j5b0599yq",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "disappointed",
	                                                "feedback": "",
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clh0teq2c0009356ya31x1qr5"
	                                                },
	                                                "description": "<p>Recomendaria las curas Leukoplast<sup>®</sup> Elásticas. Son adecuadas para la mayoria de las heridas menores.</p>"
	                                            },
	                                            {
	                                                "id": "clh0t9pof0005356yoq6pdrfn",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "neutral",
	                                                "feedback": "",
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "cl2zyauif0008396jfap2h5su"
	                                                },
	                                                "description": "<p>Claro. ¿Podrías proporcionar más información sobre los tipos de actividades que planeas realizar?</p>"
	                                            }
	                                        ],
	                                        "description": "<p>Me estoy preparando para unas vacaciones con mi familia y quiero estar preparado para pequeños accidentes. ¿Tienes algún apósito o cura que pueda permanecer en su lugar durante aproximadamente una semana?</p>",
	                                        "hasCharacter": true
	                                    },
	                                    {
	                                        "id": "clh0teq2c0009356ya31x1qr5",
	                                        "goTo": "slide",
	                                        "type": "text",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide":
	                                        {
	                                            "scene": "cl2zyauie0003396jp44x259d",
	                                            "slide": "clj45jsrw000z356r1nwd52f5"
	                                        },
	                                        "responses":
	                                        [],
	                                        "description": "<p>Esta no es una buena respuesta. Deberías intentar obtener más información sobre las necesidades específicas del cliente antes de recomendar una solución.</p>",
	                                        "hasCharacter": false
	                                    },
	                                    {
	                                        "id": "cl2zyauif0008396jfap2h5su",
	                                        "goTo": "next",
	                                        "type": "dialogue",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [
	                                            {
	                                                "id": "cl302okr3002i396j1rif56zt",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "neutral",
	                                                "feedback": "",
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clldwqkns000i3575sz9hwpb8"
	                                                },
	                                                "description": "<p>Entendido. Parece que necesitas un apósito o cura que sea duradera y resistente al agua, como has mencionado.</p>"
	                                            },
	                                            {
	                                                "id": "cl2zyauif0009396ju8pv1drf",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "disappointed",
	                                                "feedback": "",
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clh4pm4uy0003356ubrmse8v2"
	                                                },
	                                                "description": "<p>Puedes utilizar simplemente un apósito o cura.</p>"
	                                            }
	                                        ],
	                                        "description": "<p>Entiendo. ¿Estás buscando algo resistente al agua y que se mantenga en su lugar incluso si se moja durante tu excursión de senderismo?</p>",
	                                        "hasCharacter": true
	                                    },
	                                    {
	                                        "id": "clh4pm4uy0003356ubrmse8v2",
	                                        "goTo": "slide",
	                                        "type": "text",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide":
	                                        {
	                                            "scene": "cl2zyauie0003396jp44x259d",
	                                            "slide": "cl2zyauif0008396jfap2h5su"
	                                        },
	                                        "responses":
	                                        [],
	                                        "description": "<p>Esta no es una buena respuesta. Deberías intentar obtener más información sobre las necesidades específicas del cliente antes de recomendar una solución.</p>",
	                                        "hasCharacter": false
	                                    },
	                                    {
	                                        "id": "clldwqkns000i3575sz9hwpb8",
	                                        "goTo": "next",
	                                        "type": "dialogue",
	                                        "title": null,
	                                        "emotion": "thinking",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [
	                                            {
	                                                "id": "clj45uwdw001c356rcy4m4lcb",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "disappointed",
	                                                "feedback": null,
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clj45v0ti001f356r1b6rqqq1"
	                                                },
	                                                "description": "<p>Recomiendo una cinta médica Leukoplast<sup>®</sup>, que cubrirá de forma segura la mayoría de las heridas.</p>"
	                                            },
	                                            {
	                                                "id": "clldx7wpm000k3575uk5k4p2w",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "disappointed",
	                                                "feedback": null,
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clj45z0f6001q356rclkk4nn7"
	                                                },
	                                                "description": "<p>Recomiendo Leukoplast<sup>®</sup> Elásticas. Está disponible en una variedad de tamaños y formas para adaptarse a diferentes áreas del cuerpo.</p>"
	                                            },
	                                            {
	                                                "id": "clj45xm9y001j356rqylmh8mn",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "thinking",
	                                                "feedback": null,
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clj45ymkk001n356rmlevujv9"
	                                                },
	                                                "description": "<p>Recomiendo el apósito Leukomed<sup>®</sup> T plus. Es fácil de aplicar y adecuado para heridas pequeñas a medianas. Además, puedes llevarlo puesto durante hasta 7 días.</p>"
	                                            }
	                                        ],
	                                        "description": "<p>Entendido. ¿Me pregunto si debería comprar diferentes tamaños tal vez? ¿Qué me recomendarías?</p>",
	                                        "hasCharacter": true
	                                    },
	                                    {
	                                        "id": "clj45v0ti001f356r1b6rqqq1",
	                                        "goTo": "slide",
	                                        "type": "text",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide":
	                                        {
	                                            "scene": "cl2zyauie0003396jp44x259d",
	                                            "slide": "clldwqkns000i3575sz9hwpb8"
	                                        },
	                                        "responses":
	                                        [],
	                                        "description": "<p>Si bien la cinta médica es valiosa para asegurar apósitos en su lugar, carece de las propiedades protectoras y absorbentes que solo los apósitos especializados pueden proporcionar. ¡Intentemos de nuevo!</p>",
	                                        "hasCharacter": false
	                                    },
	                                    {
	                                        "id": "clj45z0f6001q356rclkk4nn7",
	                                        "goTo": "slide",
	                                        "type": "text",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide":
	                                        {
	                                            "scene": "cl2zyauie0003396jp44x259d",
	                                            "slide": "clldwqkns000i3575sz9hwpb8"
	                                        },
	                                        "responses":
	                                        [],
	                                        "description": "<p>Leukoplast<sup>®</sup> Elásticas no es resistente al agua, por lo que no es una buena sugerencia para este cliente. ¡Intenta de nuevo con otra recomendación!</p>",
	                                        "hasCharacter": false
	                                    },
	                                    {
	                                        "id": "clj45ymkk001n356rmlevujv9",
	                                        "goTo": "next",
	                                        "type": "dialogue",
	                                        "title": null,
	                                        "emotion": "00009",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [
	                                            {
	                                                "id": "clj464vh9001u356r3dsn2exg",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "disappointed",
	                                                "feedback": null,
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clj4652he001v356r3pyvw7wl"
	                                                },
	                                                "description": "<p>No estoy seguro en realidad. Simplemente manténlo alejado del agua durante unos días y estará bien.</p>"
	                                            },
	                                            {
	                                                "id": "clj465z1h001x356rchrqffq0",
	                                                "goTo": "slide",
	                                                "action": "continue",
	                                                "emotion": "00009",
	                                                "feedback": null,
	                                                "nextSlide":
	                                                {
	                                                    "scene": "cl2zyauie0003396jp44x259d",
	                                                    "slide": "clj466ibs0020356r0o68cvdo"
	                                                },
	                                                "description": "<p>Sí, Leukomed<sup>®</sup> T plus es resistente al agua y se mantendrá en su lugar para proteger la herida incluso bajo la lluvia.</p>"
	                                            }
	                                        ],
	                                        "description": "<p>Eso suena genial. ¿También es resistente al agua?</p>",
	                                        "hasCharacter": true
	                                    },
	                                    {
	                                        "id": "clj4652he001v356r3pyvw7wl",
	                                        "goTo": "slide",
	                                        "type": "text",
	                                        "title": null,
	                                        "emotion": "neutral",
	                                        "nextSlide":
	                                        {
	                                            "scene": "cl2zyauie0003396jp44x259d",
	                                            "slide": "clj45ymkk001n356rmlevujv9"
	                                        },
	                                        "responses":
	                                        [],
	                                        "description": "<p>Alejarse del agua no es en absoluto lo que busca tu cliente. Además, Leukomed<sup>®</sup> T plus es de hecho un apósito resistente al agua. ¡Inténtalo de nuevo!</p>",
	                                        "hasCharacter": false
	                                    },
	                                    {
	                                        "id": "clj466ibs0020356r0o68cvdo",
	                                        "goTo": "next",
	                                        "type": "dialogue",
	                                        "title": null,
	                                        "emotion": "00005",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [
	                                            {
	                                                "id": "clj468xv40021356rau2jvf4x",
	                                                "goTo": "next",
	                                                "action": "continue",
	                                                "emotion": "00005",
	                                                "feedback": null,
	                                                "nextSlide": null,
	                                                "description": "<p>Me alegra haber podido ayudarte. ¡Que tengas unas vacaciones fantásticas!</p>"
	                                            }
	                                        ],
	                                        "description": "<p>¡Perfecto! Lo tomaré. ¡Es genial saber que podemos seguir disfrutando de nuestras vacaciones de senderismo incluso a pesar de cualquier corte o raspón y en cualquier clima!</p>",
	                                        "hasCharacter": true
	                                    },
	                                    {
	                                        "id": "cl2zyauif000b396j0va8gkxe",
	                                        "goTo": "end",
	                                        "type": "text",
	                                        "title": "",
	                                        "emotion": "neutral",
	                                        "nextSlide": null,
	                                        "responses":
	                                        [],
	                                        "description": "<p><span style=\"font-size: 20px;\">¡Bien hecho! Has formulado las preguntas adecuadas, analizado la situación y recomendado el producto más adecuado para las necesidades específicas de tu cliente.</span></p>",
	                                        "hasCharacter": true
	                                    }
	                                ],
	                                "character":
	                                {
	                                    "id": "photo-female-00048cas",
	                                    "src": "https://cdn.articulate.com/content-pass/uploads/WnyXu_QKZGuKTUOq/shaela-cas-drop.png",
	                                    "name": "Aliyah - Casual",
	                                    "poses":
	                                    {
	                                        "00005":
	                                        {
	                                            "id": "00005",
	                                            "key": "content-pass/uploads/bXRbu-RUGYF-6sLV/00005_full.png",
	                                            "src": "X4DuSKXDGSDY5ob2_00005_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "positive"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "listening"
	                                                }
	                                            ],
	                                            "thumbnailKey": "content-pass/uploads/KO72EDo9tPhn4B83/lTyNMysq2GWfpRkU.jpg"
	                                        },
	                                        "00009":
	                                        {
	                                            "id": "00009",
	                                            "key": "content-pass/uploads/d8EYRqsY4MeRP6IJ/00009_full.png",
	                                            "src": "R0rLHWZ7__qXy5Iy_00009_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "presenting"
	                                                }
	                                            ],
	                                            "thumbnailKey": "content-pass/uploads/_EjH5aljSdTpKb6q/cFahCp2nF4W9k_-P.jpg"
	                                        },
	                                        "00021":
	                                        {
	                                            "id": "00021",
	                                            "key": "content-pass/uploads/Jr9fqhSYetxkNAff/00021_full.png",
	                                            "src": "Rm5mAAXs3JuuCQlT_00021_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "listening"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "thinking"
	                                                }
	                                            ],
	                                            "thumbnailKey": "content-pass/uploads/1JeiDIGrv0XygfFW/p4wnleoS_en4DFbA.jpg"
	                                        },
	                                        "angry":
	                                        {
	                                            "id": "00113",
	                                            "key": "content-pass/uploads/6ZyJDH2JYhR6QJBg/00113_full.png",
	                                            "src": "yFTgaD5JO6x1SKkr_00113_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "negative"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "angry"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/u-SFww9D3qaXkEc3/qYQWr6sJ4CCEBLFS.jpg",
	                                            "thumbnailKey": "content-pass/uploads/u-SFww9D3qaXkEc3/qYQWr6sJ4CCEBLFS.jpg"
	                                        },
	                                        "happy":
	                                        {
	                                            "id": "00017",
	                                            "key": "content-pass/uploads/A_GSfV-MHeF2_Oxg/00017_full.png",
	                                            "src": "Sd8UI1UMoPmtOEvT_00017_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "positive"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "happy"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "listening"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/eaY7bejm0PjrLZUg/Z915bgxxt5FMrKdV.jpg",
	                                            "thumbnailKey": "content-pass/uploads/eaY7bejm0PjrLZUg/Z915bgxxt5FMrKdV.jpg"
	                                        },
	                                        "asking":
	                                        {
	                                            "id": "00077",
	                                            "key": "content-pass/uploads/zXK0-wJd4rNf1Zh5/00077_full.png",
	                                            "src": "0GPKauyU8ADryYaz_00077_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "negative"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "asking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/1-oWcEgtcqc5u6L-/NjHPD1DeK6hDLer4.jpg",
	                                            "thumbnailKey": "content-pass/uploads/1-oWcEgtcqc5u6L-/NjHPD1DeK6hDLer4.jpg"
	                                        },
	                                        "alarmed":
	                                        {
	                                            "id": "00016",
	                                            "key": "content-pass/uploads/_xU4s6jRCEuysqqm/00016_full.png",
	                                            "src": "bPxAtYkb2JYAf2gb_00016_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "positive"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "negative"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "alarmed"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/lWAHi6SL_g6vvImr/thnm_huELsUi-oos.jpg",
	                                            "thumbnailKey": "content-pass/uploads/lWAHi6SL_g6vvImr/thnm_huELsUi-oos.jpg"
	                                        },
	                                        "neutral":
	                                        {
	                                            "id": "00002",
	                                            "key": "content-pass/uploads/I3WB7aOKF2cab9H8/00002_full.png",
	                                            "src": "a1Ets9fJbt3u2adT_00002_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "listening"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/kciClhAexNdJ52FX/6ihGpQ9ri--daDCo.jpg",
	                                            "thumbnailKey": "content-pass/uploads/kciClhAexNdJ52FX/6ihGpQ9ri--daDCo.jpg"
	                                        },
	                                        "talking":
	                                        {
	                                            "id": "00009",
	                                            "key": "content-pass/uploads/d8EYRqsY4MeRP6IJ/00009_full.png",
	                                            "src": "R0rLHWZ7__qXy5Iy_00009_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "presenting"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/_EjH5aljSdTpKb6q/cFahCp2nF4W9k_-P.jpg",
	                                            "thumbnailKey": "content-pass/uploads/_EjH5aljSdTpKb6q/cFahCp2nF4W9k_-P.jpg"
	                                        },
	                                        "worried":
	                                        {
	                                            "id": "00028",
	                                            "key": "content-pass/uploads/54piusAS41JpqN9O/00028_full.png",
	                                            "src": "uia93bTu-219dTB4_00028_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "negative"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "worried"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "listening"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "thinking"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/uHgZLlrfuTwQFHuu/YPRHO7ZwgWC4eyKL.jpg",
	                                            "thumbnailKey": "content-pass/uploads/uHgZLlrfuTwQFHuu/YPRHO7ZwgWC4eyKL.jpg"
	                                        },
	                                        "confused":
	                                        {
	                                            "id": "00106",
	                                            "key": "content-pass/uploads/dCZhfwWchczzyMvT/00106_full.png",
	                                            "src": "HynDxJQIAUfOkw8V_00106_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "negative"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "confused"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/tI1T8uMXoxRaMzv6/JBGQopeIIDLM1d15.jpg",
	                                            "thumbnailKey": "content-pass/uploads/tI1T8uMXoxRaMzv6/JBGQopeIIDLM1d15.jpg"
	                                        },
	                                        "stressed":
	                                        {
	                                            "id": "00125",
	                                            "key": "content-pass/uploads/AD5JGqHdBUq8hZaU/00125_full.png",
	                                            "src": "6a06cBESOg92iYnc_00125_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "negative"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "stressed"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/RCrck88KSO-Y_xSu/KeaZ8g3AAGyjZVwV.jpg",
	                                            "thumbnailKey": "content-pass/uploads/RCrck88KSO-Y_xSu/KeaZ8g3AAGyjZVwV.jpg"
	                                        },
	                                        "thinking":
	                                        {
	                                            "id": "00019",
	                                            "key": "content-pass/uploads/5PpW2gSb9O8qFCsI/00019_full.png",
	                                            "src": "8fGhZog7eW2urPx4_00019_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "thinking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "listening"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "thinking"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/UZ3cvnOzuM7H-VdT/f_lfddW6d20xVTU8.jpg",
	                                            "thumbnailKey": "content-pass/uploads/UZ3cvnOzuM7H-VdT/f_lfddW6d20xVTU8.jpg"
	                                        },
	                                        "surprised":
	                                        {
	                                            "id": "00073",
	                                            "key": "content-pass/uploads/Ww_ELdeT3FMAFxIz/00073_full.png",
	                                            "src": "PNEsTEfX01Vbl1hD_00073_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "surprised"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "talking"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "gesturing"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "presenting"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/ElkcFRK3WY9aS0y-/z4863MAxNr8HF1ga.jpg",
	                                            "thumbnailKey": "content-pass/uploads/ElkcFRK3WY9aS0y-/z4863MAxNr8HF1ga.jpg"
	                                        },
	                                        "disappointed":
	                                        {
	                                            "id": "00032",
	                                            "key": "content-pass/uploads/5P6jVfiOuZai9fXp/00032_full.png",
	                                            "src": "VdebY21O9ysRPvEq_00032_full.png",
	                                            "filters":
	                                            [
	                                                {
	                                                    "name": "important",
	                                                    "value": "no"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "emotion",
	                                                    "value": "negative"
	                                                },
	                                                {
	                                                    "name": "rise_emotion",
	                                                    "value": "disappointed"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "neutral"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "listening"
	                                                },
	                                                {
	                                                    "name": "style",
	                                                    "value": "reacting"
	                                                }
	                                            ],
	                                            "thumbnail": "https://cdn.articulate.com/content-pass/uploads/WLzWnQEw3JaWHR_8/peEstllU5ARc_tR1.jpg",
	                                            "thumbnailKey": "content-pass/uploads/WLzWnQEw3JaWHR_8/peEstllU5ARc_tR1.jpg"
	                                        }
	                                    }
	                                },
	                                "background":
	                                {
	                                    "media":
	                                    {
	                                        "image":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/hQtFDI2NzW9YRUbn-stock_image.jpg",
	                                            "type": "image",
	                                            "crushedKey": "VAzpLes0PXLX0oyI_bpo88QEn9rDAQGHA.jpg",
	                                            "originalUrl": "stock-image.jpg",
	                                            "useCrushedKey": true
	                                        }
	                                    }
	                                }
	                            }
	                        ],
	                        "family": "interactive-fullscreen",
	                        "variant": "scenario",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "styleMode": "BRANDED",
	                            "mediaWidth": "1",
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "paddingBottom": 0,
	                            "backgroundMode": "COLOR",
	                            "backgroundColor": "#ffffff",
	                            "entranceAnimation": true,
	                            "preventDuplicateIdGeneration": true
	                        }
	                    },
	                    {
	                        "id": "cl31ccrse0008396j0dpnpzr7",
	                        "type": "divider",
	                        "items":
	                        [
	                            {
	                                "id": "cldczj6ez000w356qn1wedcv6",
	                                "type": "",
	                                "title": "Módulo 6: Prueba de conocimientos",
	                                "buttonColor": "brand",
	                                "completeHint": "Complete the content above before moving on."
	                            }
	                        ],
	                        "family": "continue",
	                        "variant": "continue",
	                        "settings":
	                        {
	                            "v": 1,
	                            "cardMode": null,
	                            "styleMode": "BRANDED",
	                            "paddingTop": 3,
	                            "paddingBottom": 3,
	                            "backgroundMode": "COLOR",
	                            "backgroundType": null,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {},
	                "duplicatedFromId": "XpUndIiLvfU_e-meVSu86htVXap-Lo5M",
	                "deleted": false,
	                "createdAt": "2023-06-19T15:23:21.018Z",
	                "updatedAt": "2024-02-05T15:53:50.865Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": null,
	                "headerImage":
	                {}
	            },
	            {
	                "id": "8Mri9EoFJut2NouMkjd3UoEo8F32EZ17",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "Módulo 6: Prueba de conocimientos",
	                "description": "<p><span style=\"font-size: 24px;\">¡Es hora de poner a prueba tus conocimientos! Debes responder correctamente 7 de las 8 preguntas para aprobar la prueba y completar el curso.</span></p><p><br></p>",
	                "type": "quiz",
	                "icon": "Quiz",
	                "items":
	                [
	                    {
	                        "id": "cl6kq79y80003356qo5i1cbx8",
	                        "type": "MULTIPLE_CHOICE",
	                        "media":
	                        {
	                            "tmp":
	                            {},
	                            "image":
	                            {
	                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/XdZk_7ZdQKpAxRjO.jpg",
	                                "type": "image",
	                                "align": "left",
	                                "isSquare": false,
	                                "crushedKey": "JaDJmqwxNo75VBVz_XdZk_7ZdQKpAxRjO.jpg",
	                                "dimensions":
	                                {
	                                    "top": 0,
	                                    "left": 0,
	                                    "width": 1200,
	                                    "height": 586,
	                                    "originalWidth": 1200,
	                                    "originalHeight": 800
	                                },
	                                "originalUrl": "Leukoplast-Wound-Advisor-Scratches-Close-Up-Lifestyle-small.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/eVWd6Roj0kXf6axB-Leukoplast-Wound-Advisor-Scratches-Close-Up-Lifestyle-small.png",
	                                    "type": "image",
	                                    "align": "left",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/5Nsql72YrktPtHx1.jpg",
	                                    "originalUrl": "Leukoplast-Wound-Advisor-Scratches-Close-Up-Lifestyle-small.png",
	                                    "useCrushedKey": true
	                                },
	                                "useCrushedKey": true
	                            }
	                        },
	                        "title": "<p><span style=\"font-size: 24px;\">¿Qué es una herida aguda?</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "cl6kq79y80005356qb4hcuttk",
	                                "title": "<p><span style=\"font-size: 22px;\">Un tipo de lesión que ocurre de manera repentina y generalmente sana dentro de un período de tiempo predecible. Por ejemplo, una laceración o una herida creada quirúrgicamente.</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cl6x7egb10002356qiauf7um8",
	                                "title": "<p><span style=\"font-size: 22px;\">Un tipo de herida que no progresa a través de las etapas normales de cicatrización dentro del tiempo esperado. Puede durar varias semanas o incluso meses.</span></p>"
	                            }
	                        ],
	                        "correct": "cl6kq79y80005356qb4hcuttk",
	                        "corrects":
	                        [],
	                        "feedback": ""
	                    },
	                    {
	                        "id": "cl6kq79y80006356qqyjmx5y2",
	                        "type": "MULTIPLE_RESPONSE",
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/PwRNQqxF66a35cfk.jpg",
	                                "type": "image",
	                                "align": "left",
	                                "isSquare": false,
	                                "crushedKey": "5dFDrnsfj6tfT_9__PwRNQqxF66a35cfk.jpg",
	                                "dimensions":
	                                {
	                                    "top": 13,
	                                    "left": 0,
	                                    "width": 1198,
	                                    "height": 668,
	                                    "originalWidth": 1200,
	                                    "originalHeight": 800
	                                },
	                                "originalUrl": "Leukoplast_Eco_01729.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/D44wg8wM7gM5Cit0-Leukoplast_Eco_01729.png",
	                                    "type": "image",
	                                    "align": "left",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/srtQH-dva7DKu7_6.jpg",
	                                    "originalUrl": "Leukoplast_Eco_01729.png",
	                                    "useCrushedKey": true
	                                },
	                                "useCrushedKey": true
	                            }
	                        },
	                        "title": "<p><span style=\"font-size: 24px;\">¿Cuáles de estos factores pueden retrasar la cicatrización de heridas?</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas a continuación:</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "cl6kq79y80007356ql6hczpby",
	                                "title": "<p><span style=\"font-size: 22px;\">Tamaño, profundidad y duración de la herida.</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cl6kq79y8000a356qtljjedtk",
	                                "title": "<p><span style=\"font-size: 22px;\">Ubicación anatómica de la herida.</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cl6kq79y80008356q7r8a2pqu",
	                                "title": "<p><span style=\"font-size: 22px;\">Condición del lecho de la herida.</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli03xop7009b356pfrt5m8iu",
	                                "title": "<p><span style=\"font-size: 22px;\">Género del paciente.</span></p>"
	                            },
	                            {
	                                "id": "cli03ybl3009y356pxaj4ykmr",
	                                "title": "<p><span style=\"font-size: 22px;\">Inflamación.</span></p>"
	                            },
	                            {
	                                "id": "cli03yjf300ag356pt43zz26w",
	                                "title": "<p><span style=\"font-size: 22px;\">Infección.</span></p>"
	                            }
	                        ],
	                        "correct": "cl6kq79y80008356q7r8a2pqu",
	                        "corrects":
	                        [
	                            "cl6kq79y80007356ql6hczpby",
	                            "cl6kq79y80008356q7r8a2pqu",
	                            "cl6kq79y8000a356qtljjedtk",
	                            "cli03ybl3009y356pxaj4ykmr",
	                            "cli03yjf300ag356pt43zz26w"
	                        ],
	                        "feedback": ""
	                    },
	                    {
	                        "id": "cli04iomj0011356p9veupu5n",
	                        "type": "MULTIPLE_CHOICE",
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/qshHxIlvfwSVHhTH.jpg",
	                                "type": "image",
	                                "align": "left",
	                                "isSquare": false,
	                                "crushedKey": "hnH6BH1xaEKI38HX_qshHxIlvfwSVHhTH.jpg",
	                                "dimensions":
	                                {
	                                    "top": 73,
	                                    "left": 0,
	                                    "width": 1200,
	                                    "height": 615,
	                                    "originalWidth": 1200,
	                                    "originalHeight": 800
	                                },
	                                "originalUrl": "Leukoplast-Wound-Advisor-Bites-Close-Up-Lifestyle-small.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/4ImJWBXkov1keNOV-Leukoplast-Wound-Advisor-Bites-Close-Up-Lifestyle-small.png",
	                                    "type": "image",
	                                    "align": "left",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/BU8mn5zgfLM2mV4J.jpg",
	                                    "originalUrl": "Leukoplast-Wound-Advisor-Bites-Close-Up-Lifestyle-small.png",
	                                    "useCrushedKey": true
	                                },
	                                "useCrushedKey": true
	                            }
	                        },
	                        "title": "<p><span style=\"font-size: 24px;\">¿Qué es cierto acerca de las heridas, como las heridas punzantes, rasguños o mordeduras de animales, quemaduras extensas, hemorragias intensas, heridas crónicas e infectadas?</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "cli04iomm0012356ph5ubvfq5",
	                                "title": "<p><span style=\"font-size: 22px;\">Pueden manejarse en casa.</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "clj5c1cmq00a4356w69svs0yc",
	                                "title": "<p><span style=\"font-size: 22px;\">Requieren evaluación por un profesional médico.</span></p>"
	                            }
	                        ],
	                        "correct": "clj5c1cmq00a4356w69svs0yc",
	                        "corrects":
	                        [
	                            "cli04iomm0012356ph5ubvfq5",
	                            "clj5c1cmq00a4356w69svs0yc"
	                        ],
	                        "feedback": ""
	                    },
	                    {
	                        "id": "clj5c4m5v00cq356wdxsclyyc",
	                        "type": "MATCHING",
	                        "title": "<p><span style=\"font-size: 24px;\">¿Qué describe cada una de las cuatro fases de la cicatrización de heridas?</span></p><p><span style=\"font-size: 17px;\">Asocia las fases a continuación con las descripciones correctas:</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "clj5c4m5y00cr356wnptu4i3g",
	                                "title": "Hemostasia",
	                                "matchTitle": "Es la respuesta inicial a una lesión. La sangre forma un coágulo para detener el sangrado."
	                            },
	                            {
	                                "id": "clj5c4m5y00cs356wbezrsy37",
	                                "title": "Inflamación",
	                                "matchTitle": "Esta fase se centra en la limpieza de la herida, siendo típicos la hinchazón, el calor, el dolor y el enrojecimiento."
	                            },
	                            {
	                                "id": "clj5c4m5y00ct356wx5khu50v",
	                                "title": "Proliferación",
	                                "matchTitle": "Esta fase se centra en la granulación, la contracción de la herida y la epitelización."
	                            },
	                            {
	                                "id": "clj5c6tpx00cu356wvgweh2xw",
	                                "title": "Maduración",
	                                "matchTitle": "Esta fase es responsable de la remodelación del tejido. Se forma una cicatriz a medida que la herida se contrae"
	                            }
	                        ],
	                        "feedback": ""
	                    },
	                    {
	                        "id": "clj6u8q13000u356wnchwbffw",
	                        "type": "MATCHING",
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/4YiMI1JSg-Ux1cuw-wound%2520types%2520question%25202.png",
	                                "type": "image",
	                                "align": "left",
	                                "fillWidth": false,
	                                "crushedKey": "5_b7TaLegb9wuR3a_uta0vyQtQzZMUb26.png",
	                                "originalUrl": "wound types question 2.png",
	                                "useCrushedKey": true
	                            }
	                        },
	                        "title": "<p><span style=\"font-size: 24px;\">¿Puedes identificar estas heridas?</span></p><p><span style=\"font-size: 17px;\">Asocia las imágenes con los tipos de heridas correctos.</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "clj5c4m5y00cr356wnptu4i3g",
	                                "title": "Grieta",
	                                "matchTitle": "1"
	                            },
	                            {
	                                "id": "clj5c4m5y00cs356wbezrsy37",
	                                "title": "Laceración",
	                                "matchTitle": "2"
	                            },
	                            {
	                                "id": "clj5c4m5y00ct356wx5khu50v",
	                                "title": "Abrasión",
	                                "matchTitle": "3"
	                            },
	                            {
	                                "id": "clj5c6tpx00cu356wvgweh2xw",
	                                "title": "Quemadura leve",
	                                "matchTitle": "4"
	                            },
	                            {
	                                "id": "clj6ub97z000w356waoshpzjv",
	                                "title": "Corte",
	                                "matchTitle": "5"
	                            },
	                            {
	                                "id": "clj6ubglu000x356wba3k6t3p",
	                                "title": "Ampolla",
	                                "matchTitle": "6"
	                            }
	                        ],
	                        "feedback": ""
	                    },
	                    {
	                        "id": "cli1cu3uh0024356p2d6cdf74",
	                        "type": "MULTIPLE_RESPONSE",
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Tp33Md8ysaUzRQSc.jpg",
	                                "type": "image",
	                                "align": "left",
	                                "isSquare": false,
	                                "crushedKey": "HbTleVJNGl-zp44L_Tp33Md8ysaUzRQSc.jpg",
	                                "dimensions":
	                                {
	                                    "top": 100,
	                                    "left": 0,
	                                    "width": 1680,
	                                    "height": 806,
	                                    "originalWidth": 1680,
	                                    "originalHeight": 945
	                                },
	                                "originalUrl": "Leukoplast-Wound-Closure-Strips-Lifestyle-Small-Wound-Boy.jpg",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/ft29w9vGm3vyCjBa-Leukoplast-Wound-Closure-Strips-Lifestyle-Small-Wound-Boy.jpg",
	                                    "type": "image",
	                                    "align": "left",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/GMt9ax8CIP-L9Ah4.jpg",
	                                    "originalUrl": "Leukoplast-Wound-Closure-Strips-Lifestyle-Small-Wound-Boy.jpg",
	                                    "useCrushedKey": true
	                                },
	                                "useCrushedKey": true
	                            }
	                        },
	                        "title": "<p><span style=\"font-size: 24px;\">¿Qué es cierto acerca de la cicatrización de heridas por intención primaria?</span><span style=\"font-size: 22px;\">&nbsp;</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas a continuación:</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "cli1cu3ul0025356p1yq1w4ho",
	                                "title": "<p><span style=\"font-size: 22px;\">Ocurre cuando los bordes de una herida están cerca uno del otro, como en heridas quirúrgicas, laceraciones y cortes.</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli1cu3ul0027356p2qfxr9no",
	                                "title": "<p><span style=\"font-size: 22px;\">Es común para heridas más grandes o de forma irregular, o heridas con pérdida significativa de tejido.</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli1cu3ul0028356psgp7yi23",
	                                "title": "<p><span style=\"font-size: 22px;\">Es típico para heridas superficiales que involucran solo la epidermis y la dermis.</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli1cu3ul0026356ptgqaoji5",
	                                "title": "<p><span style=\"font-size: 22px;\">La herida sana con mínima formación de cicatrices.</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli1cwai4009s356p9v85t8w9",
	                                "title": "<p><span style=\"font-size: 22px;\">La herida puede tardar más en sanar, causar cicatrices y tener un mayor riesgo de complicaciones.</span></p>"
	                            }
	                        ],
	                        "correct": "",
	                        "corrects":
	                        [
	                            "cli1cu3ul0025356p1yq1w4ho",
	                            "cli1cu3ul0026356ptgqaoji5",
	                            "cli1cu3ul0028356psgp7yi23"
	                        ],
	                        "feedback": ""
	                    },
	                    {
	                        "id": "cli04m66e006k356pf07xfruc",
	                        "type": "MULTIPLE_RESPONSE",
	                        "title": "<p><span style=\"font-size: 24px;\">¿Cuáles de estos factores afectan la condición de la piel?</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas a continuación:</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "cli04m66h006l356pangbfv7d",
	                                "title": "<p><span style=\"font-size: 22px;\">Edad</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04m66h006n356pmz198k5n",
	                                "title": "<p><span style=\"font-size: 22px;\">Nutrición</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04m66h006o356p69bz99qz",
	                                "title": "<p><span style=\"font-size: 22px;\">Enfermedades subyacentes</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04m66h006m356pqschbryq",
	                                "title": "<p><span style=\"font-size: 22px;\">Factores psicosociales</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04nx7q00bd356phuzznf91",
	                                "title": "<p><span style=\"font-size: 22px;\">Género</span></p>"
	                            },
	                            {
	                                "id": "cli04oasa00c6356p7enurczp",
	                                "title": "<p><span style=\"font-size: 22px;\">Tono de piel</span></p>"
	                            },
	                            {
	                                "id": "cli04okve00ch356pt9jr5je9",
	                                "title": "<p><span style=\"font-size: 22px;\">Dolor</span></p>"
	                            },
	                            {
	                                "id": "cli04q9ea00hq356pl58iyxsg",
	                                "title": "<p><span style=\"font-size: 22px;\">Ciertos medicamentos</span></p>"
	                            }
	                        ],
	                        "correct": "cli04m66h006l356pangbfv7d",
	                        "corrects":
	                        [
	                            "cli04m66h006l356pangbfv7d",
	                            "cli04m66h006m356pqschbryq",
	                            "cli04okve00ch356pt9jr5je9",
	                            "cli04q9ea00hq356pl58iyxsg",
	                            "cli04m66h006o356p69bz99qz",
	                            "cli04m66h006n356pmz198k5n"
	                        ],
	                        "feedback": ""
	                    },
	                    {
	                        "id": "clj5d72g0001x356rae4l3ydf",
	                        "type": "MULTIPLE_RESPONSE",
	                        "media":
	                        {
	                            "image":
	                            {
	                                "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/iJSAMjAnw0Fx68yF.png",
	                                "type": "image",
	                                "align": "left",
	                                "isSquare": false,
	                                "crushedKey": "D8yxDcUxJxM0MY-2_iJSAMjAnw0Fx68yF.png",
	                                "dimensions":
	                                {
	                                    "top": 16,
	                                    "left": 0,
	                                    "width": 1200,
	                                    "height": 671,
	                                    "originalWidth": 1200,
	                                    "originalHeight": 720
	                                },
	                                "originalUrl": "wound types question.png",
	                                "originalImage":
	                                {
	                                    "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/MyzOwEOVYfcygQuF-wound%2520types%2520question.png",
	                                    "type": "image",
	                                    "align": "left",
	                                    "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Zch6xNt0Bw48AcyS.png",
	                                    "originalUrl": "wound types question.png",
	                                    "useCrushedKey": true
	                                },
	                                "useCrushedKey": true
	                            }
	                        },
	                        "title": "<p><span style=\"font-size: 24px;\">¿Cuáles de estas heridas son agudas?</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas a continuación.</span></p>",
	                        "answers":
	                        [
	                            {
	                                "id": "cli04m66h006l356pangbfv7d",
	                                "title": "<p><span style=\"font-size: 22px;\">1</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04m66h006n356pmz198k5n",
	                                "title": "<p><span style=\"font-size: 22px;\">2</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04m66h006o356p69bz99qz",
	                                "title": "<p><span style=\"font-size: 22px;\">3</span></p>",
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04m66h006m356pqschbryq",
	                                "title": "<p><span style=\"font-size: 22px;\">4</span></p>",
	                                "correct": true,
	                                "feedback": ""
	                            },
	                            {
	                                "id": "cli04nx7q00bd356phuzznf91",
	                                "title": "<p><span style=\"font-size: 22px;\">5</span></p>"
	                            },
	                            {
	                                "id": "clj5eyjso003u356ra3wgqi4c",
	                                "title": "<p><span style=\"font-size: 22px;\">6</span></p>"
	                            }
	                        ],
	                        "correct": "cli04m66h006l356pangbfv7d",
	                        "corrects":
	                        [
	                            "cli04m66h006m356pqschbryq",
	                            "cli04m66h006o356p69bz99qz",
	                            "cli04m66h006n356pmz198k5n",
	                            "cli04nx7q00bd356phuzznf91"
	                        ],
	                        "feedback": ""
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {
	                    "retryCount": -1,
	                    "passingScore": 85,
	                    "revealAnswers": "all",
	                    "passToContinue": false,
	                    "shuffleAnswerChoices": false,
	                    "randomizeQuestionOrder": true
	                },
	                "duplicatedFromId": "",
	                "deleted": false,
	                "createdAt": "2022-08-08T12:24:30.112Z",
	                "updatedAt": "2024-02-05T15:53:21.110Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": false,
	                "headerImage":
	                {}
	            },
	            {
	                "id": "z-63dyFk255HQCO240IvSgp0d0VZC24A",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "¡Bien hecho!",
	                "description": "",
	                "type": "blocks",
	                "icon": "Article",
	                "items":
	                [
	                    {
	                        "id": "cl1v0rioj00063c5xna9scnfk",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cl1v0rioj00073c5x75oqdb7o",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/eLGlPGIv5fmqX8DU.jpg",
	                                        "type": "image",
	                                        "isSquare": false,
	                                        "crushedKey": "L3hTqVzj6EgyqTuX_eLGlPGIv5fmqX8DU.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 58,
	                                            "left": 0,
	                                            "width": 1680,
	                                            "height": 591,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 937
	                                        },
	                                        "originalUrl": "Spool_Lifestyle_Pharmacy.png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Mfrbka-24Jn8zGhV-Spool_Lifestyle_Pharmacy.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/-UMqQtq0P-nySv1h.jpg",
	                                            "originalUrl": "Spool_Lifestyle_Pharmacy.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p><strong>¡Bien hecho!</strong> Has completado con éxito este módulo sobre el cuidado de heridas. Ahora puedes salir del módulo o continuar con la lista de referencias.</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "opacity": 0.4,
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cku8spgyz00gl386ilzk3tt50",
	                        "type": "interactive",
	                        "items":
	                        [
	                            {
	                                "id": "cku8rl5qx000p386i1ehfwql0",
	                                "type": "exit-course",
	                                "label": "SALIR",
	                                "description": "",
	                                "destination": "exit-course"
	                            }
	                        ],
	                        "family": "buttons",
	                        "variant": "button",
	                        "settings":
	                        {
	                            "paddingTop": 5,
	                            "paddingBottom": 5,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cli2vpk8x0002356pg6h8hsxq",
	                        "type": "divider",
	                        "items":
	                        [
	                            {
	                                "id": "cli2vpk8x0003356pbph3tzg6",
	                                "type": "",
	                                "title": "Lista de referencias",
	                                "buttonColor": "brand",
	                                "completeHint": "Complete the content above before moving on."
	                            }
	                        ],
	                        "family": "continue",
	                        "variant": "continue",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": "LIGHT",
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {},
	                "duplicatedFromId": "arEwMnP9-PDVNH1Zwn9ro3tavZLbw1lI",
	                "deleted": false,
	                "createdAt": "2021-11-29T14:15:43.266Z",
	                "updatedAt": "2023-06-29T11:41:24.078Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": null,
	                "headerImage":
	                {}
	            },
	            {
	                "id": "Uf8mCQJOruVml2ZWcw_flqXLYJZhWOz1",
	                "originalId": null,
	                "author": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "selectedAuthorId": "none",
	                "courseId": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6",
	                "title": "Referencias",
	                "description": "",
	                "type": "blocks",
	                "icon": "Article",
	                "items":
	                [
	                    {
	                        "id": "cl1v0rioj00063c5xna9scnfk",
	                        "type": "image",
	                        "items":
	                        [
	                            {
	                                "id": "cl1v0rioj00073c5x75oqdb7o",
	                                "media":
	                                {
	                                    "image":
	                                    {
	                                        "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/xtLFJtP6dseQwYfT.jpg",
	                                        "type": "image",
	                                        "isSquare": false,
	                                        "crushedKey": "ClAMuIOaUNacG5KE_xtLFJtP6dseQwYfT.jpg",
	                                        "dimensions":
	                                        {
	                                            "top": 194,
	                                            "left": 0,
	                                            "width": 1680,
	                                            "height": 594,
	                                            "originalWidth": 1680,
	                                            "originalHeight": 1120
	                                        },
	                                        "originalUrl": "Leukoplast_Eco_01687.png",
	                                        "originalImage":
	                                        {
	                                            "key": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/Tux96XsONX5t_5L1-Leukoplast_Eco_01687.png",
	                                            "type": "image",
	                                            "crushedKey": "rise/courses/Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6/lHwHoryCEMzfX-Xz.jpg",
	                                            "originalUrl": "Leukoplast_Eco_01687.png",
	                                            "useCrushedKey": true
	                                        },
	                                        "useCrushedKey": true
	                                    }
	                                },
	                                "caption": "<p>Las siguientes publicaciones se han utilizado como referencias a lo largo del módulo</p>",
	                                "paragraph": ""
	                            }
	                        ],
	                        "family": "image",
	                        "variant": "text overlay",
	                        "settings":
	                        {
	                            "opacity": 0.4,
	                            "paddingTop": 0,
	                            "zoomOnClick": true,
	                            "opacityColor": "#000000",
	                            "paddingBottom": 0,
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    },
	                    {
	                        "id": "cllxcwrbp000h3577tjcsa4aj",
	                        "type": "text",
	                        "items":
	                        [
	                            {
	                                "id": "cllxcwrbr000i3577p6ried1s",
	                                "paragraph": "<p><span style=\"font-size: 24px;\">1. Khalid KA et al. Aging and wound healing of the skin: a review of clinical and pathophysiological hallmarks. <em>Life (Basel)</em>. 2022; 12(12):2142.</span></p><p><span style=\"font-size: 24px;\">2. Guo S &amp; Dipietro LA. Factors affecting wound healing. <em>J Dent Res</em>. 2010; 89(3):219-229.</span></p><p><span style=\"font-size: 24px;\">3. Khalil H et al. Medications affecting healing: an evidence-based analysis. <em>Int Wound J</em>. 2017; 14(6):1340-1345.</span></p><p><span style=\"font-size: 24px;\">4. Quain AM &amp; Khardori NM. Nutrition in wound care management: a comprehensive overview. <em>Wounds</em>. 2015; 27(12):327-335.</span></p><p><span style=\"font-size: 24px;\">5. Walburn J et al. Psychological stress and wound healing in humans: a systematic review and meta-analysis. <em>J Psychosom Res</em>. 2009; 67(3):253-271.</span></p><p><span style=\"font-size: 24px;\">6. Upton D &amp; Solowiej K. Pain and stress as contributors to delayed wound healing. <em>Wound Pract. and Res</em>. 2010; 18(3):114-122.</span></p><p><span style=\"font-size: 24px;\">7. Larouche J et al. Immune regulation of skin wound healing: mechanisms and novel therapeutic targets. <em>Adv Wound Care (New Rochelle)</em>. 2018; 7(7):209-231.</span></p><p><span style=\"font-size: 24px;\">8. Raziyeva K et al. Immunology of acute and chronic wound healing. <em>Biomolecules</em>. 2021; 11(5):700.</span></p><p><span style=\"font-size: 24px;\">9.&nbsp;</span><span style=\"font-size: 24px;\">Sorg H et al. Skin wound healing: an update on the current knowledge and concepts. <em>Eur Surg Res</em>. 2017; 58(1-2):81&ndash;94.</span></p><p><span style=\"font-size: 24px;\">10. Britto EJ et al. Wound dressings. <em>StatPearls [Internet]</em>. 2023. Available from: https://www.ncbi.nlm.nih.gov/books/NBK470199/</span></p><p><span style=\"font-size: 24px;\">11. Niederst&auml;tter IM et al. Surgical strategies to promote cutaneous healing. <em>Medical Sciences</em>. 2021; 2(9):45.</span></p><p><span style=\"font-size: 24px;\">12. Verdolino DV et al. Wound dressings: curbing inflammation in chronic wound healing. <em>Emerg Top Life Sci</em>.&nbsp;2021; 5(4):523&ndash;537.</span></p><p><span style=\"font-size: 24px;\">13. Tappenden KA et al. Critical role of nutrition in improving quality of care: an interdisciplinary call to action to address adult hospital malnutrition. <em>Journal of the Academy of Nutrition and Dietetics</em>. 2013; 9(113):1219-1237.</span></p><p><span style=\"font-size: 24px;\">14. Kruse C et al. (2017). The effect of ph on cell viability, cell migration, cell proliferation, wound closure, and wound reepithelialization: in vitro and in vivo study. <em>Wound Rep and Reg</em>. 2017; 2(25):260-269.</span></p><p><span style=\"font-size: 24px;\">15. Peacock HM et al. Scar-free cutaneous wound healing in the leopard gecko, Eublepharis macularius. <em>J Anat</em>. 2015; 227(5):596-610.</span></p><p><span style=\"font-size: 24px;\">16. International Wound Infection Institute (IWII) Wound. Infection in clinical practice. <em>Wounds International</em>. 2016.</span></p><p><span style=\"font-size: 24px;\">The references are partially detailed. To gain a broad overview of dermatology, consider general dermatology textbooks such as Fitzpatrick&#39;s Dermatology (Kang S et al. Fitzpatrick&#39;s Dermatology. 9th ed. <em>McGraw Hill Professional</em>. 2018.).</span></p>"
	                            }
	                        ],
	                        "family": "text",
	                        "variant": "paragraph",
	                        "settings":
	                        {
	                            "cardMode": "WHITE",
	                            "paddingTop": 3,
	                            "accentColor": null,
	                            "paddingBottom": 3,
	                            "backgroundType": "LIGHT",
	                            "backgroundColor": "",
	                            "entranceAnimation": true
	                        }
	                    }
	                ],
	                "media":
	                {},
	                "piles":
	                [],
	                "settings":
	                {},
	                "duplicatedFromId": "BbO7I2lMdMWToVrdPnR82stmcOdl0Otc",
	                "deleted": false,
	                "createdAt": "2022-08-08T09:23:46.938Z",
	                "updatedAt": "2024-01-18T13:47:19.147Z",
	                "lastUpdatedBy": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "ready": true,
	                "position": null,
	                "transferredAt": null,
	                "isPartnerContentAuthor": null,
	                "headerImage":
	                {}
	            }
	        ],
	        "jobs":
	        [],
	        "labelSetId": "vsB-kUOtq5l7HkElQ8hasPAQ",
	        "deleted": false,
	        "createdAt": "2023-06-12T07:36:24.355Z",
	        "updatedAt": "2024-02-05T15:53:50.865Z",
	        "markComplete": false,
	        "isDefault": false,
	        "ready": true,
	        "reviewId": "f5cd1f12-7981-481b-95f3-ec198cde1263",
	        "exportSettings":
	        {
	            "title": "Pharmacy Wound Care",
	            "format": "zip",
	            "quizId": "8Mri9EoFJut2NouMkjd3UoEo8F32EZ17",
	            "target": "scorm12",
	            "shareId": "3Tf1qNACA2IqUsCKdkoPw8uHDoBqXSAd",
	            "activeLMS": 0,
	            "reporting": "passed-incomplete",
	            "exportType": "lms",
	            "identifier": "Ds8rwtnkMdQ7Gk9WfVDNu5EPeCL0J_O6_rise",
	            "targetName": "SCORM 1.2",
	            "storylineId": null,
	            "completeWith": "quiz",
	            "quizComplete": true,
	            "activeEdition": 0,
	            "disableCoverPage": false,
	            "enableExitCourse": false,
	            "resetLearnerData": false,
	            "updateResumeData": true,
	            "storylineComplete": false,
	            "completionPercentage": 100
	        },
	        "headingTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
	        "bodyTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
	        "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
	        "sidebarMode": "open",
	        "tenantId": "8db6028c-93bd-4564-a695-adf0dd261aab",
	        "showLessonCount": true,
	        "showNavigationButtons": true,
	        "allowSearch": true,
	        "animateBlockEntrance": true,
	        "transferredAt": "2023-02-02T14:11:07.832Z",
	        "allowCopy": false,
	        "enableVideoPlaybackSpeed": true,
	        "jobType": null,
	        "partnerContentId": null,
	        "cardImage":
	        {},
	        "theme":
	        {
	            "themeId": "classic",
	            "navigation": true,
	            "showAuthor": true,
	            "allowSearch": true,
	            "colorAccent": "#e40428",
	            "blockCorners": "ROUNDED",
	            "buttonScheme": "LIGHT",
	            "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
	            "coverPageType": "LEFT_OVERLAY",
	            "bodyTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
	            "navigationType": "SIDEBAR",
	            "blockPaddingTop": 30,
	            "coverImageAlpha": 50,
	            "navigationStyle": "LIGHT_IMAGE",
	            "showLessonCount": true,
	            "lessonHeaderSize": "MEDIUM",
	            "buttonInlineStyle": "ROUNDED",
	            "coverImageDefault": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg",
	            "headingTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
	            "lessonHeaderColor": null,
	            "lessonHeaderStyle": "LIGHT",
	            "sidebarStartsOpen": true,
	            "blockPaddingBottom": 30,
	            "markLessonsComplete": false,
	            "animateBlockEntrance": true,
	            "navigationRestricted": false,
	            "buttonNavigationStyle": "FULL",
	            "showNavigationButtons": true,
	            "compactShowLessonCount": true,
	            "lessonHeaderImageAlpha": 0.6,
	            "lessonHeaderImageColor": "DARK",
	            "navigationOverlayImage": "https://articulateusercontent.com/assets/rise/assets/themes/example-header-image.jpg",
	            "enableVideoPlaybackSpeed": true,
	            "navigationOverlayImageAlpha": 0.6,
	            "navigationOverlayImageColor": "DARK"
	        },
	        "lessonHeaderImage":
	        {},
	        "overlayNavigationImage":
	        {},
	        "type": null,
	        "lastImportedXliff": null,
	        "features":
	        {
	            "rise-authoring-controls": true,
	            "rise-auto-calc-contrast": true,
	            "rise-block-controls-phase-one": true,
	            "rise-course-navigation": true,
	            "rise-course-themes": true,
	            "rise-randomize-block-bg-images": true,
	            "rise-theme-image-overlay-updates": true
	        },
	        "authors":
	        [
	            {
	                "id": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
	                "authorName": "Malina Andrén"
	            },
	            {
	                "id": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
	                "authorName": "Lisa Agerbæk"
	            },
	            {
	                "id": "aid|188dd1f1-afab-48b7-a744-b322fd5ab0c3",
	                "authorName": "Lotten Andrér"
	            },
	            {
	                "id": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
	                "authorName": "Olga Kuzmenko"
	            }
	        ],
	        "bodyTypeface": "Open Sans",
	        "headingTypeface": "Open Sans",
	        "uiTypeface": "Lato",
	        "lmsOptions":
	        {
	            "enableExitCourse": false,
	            "disableCoverPage": false
	        },
	        "mondrian":
	        {}
	    },
	    "labelSet":
	    {
	        "id": "vsB-kUOtq5l7HkElQ8hasPAQ",
	        "author": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
	        "name": "Dynacast AS - english - Transferred",
	        "defaultId": null,
	        "defaultSet": false,
	        "labels":
	        {
	            "result": "resultado",
	            "search": "buscar",
	            "results": "resultados",
	            "quizNext": "SIGUIENTE",
	            "tabGroup": "Etiqueta",
	            "codeGroup": "Codigo",
	            "noResults": "no hay resultados para",
	            "noteGroup": "Nota",
	            "quizScore": "Tu puntuación",
	            "quizStart": "INICIAR PRUEBA",
	            "courseExit": "SALIR DEL CURSO",
	            "courseHome": "Inicio",
	            "lessonName": "Módulo",
	            "quizSubmit": "ENVIAR",
	            "quoteGroup": "Cita",
	            "salutation": "👋 ¡Adios!",
	            "buttonGroup": "Botón",
	            "courseStart": "INICIAR CURSO",
	            "embedViewOn": "VER EN",
	            "exitMessage": "Ya puede salir de esta página.",
	            "quizCorrect": "",
	            "quizPassing": "PASAR",
	            "quizResults": "Resultado de la prueba",
	            "courseResume": "REANUDAR EL CURSO",
	            "processStart": "INICIAR",
	            "processSwipe": "Desliza para continuar",
	            "quizContinue": "Continuar",
	            "quizLandmark": "Encuesta",
	            "quizQuestion": "Pregunta",
	            "courseDetails": "DETALLES",
	            "embedReadMore": "leer más",
	            "feedbackGroup": "Comentario",
	            "quizIncorrect": "",
	            "quizTakeAgain": "HAZLO OTRA VEZ",
	            "sortingReplay": "REPETIR",
	            "accordionGroup": "acordeón",
	            "embedLinkGroup": "Contenido web integrado",
	            "lessonComplete": "COMPLETADO",
	            "statementGroup": "Declaración",
	            "storylineGroup": "Argumento",
	            "attachmentGroup": "Archivo adjunto",
	            "embedPhotoGroup": "Foto integrada",
	            "embedVideoGroup": "Video integrado",
	            "playButtonLabel": "Iniciar",
	            "processComplete": "Completo",
	            "processLandmark": "Proceso",
	            "processNextStep": "PRÓXIMO ETAPA",
	            "processStepName": "Etapa",
	            "seekSliderLabel": "Buscar",
	            "sortingLandmark": "actividad de clasificación",
	            "audioPlayerGroup": "Reproductor de música. Puede utilizar la barra espaciadora para alternar la reproducción y las teclas de flecha para desplazarse.",
	            "buttonStackGroup": "Monton de botones",
	            "embedPlayerGroup": "Reproductor multimedia integrado",
	            "lessonRestricted": "Los módulos deben completarse en orden",
	            "pauseButtonLabel": "Pausar",
	            "scenarioComplete": "Escenario completo",
	            "scenarioContinue": "CONTINUAR",
	            "scenarioTryAgain": "INTENTAR OTRA VEZ",
	            "textOnImageGroup": "Texto en imagen",
	            "timelineLandmark": "Línea de tiempo",
	            "urlEmbedLandmark": "URL/Embed",
	            "videoPlayerGroup": "Reproductor de video. Puede utilizar la barra espaciadora para alternar la reproducción y las teclas de flecha para desplazarse.",
	            "blocksClickToFlip": "Haga clic en las tarjetas para voltear",
	            "blocksPreposition": "de",
	            "bulletedListGroup": "Lista con viñetas",
	            "checkboxListGroup": "lista de verificación",
	            "imageAndTextGroup": "Imagen y texto",
	            "imageGalleryGroup": "Galería de imágenes",
	            "lessonPreposition": "de",
	            "numberedListGroup": "lista numerada",
	            "processLessonName": "Módulo",
	            "processStartAgain": "EMPEZAR DE NUEVO",
	            "scenarioStartOver": "COMENZAR DE NUEVO",
	            "courseSkipToLesson": "SALTAR AL MÓDULO",
	            "flashcardBackLabel": "dorso de la tarjeta didáctica",
	            "flashcardGridGroup": "Cuadrícula de tarjetas",
	            "nextFlashCardLabel": "Siguiente tarjeta",
	            "flashcardFrontLabel": "Frente de la tarjeta",
	            "flashcardStackGroup": "Pila de tarjetas didácticas",
	            "knowledgeCheckGroup": "verificación de conocimientos",
	            "sortingCardsCorrect": "Tarjetas correctas",
	            "hamburgerButtonLabel": "Barra lateral de descripción general del curso",
	            "lessonHeaderLandmark": "Encabezado del Módulo",
	            "numberedDividerGroup": "Divisor numerado",
	            "lessonContentLandmark": "Contenido del módulo",
	            "lessonSidebarLandmark": "Barra lateral del módulo",
	            "quizAnswerPlaceholder": "Escribe tu respuesta aquí",
	            "labeledGraphicLandmark": "Gráfico etiquetado",
	            "previousFlashCardLabel": "Ficha anterior",
	            "processStepPreposition": "de",
	            "overviewPageTitleSuffix": "Descripción general",
	            "quizAcceptableResponses": "Respuestas aceptables",
	            "quizRequirePassingScore": "Debe pasar la prueba antes de continuar.",
	            "timelineCardGroupPrefix": "Tarjeta de línea de tiempo",
	            "labeledGraphicBubbleLabel": "Burbuja gráfica etiquetada",
	            "labeledGraphicMarkerLabel": "Marcador gráfico etiquetado",
	            "labeledGraphicNextMarkerLabel": "Siguiente marcador",
	            "labeledGraphicPreviousMarkerLabel": "Marcador anterior",
	            "a11yAnswerLive": "Tu respuesta",
	            "a11yAuthorPrefix": "Por",
	            "a11yBlockChartBar": "Gráfico de barras",
	            "a11yBlockChartLine": "Gráfico de linea",
	            "a11yBlockChartPie": "Gráfico circular",
	            "a11yBlockCode": "Código",
	            "a11yBlockEmbed": "Contenido integrado",
	            "a11yBlockFlashcardBack": "reverso de la tarjeta",
	            "a11yBlockFlashcardFront": "Frente de la tarjeta",
	            "a11yBlockFlashcardGrid": "Cuadrícula de tarjetas",
	            "a11yBlockFlashcardStack": "Carrusel de tarjetas",
	            "a11yBlockKnowledgeCheck": "verificación de conocimientos",
	            "a11yBlockKnowledgeCheckFIB": "Verificación de conocimientos: complete el espacio en blanco",
	            "a11yBlockKnowledgeCheckMC": "Verificación de conocimientos: opción múltiple",
	            "a11yBlockKnowledgeCheckM": "Verificación de conocimientos: coincidencia",
	            "a11yBlockKnowledgeCheckMR": "Verificación de conocimientos: respuesta múltiple",
	            "a11yBlockQuoteCarousel": "Carrusel de citas",
	            "a11yBlockStoryline": "Línea argumental",
	            "a11yBlockTimeline": "Cronología",
	            "a11yCarouselNext": "Siguiente",
	            "a11yCarouselPrevious": "Anterior",
	            "a11yCorrectLive": "Respuesta correcta",
				"a11yExcelIcon": "Hoja de cálculo de Microsoft Excel",
				"a11yFileIcon": "Archivo",
				"a11yGroupAudioPlayer": "Reproductor de audio",
				"a11yGroupVideoPlayer": "Reproductor de vídeo",
				"a11yLabeledGraphicBlock": "Gráfico etiquetado",
				"a11yLabeledGraphicButtonMarker": "Marcador",
				"a11yLabeledGraphicIconPlus": "Más",
				"a11yLabeledGraphicIconDot": "Punto",
				"a11yLabeledGraphicIconInformation": "Información",
				"a11yLabeledGraphicIconQuestion": "Signo de interrogación",
				"a11yLabeledGraphicIconCheck": "Marca de verificación",
				"a11yLabeledGraphicIconX": "X",
				"a11yLabeledGraphicIconHeart": "Corazón",
				"a11yLabeledGraphicIconPin": "Fijar mapa",
				"a11yLabeledGraphicIconArrowLeft": "Flecha izquierda",
				"a11yLabeledGraphicIconArrowRight": "Flecha derecha",
				"a11yLabeledGraphicIconArrowUp": "Flecha hacia arriba",
				"a11yLabeledGraphicIconArrowDown": "Flecha hacia abajo",
				"a11yLabeledGraphicIconArrowUpLeft": "Flecha arriba a la izquierda",
				"a11yLabeledGraphicIconArrowUpRight": "Flecha arriba derecha",
				"a11yLabeledGraphicIconArrowDownLeft": "Flecha abajo izquierda",
				"a11yLabeledGraphicIconArrowDownRight": "Flecha abajo derecha",
				"a11yLabeledGraphicUnviewed": "No visto",
				"a11yLabeledGraphicViewed": "Visto",
				"a11yMediaPause": "Pausa",
				"a11yMediaPlay": "Reproducir",
				"a11yMediaSeek": "Buscar",
				"a11yNavigationMenuClose": "Cerrar menú de navegación",
				"a11yNavigationMenuOpen": "Abrir menú de navegación",
				"a11yPageMarker": "Parte superior de la página",
				"a11yPDFIcon": "archivo PDF",
				"a11yPPTIcon": "Presentación de PowerPoint",
				"a11yQuizFailed": "Error",
				"a11yQuizFeedback": "Comentarios",
				"a11yQuizPassed": "Aprobado",
				"a11yQuizReviewCorrectlyChecked": "Comprobado correctamente",
				"a11yQuizReviewCorrectlySelected": "Seleccionado correctamente",
				"a11yQuizReviewCorrectlyUnchecked": "Correcto sin marcar",
				"a11yQuizReviewCorrectlyUnselected": "No seleccionado correctamente",
				"a11yQuizReviewIncorrectlyChecked": "Verificado incorrectamente",
				"a11yQuizReviewIncorrectlySelected": "Seleccionado incorrectamente",
				"a11yQuizReviewIncorrectlyUnchecked": "Desmarcado incorrectamente",
				"a11yQuizReviewIncorrectlyUnselected": "No seleccionado incorrectamente",
				"a11yRegionMainLesson": "Contenido de la lección",
				"a11yRegionMainOverview": "Descripción general del curso",
				"a11yRegionNavLesson": "Menú de navegación",
				"a11yRegionNavOverview": "Tabla de contenidos",
				"a11yRestrictedNav": "Esta lección no está disponible actualmente",
				"a11yRTFIcon": "Archivo de texto enriquecido",
				"a11ySearchClose": "Cerrar menú de búsqueda",
				"a11ySearchInput": "Buscar",
				"a11ySearchOpen": "Abrir menú de búsqueda",
				"a11yStatusContinued": "Continuación",
				"a11yStatusAdditionalContent": "Se ha cargado contenido adicional",
				"a11yUnzoomImage": "Reducir imagen",
				"a11yWordIcon": "Documento de Microsoft Word",
				"a11yZipIcon": "Archivo comprimido",
				"a11yZoomImage": "Ampliar imagen",
				"quizRestart": "Reiniciar",
				"progressPieUnstarted": "No iniciado",
				"progressPieCompleted": "Completado",
				"progressPieClickToComplete": "Haga clic para completar",
				"progressPieClickToReset": "Haga clic para restablecer",
				"progressPieQuizFailed": "Error"
	        },
	        "deleted": false,
	        "createdAt": "2022-04-13T08:55:03.285Z",
	        "updatedAt": "2022-04-13T08:55:40.602Z",
	        "iso639Code": "en",
	        "transferredAt": "2023-09-13T07:05:25.000Z"
	    },
	    "fonts":
	    [
	        {
	            "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
	            "name": "Open Sans",
	            "default": true,
	            "key": "assets/rise/fonts/OpenSans-Italic.woff",
	            "style": "italic",
	            "weight": "400"
	        },
	        {
	            "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
	            "name": "Open Sans",
	            "default": true,
	            "key": "assets/rise/fonts/OpenSans-Bold.woff",
	            "style": "normal",
	            "weight": "700"
	        },
	        {
	            "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
	            "name": "Open Sans",
	            "default": true,
	            "key": "assets/rise/fonts/OpenSans-Regular.woff",
	            "style": "normal",
	            "weight": "400"
	        },
	        {
	            "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
	            "name": "Open Sans",
	            "default": true,
	            "key": "assets/rise/fonts/OpenSans-Light.woff",
	            "style": "normal",
	            "weight": "300"
	        },
	        {
	            "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
	            "name": "Lato",
	            "default": true,
	            "key": "assets/rise/fonts/Lato-Black.woff",
	            "style": "normal",
	            "weight": "900"
	        },
	        {
	            "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
	            "name": "Lato",
	            "default": true,
	            "key": "assets/rise/fonts/Lato-Italic.woff",
	            "style": "italic",
	            "weight": "400"
	        },
	        {
	            "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
	            "name": "Lato",
	            "default": true,
	            "key": "assets/rise/fonts/Lato-Bold.woff",
	            "style": "normal",
	            "weight": "700"
	        },
	        {
	            "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
	            "name": "Lato",
	            "default": true,
	            "key": "assets/rise/fonts/Lato-Regular.woff",
	            "style": "normal",
	            "weight": "400"
	        },
	        {
	            "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
	            "name": "Lato",
	            "default": true,
	            "key": "assets/rise/fonts/Lato-Light.woff",
	            "style": "normal",
	            "weight": "300"
	        }
	    ],
	    "media":
	    []
	}
")