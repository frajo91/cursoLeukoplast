__resolveJsonp("course:und","{
  "course": {
    "id": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
    "originalId": null,
    "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
    "selectedAuthorId": "none",
    "color": "#e40428",
    "navigationMode": "free",
    "title": "Prevenção e tratamento de MARSI",
    "sharePassword": "",
    "description": "<p><span style=\"font-size: 24px;\">Aprenda sobre a prevenção e o manejo das lesões cutâneas relacionadas a adesivos médicos (MARSI), neste módulo de 20 minutos. Este módulo aborda medidas preventivas essenciais, além de dicas de tratamento e uma introdução à seleção de adesivos adequados.&nbsp;</span></p><p><span style=\"font-size: 24px;\">Você deve ser aprovado na prova de conhecimentos ao final para concluir o módulo. Todas as referências utilizadas no módulo estão listadas no último capítulo&nbsp;</span></p><p><br></p><p><span style=\"font-size: 18px;\">A orientação fornecida destina-se a ser utilizada como um guía informativo a ser considerado quando a organização tomar decisões clínicas e não constitui aconselhamento médico. As regras e regulamentações específicos do seu país ou instalação devem ser considerados e seguidos adequadamente.</span></p><p><br></p>",
    "shareId": "4CygSh496UxqWy-4wQr6QjcEFSgSvIoS",
    "copyOf": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
    "order": "1711616348565",
    "fonts": null,
    "media": {
      "tmp": {
        "image": {
          "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vO9WolFej6gaGKHR-Essity_logo_colour_RGB.png",
          "type": "image",
          "width": 140,
          "height": 59,
          "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/QVdBWF7borwCOYOa.png",
          "originalUrl": "Essity_logo_colour_RGB.png",
          "useCrushedKey": true
        }
      },
      "image": {
        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/0YYzZWLzMRZX3irv-181120_Leukoplast_Logo_RGB.png",
        "type": "image",
        "width": 174,
        "height": 40,
        "crushedKey": "cEkvQRvdyWQQgP7I.png",
        "originalUrl": "181120_Leukoplast_Logo_RGB.png",
        "useCrushedKey": true
      }
    },
    "coverImage": {
      "alpha": 50,
      "media": {
        "image": {
          "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/3FS3sqGwcYFJiy46-Leukoplast_STEPS_skin%2520tear_clinical%2520image_05-reversed.png",
          "crushedKey": "X--f5HkYfACahWvYol.jpg",
          "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_05-reversed.png",
          "useCrushedKey": true,
          "src": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg"
        }
      },
      "displaySidebar": true
    },
    "lessons": [
      {
        "id": "jhZ60VAJncFYFc4Cqk0Vfm1HV7aaq0AG",
        "originalId": null,
        "author": "aid|56c37a65-15ab-4176-9fd9-227401c4aab4",
        "selectedAuthorId": "aid|56c37a65-15ab-4176-9fd9-227401c4aab4",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Como podemos prevenir o MARSI?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cliapnnn1002j356ry68tsdct",
            "type": "image",
            "items": [
              {
                "id": "cliapnnn1002k356r1wkungiq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/3gw-EcaHF-66xSvi.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast%20STEPS_%20Lifestyle%20visual_woman%20and%20doctor%20consultation.jpg",
                    "dimensions": {
                      "top": 670,
                      "left": 0,
                      "width": 1582,
                      "height": 451,
                      "originalWidth": 1680,
                      "originalHeight": 1121
                    },
                    "originalUrl": "Leukoplast STEPS_ Lifestyle visual_woman and doctor consultation.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/w0nH7B5nBCE7QfXT-Leukoplast%2520STEPS_%2520Lifestyle%2520visual_woman%2520and%2520doctor%2520consultation.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/NjkmjXWdTBgnp6dp.jpg",
                      "originalUrl": "Leukoplast STEPS_ Lifestyle visual_woman and doctor consultation.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Dado que a MARSI é em grande parte evitável, mas também subestimada<sup><span style=\"font-size: 14px;\">5,6,7,8</span></sup>, uma medida de prevenção é a educação dos profissionais de saúde, dos pacientes e dos cuidadores<span style=\"font-size: 14px;\"><sup>6,9</sup></span>.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.2,
              "cardMode": null,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cliej29lf000s356p5yupjui9",
            "type": "text",
            "items": [
              {
                "id": "cliej29lg000t356pi4qhggkm",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">A educação e a conscientização são os fatores-chave de sucesso para a prevenção de MARSI; é importante ter conhecimento sobre essas cinco medidas preventivas:</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsnu9y6j00ab3b74nk99dkcq",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/f8WWaFTQzL8rdTzW-preventive%2520measuresNEW2.png",
                "type": "image",
                "crushedKey": "preventive%20measuresNEW2.png",
                "originalUrl": "preventive measuresNEW2.png",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib25z601293b6xwo5tmu73",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 0,
              "accentColor": null,
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#E40428",
              "entranceAnimation": true
            }
          },
          {
            "id": "clskrg92q01ja3b7510lamrn7",
            "type": "image",
            "items": [
              {
                "id": "clskrg92q01jb3b75wgb4voyh",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/S31FpOfSmSrcSnZQ-Leukoplast%2520STEPS_lifestyle%2520visual_woman%2520garden-round.png",
                    "type": "image",
                    "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_woman%20garden-round.png",
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_woman garden-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Os pacientes de alto risco devem ser identificados</strong></span><span style=\"font-size: 14px;\"><sup>18</sup></span><span style=\"font-size: 24px;\">.  Além de faixas etárias</span><span style=\"font-size: 14px;\"><sup>9,10</sup></span><span style=\"font-size: 24px;\">&nbsp;específicas que são particularmente vulneráveis, devem ser considerados outros fatores de risco</span><span style=\"font-size: 14px;\"><sup>5</sup></span><span style=\"font-size: 24px;\">&nbsp;para MARSI:</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.4,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "paddingBottom": 1,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib3aqa014h3b6x3n4tffx8",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "risks-factors-icons_NOPROCESS_.png",
                "type": "image",
                "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/qrZDH8481FALuujG.png",
                "originalUrl": "risks-factors-icons_NOPROCESS_.png",
                "useCrushedKey": false
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 0,
              "accentColor": null,
              "markerColor": "",
              "zoomOnClick": true,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clia5nzvh0006356px6gzc3l9",
            "type": "image",
            "items": [
              {
                "id": "clia5nzvh0007356p54opwzc5",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/6M-QItQg1iZrKLdv-moisturise%2520picture.png",
                    "type": "image",
                    "crushedKey": "moisturise%20picture.png",
                    "originalUrl": "moisturise picture.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>O protocolo individualizado de cuidado da pele</strong> consiste em cuidar da pele e mantê-la hidratada</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 24px;\">&nbsp;para promover a integridade da pele, o que evita o aparecimento de feridas, assim como a MARSI. A pele hidratada pode ser alcançada tanto do interior quanto do exterior:</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "imageSize": "small",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "right",
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clibx9y60004w3c5y31dkxitx",
            "type": "image",
            "items": [
              {
                "id": "clibx9y61004z3c5yau96tpxw",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/78_RRIqp94lPCUam-nutrition_icon.png",
                    "type": "image",
                    "crushedKey": "nutrition_icon.png",
                    "originalUrl": "nutrition_icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Por meio de uma dieta equilibrada e ingerindo água suficiente</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              },
              {
                "id": "clibx9y6100503c5yj9wmyw5l",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/4Z6SLJMMMpxk2r9o-moisturise%2520icon.png",
                    "type": "image",
                    "crushedKey": "moisturise%20icon.png",
                    "originalUrl": "moisturise icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Por meio da aplicação diária de creme hidratante, protetor solar e do uso de emolientes em vez de sabonetes para proteger a pele</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsx6zvne01sy3b741m14nkcn",
            "type": "image",
            "items": [
              {
                "id": "clsx6zvne01sz3b744alhgx45",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/gYoLW_TkkVf0Newg-appropriate-adhesive-selectionNEW.png",
                    "type": "image",
                    "crushedKey": "appropriate-adhesive-selectionNEW.png",
                    "originalUrl": "appropriate-adhesive-selectionNEW.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>A seleção adequada do adesivo</strong> depende da integridade da pele do paciente, dos fatores de risco e das características do adesivo médico.&nbsp;</span></p><p><span style=\"font-size: 24px;\">Cada seleção deve sempre começar com uma avaliação completa da pele</span><span style=\"font-size: 14px;\"><sup>5,19</sup></span><span style=\"font-size: 24px;\">:</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.4,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljtqufit001j357065qswbzs",
            "type": "image",
            "items": [
              {
                "id": "cljtqufiu001o3570o2h6lbm0",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/y51Z7Z8XuNwClstm-inspect%2520icon.png",
                    "type": "image",
                    "crushedKey": "inspect%20icon.png",
                    "originalUrl": "inspect icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Inspecione:</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Inspecionar a pele visualmente e, quando necessário, também por palpação.</span></p>"
              },
              {
                "id": "cljtqufiu001p3570meoq54c1",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/EjbDgHvwoptzS0od-assess%2520icon.png",
                    "type": "image",
                    "crushedKey": "assess%20icon.png",
                    "originalUrl": "assess icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Avalie</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">B</span><span style=\"font-size: 22px;\">Busque sinais locais de irritação ou dano e avalie a pele com base na temperatura, cor, nível de umidade, fragilidade e integridade.</span></p>"
              },
              {
                "id": "cljtqufiu001q3570cxmg40i2",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/QuusY0wzboEXbhny-document%2520icon.png",
                    "type": "image",
                    "crushedKey": "document%20icon.png",
                    "originalUrl": "document icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Documentar</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Documente suas descobertas antes de iniciar a seleção de adesivos.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clktitzih00023578fcfqwoiz",
            "type": "image",
            "items": [
              {
                "id": "clktitzih00033578n949ixfc",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/UhQw0GAuQAlzV3Gu-apply%2520dressing.png",
                    "type": "image",
                    "crushedKey": "apply%20dressing.png",
                    "originalUrl": "apply dressing.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Boas técnicas de aplicação e remoção</strong> são essenciais, pois a pressão e a tensão durante a aplicação de um adesivo médico, ou a força mecânica gerada durante a remoção, podem causar MARSI. As áreas com risco de edema exigem intervalos mais curtos para a troca do curativo</span><span style=\"font-size: 14px;\"><sup>12</sup></span><span style=\"font-size: 24px;\">.&nbsp;</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "imageSize": "small",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "right",
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib8ccc01ex3b6xp9yc352z",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "paddingBottom": 0,
              "backgroundType": null,
              "backgroundColor": "#E40428",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib7orx01en3b6x7w8c14gf",
            "type": "text",
            "items": [
              {
                "id": "cli8v16z7000k3c5y4wh27za2",
                "paragraph": "<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><strong>Aplicação de adesivos médicos</strong></span><span style=\"font-size: 14px;\"><sup>6,10</sup></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsxdhixq00a83b74rdwj6jfy",
            "type": "image",
            "items": [
              {
                "id": "clsxdhixq00a93b74mpzwazfq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vcSaPgt4YbeRHnVb.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                    "dimensions": {
                      "top": 64,
                      "left": 0,
                      "width": 960,
                      "height": 960,
                      "originalWidth": 960,
                      "originalHeight": 1080
                    },
                    "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/TrPfNs4FtkXD08iT-Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/KHqCJ5JERRQudQPG.jpg",
                      "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Escolha o produto correto com base na condição da pele e o tamanho correto com base na dimensão da ferida. Verifique se o paciente está confortável e comece limpando a ferida, desbridando-a e aparando os pelos conforme necessário para a ferida e o estado (é necessário adaptá-lo às diretrizes locais). Termine secando a pele com toques suaves. </span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "imagePosition": "right",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clsxdfpes009n3b74v0yk8dpn",
            "type": "image",
            "items": [
              {
                "id": "clsxdfpes009o3b748dza1m68",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/POjASIsHfNYRObaw.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_STEPS_skin%20tear_clinical%20image_05.jpg",
                    "dimensions": {
                      "top": 69,
                      "left": 208,
                      "width": 905,
                      "height": 876,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_05.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/US7Lr2mr-Z6KtDxH-Leukoplast_STEPS_skin%2520tear_clinical%2520image_05.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/03a5Z4_W7IyOYvoE.jpg",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_05.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Remova o revestimento de liberação e aplique o produto de acordo com as instruções de uso, diretamente sobre a ferida. Em caso de laceração da pele, marque uma seta no curativo para indicar a direção correta de remoção do curativo (adaptação necessária às diretrizes locais).</span></p>"
              },
              {
                "id": "clsxdfpes009p3b74dhwrc8wh",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/SskCOjlFcJjEDtM_.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast_STEPS_skin%20tear_clinical%20image_06.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 325,
                      "width": 944,
                      "height": 945,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_06.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/uPADK1oI0gU8U3Xk-Leukoplast_STEPS_skin%2520tear_clinical%2520image_06.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/IyfKOkbvMxTRRIXF.jpg",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_06.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Inicie a aplicação do centro para as bordas, evitando rugas e dobras. Aplique productos adesivos médicos elásticos com a orientação correta, caso seja esperada a ocorrência de inchaço. Não aplique curativos esticados ou com tensão.&nbsp;</span></p>"
              },
              {
                "id": "clsxdfpet009q3b744xuf59xu",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/oCAt1NeHkSoFhp18.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast_Ready_To_Use_Application_INT_NN%202.jpg",
                    "dimensions": {
                      "top": 345,
                      "left": 206,
                      "width": 735,
                      "height": 735,
                      "originalWidth": 960,
                      "originalHeight": 1080
                    },
                    "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN 2.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ffOZc0fRQgCtDe-3-Leukoplast_Ready_To_Use_Application_INT_NN%25202.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ScsDJcw8w4uecIR9.jpg",
                      "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN 2.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Use as mãos quentes com uma pressão firme e suave. Ajuste novamente o produto adesivo médico se necessário.&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clskr93tr00px3b75rm2z3o4v",
            "data": {},
            "type": "multimedia",
            "items": [
              {
                "id": "clskr93ts00py3b75q8fgdj97",
                "media": {
                  "video": {
                    "key": "Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "url": "transcoded-vpeHxq6jgNVCbNZB-Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "type": "video",
                    "poster": "Leukoplast_Ready_To_Use_Application_INT_AP.jpg",
                    "duration": 142,
                    "inputKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vpeHxq6jgNVCbNZB-Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "thumbnail": "https://images.articulate.com/f:jpg,b:fff,w:100,h:100,s:cover/rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/transcoded-vpeHxq6jgNVCbNZB-Leukoplast_Ready_To_Use_Application_INT_AP.0000000.jpg",
                    "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "transcodeId": "1709901577036-agn7jp"
                  }
                },
                "caption": ""
              }
            ],
            "family": "multimedia",
            "variant": "video",
            "settings": {
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "cloib8mej01g13b6xns0lrsp9",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "paddingBottom": 0,
              "backgroundType": null,
              "backgroundColor": "#E40428",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli8v42mq00203c5yvid35zyy",
            "type": "text",
            "items": [
              {
                "id": "cli8v3zgu001y3c5ygtbsxjsu",
                "paragraph": "<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><strong>Remoção de adesivos médicos</strong></span><span style=\"font-size: 14px;\"><sup>6,10,12</sup></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "clo8qbzaj005d3b6xrmrilbpf",
            "type": "image",
            "items": [
              {
                "id": "clo8qbzak005e3b6x36eqi22v",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/untxs5Vf4fee1N9n.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "removal1.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 14,
                      "width": 435,
                      "height": 435,
                      "originalWidth": 572,
                      "originalHeight": 435
                    },
                    "originalUrl": "removal1.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/5sBMaQ3ZT5ueP7Ss-removal1.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/GRZxForGdUYgZ5hA.jpg",
                      "originalUrl": "removal1.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Solte cuidadosamente as bordas do adesivo médico, nunca puxe ou arranhe a borda do curativo. Coloque os dedos sob o curativo para continuar soltando a adesão.</span></p>"
              },
              {
                "id": "clo8qbzak005f3b6xckgqoc5u",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/9LLoEuJrItjQzem5.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "removal2.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 117,
                      "width": 435,
                      "height": 435,
                      "originalWidth": 669,
                      "originalHeight": 435
                    },
                    "originalUrl": "removal2.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/u3j7mfQzhTaAptoH-removal2.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/eD5qvPi7W3JFC2V5.jpg",
                      "originalUrl": "removal2.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Sempre use ambas as mãos ereserve um tempo para remover o curativo lentamente. Com uma mão, puxe na direção do crescimento dos pelos, se possível, sempre em um ângulo baixo, paralelo à pele. Use a outra mão para apoiar a pele, pressionando-a suavemente para baixo.&nbsp;</span></p>"
              },
              {
                "id": "clo8qbzak005g3b6x2h1qmyr5",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/Km-p2S-R4pPRr39g.png",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "removal3.png",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 536,
                      "height": 536,
                      "originalWidth": 540,
                      "originalHeight": 536
                    },
                    "originalUrl": "removal3.png",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/CB9IP40Sl8gk324A-removal3.png",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/aaBKnwWSx3rj-ORe.png",
                      "originalUrl": "removal3.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Nunca retire o curativo puxando para cima com uma mão.</span><span style=\"font-size: 22px;\">.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clskr7c7600pj3b75jnmrdmpz",
            "data": {},
            "type": "multimedia",
            "items": [
              {
                "id": "clskr7c7700pk3b753n1bjxn1",
                "media": {
                  "video": {
                    "key": "Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "url": "transcoded--t9caT7XHsjO59yQ-Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "type": "video",
                    "poster": "Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.jpg",
                    "duration": 70,
                    "inputKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/-t9caT7XHsjO59yQ-Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "thumbnail": "https://images.articulate.com/f:jpg,b:fff,w:100,h:100,s:cover/rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/transcoded--t9caT7XHsjO59yQ-Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.0000000.jpg",
                    "originalUrl": "Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "transcodeId": "1709901728172-fzjmdb"
                  }
                },
                "caption": ""
              }
            ],
            "family": "multimedia",
            "variant": "video",
            "settings": {
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clktj904c000h35781dtsvbor",
            "type": "image",
            "items": [
              {
                "id": "clktj904c000i3578z4q17mck",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/fUujZ3eUamEOhPSL-cutimed%2520protect.png",
                    "type": "image",
                    "crushedKey": "cutimed%20protect.png",
                    "originalUrl": "cutimed protect.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Para os pacientes com maior risco de desenvolver MARSI, os <strong>produtos barreira e os removedores de adesivos podem ser usados</strong> como protetores e preventivos.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "imageSize": "small",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "left",
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clk0xt8f2001b35751gzoekkg",
            "type": "image",
            "items": [
              {
                "id": "clk0xt8f3001e35752k1kgxgf",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ZXdv2x4GCm48Wq64-skin%2520barrier.png",
                    "type": "image",
                    "crushedKey": "skin%20barrier.png",
                    "originalUrl": "skin barrier.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Produtos de barreira cutânea&nbsp;</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Um produto de barreira cutânea é um polímero formador de filme ou um produto à base de silicone que funciona como uma camada de interface entre a pele e o adesivo médico</span><span style=\"font-size: 14px;\"><sup>9</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              },
              {
                "id": "clk0xt8f3001f3575h9srq9l4",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/a5Dhb21sfzKH0c3y-adhesive%2520remover.png",
                    "type": "image",
                    "crushedKey": "adhesive%20remover.png",
                    "originalUrl": "adhesive remover.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Removedores de adesivo médicos&nbsp;</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Use removedores de adesivo estéreis para pacientes com alto risco de infecção</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">. Considere o uso de removedores de adesivo sem álcool</span><span style=\"font-size: 14px;\"><sup>10</sup></span><span style=\"font-size: 22px;\">.</span></p><p style=\"text-align: center;\"><br></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloineviz009r3b6xrh7szay3",
            "type": "knowledgeCheck",
            "items": [
              {
                "id": "cloinevj000a23b6xwf19rszi",
                "type": "MATCHING",
                "title": "<p><span style=\"font-size: 24px;\">¿Lembras o significado das cinco medidas preventivas para MARSI?</span>&nbsp;</p><p><span style=\"font-size: 17px;\">A seguir, faça coincidir a medida preventiva com a descrição correta para completar as frases.</span></p>",
                "answers": [
                  {
                    "id": "cloinevj000a33b6xcsoe48ir",
                    "title": "A identificação dos pacientes de alto risco é",
                    "correct": true,
                    "matchTitle": "necessário porque algumas pessoas são mais suscetíveis a desenvolver MARSI."
                  },
                  {
                    "id": "cloinevj000a43b6x6vzrh5j4",
                    "title": "O protocolo individualizado de cuidado da pele é",
                    "correct": true,
                    "matchTitle": "cuidando da pele de dentro para fora e de fora para dentro para evitar o aparecimento de feridas."
                  },
                  {
                    "id": "cloinevj000a53b6x2o249cki",
                    "title": "A seleção adequada do adesivo é",
                    "correct": true,
                    "matchTitle": "depende da integridade da pele, dos fatores de risco e das características do curativo adesivo."
                  },
                  {
                    "id": "cloinr4or00ah3b6x9lykqy9r",
                    "title": "Boas técnicas de aplicação e remoção são",
                    "correct": false,
                    "matchTitle": "para evitar pressão e tensão ou forças mecânicas que podem causar MARSI."
                  },
                  {
                    "id": "cloinreze00ai3b6x627u2ag6",
                    "title": "O uso de produtos barreira e removedores de adesivo é",
                    "correct": false,
                    "matchTitle": " para proteger a pele durante o uso e a remoção de um adesivo médico."
                  }
                ],
                "feedback": "",
                "feedbackType": "CORRECT_INCORRECT",
                "feedbackCorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 17px;\">Você conseguiu!</span></p>",
                "feedbackIncorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 17px;\">Tente novamente!</span></p>"
              }
            ],
            "family": "knowledgeCheck",
            "variant": "matching",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplc0ahp00au116j4493hwlv",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 0,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#e40428",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplc0ahp00av116j5up774w3",
            "type": "text",
            "items": [
              {
                "id": "clnopl08e00f23b6xkvp5ryjt",
                "paragraph": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(0, 0, 0);\"><strong>MARSI em acesso vascular</strong></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 2,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clplc0ahp00aw116j6v3c9xfb",
            "type": "text",
            "items": [
              {
                "id": "clj6tiqop001w356rkml7jd5v",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Cerca de 90% dos pacientes hospitalizados recebem <strong>acesso vascular</strong></span><span style=\"font-size: 14px; color: rgb(49, 53, 55);\"><sup>6</sup>.&nbsp;</span><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Quando são utilizados curativos intravenosos ou fitas de fixação, a MARSI pode ser um problema. Clique nos marcadores da imagem abaixo para obter informações sobre algumas medidas preventivas:</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 2,
              "accentColor": null,
              "paddingBottom": 2,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clplc0aag00100zesgjs503cs",
            "type": "interactive",
            "items": [
              {
                "x": "11.202651515151516",
                "y": "36.65951810268702",
                "id": "clktk57mx000k3578jgxi40ya",
                "icon": "02",
                "title": "",
                "isActive": false,
                "description": "<p><span style=\"color: rgb(0, 0, 0);\"><span style=\"font-size: 20px;\">Certifique-se de que a desinfecção da pele esteja completamente seca antes de aplicar um adesivo médico</span><span style=\"font-size: 14px;\"><sup>2,20</sup></span><span style=\"font-size: 20px;\">.</span></span></p>"
              },
              {
                "x": "11.34364478114478",
                "y": "54.013182792985994",
                "id": "clktk57mx000l35785l8n5rzj",
                "icon": "02",
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Pode-se aplicar um filme barreira sem álcool</span><sup><span style=\"font-size: 14px;\">2</span></sup><span style=\"font-size: 20px;\">.&nbsp;</span></p>",
                "isNewlyInserted": true
              },
              {
                "x": "11.341540404040403",
                "y": "72.42967074555318",
                "id": "clktk57mx000m3578yomqukk2",
                "icon": "02",
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Utilize um curativo adesivo adequado e amigável à pele para a fixação do cateter</span><sup><span style=\"font-size: 14px;\">2</span></sup><sup><span style=\"font-size: 14px;\">,17,20</span></sup><span style=\"font-size: 20px;\">.&nbsp;</span></p>"
              },
              {
                "x": "11.647727272727272",
                "y": "90.62697111139146",
                "id": "clktk57mx000n3578s5uyrti4",
                "icon": "02",
                "title": "",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Use a técnica de remoção apropriada. Certifique-se de removê-lo lentamente e em um ângulo baixo, paralelo à pele</span><sup><span style=\"font-size: 14px;\">2</span></sup><span style=\"font-size: 20px;\">.&nbsp;</span></p>"
              }
            ],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/xPzwTZ_8TNYodbTi-Leukoplast%2520STEPS_lifestyle%2520visual_home%2520care%2520man%2520nurse%2520cancer.jpg",
                "type": "image",
                "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_home%20care%20man%20nurse%20cancer.jpg",
                "originalUrl": "Leukoplast STEPS_lifestyle visual_home care man nurse cancer.jpg",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "markerColor": "",
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli011z5o003r356ph0g2qnuj",
            "type": "text",
            "items": [
              {
                "id": "cli011r25003n356psg9rd2lp",
                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(255, 255, 255);\"No próximo capítulo, analisaremos mais de perto como tratar a MARSI.&nbsp;</span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl6c208r8003a356qrxd8sy3q",
            "type": "divider",
            "items": [
              {
                "id": "ckus5rpu70010386fx0vf3m3s",
                "type": "",
                "title": "¿Como tratar uma MARSI?",
                "buttonColor": "brand",
                "completeHint": "Complete o conteúdo acima antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "5iaLU3vSoEwYhP5PC4Bw3spHF-nyhR8c",
        "deleted": false,
        "createdAt": "2023-07-08T08:31:33.976Z",
        "updatedAt": "2024-03-26T11:39:45.040Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "bUaLs1GUOTgGrP3scNUfAkHdX0BPvO0e",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Como tratar uma MARSI?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "clrhhqilg00k13b6w05v10x0b",
            "type": "image",
            "items": [
              {
                "id": "clrhhqilh00k23b6w8qxdxd23",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/St9ur1cm7TS8bWoe-disclaimer.png",
                    "type": "image",
                    "crushedKey": "disclaimer.png",
                    "originalUrl": "disclaimer.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "hero",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "customPaddingTop": 3,
              "entranceAnimation": true,
              "customPaddingBottom": 3,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clsntnt2i00f13b747xikn1ft",
            "type": "image",
            "items": [
              {
                "id": "clsntnt2i00f23b74r788i1xm",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/69uAOmBswyKFG6iv-Leukoplast%2520STEPS_lifestyle%2520visual_woman%2520nurse%2520hospital-mirrored.png",
                    "type": "image",
                    "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_woman%20nurse%20hospital-mirrored.jpg",
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_woman nurse hospital-mirrored.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Caso a pele tenha sido danificada pelo uso de adesivos médicos, deve seguir os princípios de cuidado de feridas baseados em evidências<span style=\"font-size: 14px;\"><sup>5</sup></span>.&nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clpmlgx4800jb3b6wxljfnx5o",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/SRbm7TLwp5GRY5V5-non-infected.gif",
                "type": "image",
                "crushedKey": "non-infected.gif",
                "originalUrl": "non-infected.gif",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "tmp": {}
              }
            }
          },
          {
            "id": "450657TcSIqPj5UD03a547Aw51eCu7-S",
            "type": "image",
            "items": [
              {
                "id": "clpb52ape066c3b6wu7cuwvqj",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/LikGON8wQsnhT9ge-assessNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "assessNEW_NUMBERS.png",
                    "originalUrl": "assessNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><strong><span style=\"font-size: 24px;\">Avalie a ferida&nbsp;</span></strong><span style=\"font-size: 24px;\"> e descreva e documente o tipo, cor, tamanho, disposição e localização.</span></p><p><span style=\"font-size: 24px;\">Também <strong>procure sinais de infecção local ou sistêmica</strong> como calor, mau cheiro, edema, eritema, supuração, aumento da dor, falha do retalho de pele e maior distância da borda da ferida.</span></p><p><br></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "E7WRvk-TUZIAHos3jvtmlHYucMBfmH62",
            "type": "text",
            "items": [
              {
                "id": "clhf87hnh006w356puvysbr78",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Alguns casos necessitam de uma avaliação mais aprofundada. Em pessoas imunocomprometidas, como idosos ou pessoas com diabetes, ou na presença de má perfusão vascular, os sinais de infecção local da ferida podem estar mascarados. Além disso, faça a distinção entre a inflamação e a infecção relacionadas ao trauma</span><span style=\"font-size: 14px; color: rgb(255, 255, 255);\"><sup>5,21</sup></span><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "Y2Vcr4emtBaed5nUrqg8-Y1im8gY5UUE",
            "type": "image",
            "items": [
              {
                "id": "clpb1uri404z83b6w2xiqnmdo",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/cauOwA_T76MWgOar-cleanNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "cleanNEW_NUMBERS.png",
                    "originalUrl": "cleanNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><strong><span style=\"font-size: 24px;\">Limpe</span></strong><span style=\"font-size: 24px;\"> a ferida e a pele peri-ferida. Use <strong>água potável da torneira ou uma solução não citotóxica</strong> para eliminar os resíduos de adesivo, as bactérias e os resíduos celulares.</span></p><p><span style=\"font-size: 24px;\">As soluções antissépticas só devem ser usadas se houver um alto risco de infecção, como por exemplo em feridas traumáticas e contaminadas.</span></p><p><br></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "gstot8nWXfEc3IyVVLAdcxS9lGQ-hM4d",
            "type": "image",
            "items": [
              {
                "id": "clpb1wewu05lz3b6wdhk9fl0f",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/IYNF1Z9GVYMC8wwd-adhesive-selectionNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "adhesive-selectionNEW_NUMBERS.png",
                    "originalUrl": "adhesive-selectionNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Selecione um produto com base no <strong>propósito previsto, no tempo de uso para a localização anatômica específica</strong> e nas <strong>condições presentes,</strong> incluindo a exposição à umidade, transpiração, irritantes e fluidos corporais.&nbsp;</span></p><p><span style=\"font-size: 24px;\">Na seleção, também devem ser incluídas as <strong>propriedades intrínsecas do curativo adesivo:</strong> coesão, suavidade, respirabilidade, elasticidade e flexibilidade.</span></p><p><br></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplbxngm02613b6wmtu78m2m",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 0,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#e40428",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplbxr1f026q3b6wv53sb7te",
            "type": "image",
            "items": [
              {
                "id": "clp2prhg101vh3b6w0ccpcsjk",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/8zqxiagtKtr3vcRd-hypafix-skin-sensitive-ecom-lifestyle.png",
                    "type": "image",
                    "crushedKey": "hypafix-skin-sensitive-ecom-lifestyle.jpg",
                    "originalUrl": "hypafix-skin-sensitive-ecom-lifestyle.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><strong><span style=\"font-size: 24px;\">Educação do paciente</span></strong></p><p><span style=\"font-size: 24px;\">Certifique-se sempre de que os pacientes estejam cientes da <strong>progressão normal esperada da cicatrização das feridas</strong>, bem como dos <strong>sintomas alarmantes</strong> que possam indicar uma possível infecção ou complicações</span><span style=\"font-size: 14px;\"><sup>22</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplbxzli027g3b6w2utphqdi",
            "type": "text",
            "items": [
              {
                "id": "clpb0hil003hh3b6wwhvghfit",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Se não houver resposta ao tratamento conservador em um prazo de sete dias, ou se a ferida se deteriorar apesar dos cuidados conservadores, deve-se consultar um especialista em cuidados de feridas</span><span style=\"font-size: 14px; color: rgb(255, 255, 255);\"><sup>5</sup></span><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "clpmhzfgu00jh3b6wvbrmug1q",
            "type": "text",
            "items": [
              {
                "id": "clpmhzfgu00ji3b6wq9pan2n9",
                "paragraph": "<p><span style=\"font-size: 24px;\">Durante a avaliação da ferida, deve procurar sinais de infecção. Se considerar os sinais mencionados anteriormente, qual das feridas abaixo você acha que está infectada? Clique na imagem que você acha que mostra uma ferida infectada. Você receberá o feedback imediatamente.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "fwhcK8UHgF_z_k4rNfTmTIZwL5bGeVRv",
            "type": "interactive",
            "items": [
              {
                "id": "clp2qjclr00763b6wnel2a6b0",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p style=\"text-align: left;\"><span style=\"font-size: 20px;\">Esta ferida não é recente e infectou-se, apresentando supuração, tendência a edema e eritema.&nbsp;</span></p>"
                },
                "front": {
                  "type": "fullimage",
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/KaXmD5UEFiljpm8b.jpg",
                      "type": "image",
                      "isSquare": true,
                      "crushedKey": "10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT%20%281%29.jpg",
                      "dimensions": {
                        "top": 312,
                        "left": 716,
                        "width": 312,
                        "height": 310,
                        "originalWidth": 1600,
                        "originalHeight": 704
                      },
                      "originalUrl": "10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT (1).png",
                      "originalImage": {
                        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/X4RYyOAYI44nRGQA-10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT%2520(1).png",
                        "type": "image",
                        "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/DrccyUR5OLXjnupN.jpg",
                        "originalUrl": "10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT (1).png",
                        "useCrushedKey": true
                      },
                      "useCrushedKey": true
                    }
                  },
                  "description": "Front of card 1"
                }
              },
              {
                "id": "clp2qz0ok007v3b6wstoecuia",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p style=\"text-align: left;\"><span style=\"font-size: 20px;\">Esse tipo de ferida, uma laceração, é aguda e ocorre por um rasgo ou por uma força contusa forte e de curta duração. Não há sinais de infecção.</span></p>"
                },
                "front": {
                  "type": "fullimage",
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/7ogYbXL5fTkqIc_d.jpg",
                      "type": "image",
                      "isSquare": true,
                      "crushedKey": "lacerations.jpg",
                      "dimensions": {
                        "top": 240,
                        "left": 242,
                        "width": 478,
                        "height": 477,
                        "originalWidth": 1200,
                        "originalHeight": 1200
                      },
                      "originalUrl": "lacerations.png",
                      "originalImage": {
                        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/6MnHoXEXMiaHfxx_-lacerations.png",
                        "type": "image",
                        "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/d4XgjkwJS1FKsKkz.jpg",
                        "originalUrl": "lacerations.png",
                        "useCrushedKey": true
                      },
                      "useCrushedKey": true
                    }
                  },
                  "description": "Front of card"
                },
                "isNewlyInserted": true
              },
              {
                "id": "clp2qjclr00773b6whog4gd0q",
                "back": {
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/8Nidr4304mElV5mj-lacerations.png",
                      "type": "image",
                      "crushedKey": "-cQyke/lacerations.jpg",
                      "originalUrl": "lacerations.png",
                      "useCrushedKey": true
                    }
                  },
                  "description": "<p style=\"text-align: left;\"><span style=\"font-size: 20px;\">Essa ferida é uma falha de retalho cutâneo. Não está infectada, mas pode se infectar facilmente se não for devidamente cuidada durante a cicatrização, já que grandes áreas ficam desprotegidas devido à perda de pele.</span></p>"
                },
                "front": {
                  "type": "fullimage",
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/DPN0T-_ViiDAmFu4.png",
                      "type": "image",
                      "isSquare": true,
                      "crushedKey": "skin%20tear%20types%20question.png",
                      "dimensions": {
                        "top": 0,
                        "left": 0,
                        "width": 486,
                        "height": 486,
                        "originalWidth": 1680,
                        "originalHeight": 593
                      },
                      "originalUrl": "skin tear types question.png",
                      "originalImage": {
                        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/2GLZ2cosFbw9sUWp-skin%2520tear%2520types%2520question.png",
                        "type": "image",
                        "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/nNQsNwpeYuPNeDSn.png",
                        "originalUrl": "skin tear types question.png",
                        "useCrushedKey": true
                      },
                      "useCrushedKey": true
                    }
                  },
                  "description": "Front of card 2"
                }
              }
            ],
            "family": "flashcard",
            "variant": "flashcard",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "l5yn4vzi8ejWwO8f5I8yRjGDYcVGqwsM",
            "type": "text",
            "items": [
              {
                "id": "cl6m7erow002c356q2xrha4xk",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Continue para aprender sobre o tratamento da infecção por MARSI.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "SBhDmA-eN4d7fMtxibLW451rS-4KN8Gx",
            "type": "divider",
            "items": [
              {
                "id": "clhn4fmyj008x356u04y506rz",
                "type": "",
                "title": "¿Como tratamos uma MARSI infectada?",
                "buttonColor": "brand",
                "completeHint": "Complete o conteúdo acima antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "Ijn_6pw-QPy_sXocwuP8EJ1GCSeNxbHm",
        "deleted": false,
        "createdAt": "2023-11-30T15:05:35.311Z",
        "updatedAt": "2024-02-16T13:49:25.630Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": 2,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "kzhVHVe0GDWHNZSrS5BJgr7F05ppubJj",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Como tratamos uma MARSI infectada?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "clrhhvsdo013j3b6wnse79j4c",
            "type": "image",
            "items": [
              {
                "id": "clrhhvsdp013k3b6wxsbspk9a",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/NgJAlWB7WYLvtz0U-disclaimer.png",
                    "type": "image",
                    "crushedKey": "R6B8VI/disclaimer.png",
                    "originalUrl": "disclaimer.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "hero",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "customPaddingTop": 3,
              "entranceAnimation": true,
              "customPaddingBottom": 3,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "1GxIkugWpWgKzmj_zeKvU_Y_RnUveUQM",
            "type": "image",
            "items": [
              {
                "id": "clpb957lg043b3b6w1itaesg0",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/j9S35wubrtGXfm6I.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product%20application.jpg",
                    "dimensions": {
                      "top": 266,
                      "left": 0,
                      "width": 1296,
                      "height": 595,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product application.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/Uyg5WUJAhwc9d0bi-Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product%2520application.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ye7xH0lCbk1sKPBK.jpg",
                      "originalUrl": "Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product application.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Múltiplos estudos mostram que pode ocorrer um maior crescimento microbiano debaixo das fitas oclusivas. Qualquer sinal de infecção durante a avaliação de MARSI precisa de tratamento, especialmente em pacientes vulneráveis que são mais suscetíveis à infecção, como os idosos, os recém-nascidos e os neonatos. Siga os princípios para o manejo de um MARSI infectado<sup><span style=\"font-size: 14px;\">21</span></sup>.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clpmlu6vj013n3b6wo7rt4zys",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/pFt2wyzOutFWQibA-infected.gif",
                "type": "image",
                "crushedKey": "infected.gif",
                "originalUrl": "infected.gif",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "tmp": {}
              }
            }
          },
          {
            "id": "lkR5Z9lbF-WLPqZ3TZDHOi0aA6zflTd7",
            "type": "image",
            "items": [
              {
                "id": "clpb6i9lg017q3b6w4qlohrb2",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/O00-syoeem4z4qJU-assessNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "qINd2Z/assessNEW_NUMBERS.png",
                    "originalUrl": "assessNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Avalie a ferida</strong>, documente e descreva a cor, o tamanho, a disposição e a localização. Também <strong>procure sinais de infecção local ou sistêmica,</strong> como calor, mau odor, edema, eritema, supuração, aumento da dor, falha do retalho de pele e aumento da distância entre a borda da ferida.</span></p><p><span style=\"font-size: 24px;\">Se houver sinais de propagação ou infecção sistêmica, ou se uma ferida infectada não responder ao tratamento antimicrobiano, pode ser necessário um <strong>exame microbiológico.</strong></span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "BeO7xV1oVXdQLsbstK-K8Oi57bXrMqyg",
            "type": "image",
            "items": [
              {
                "id": "clpb6icqm01853b6wgjbwtuw7",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/-Vv38Aj0pytt4rtf-cleanNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "RTUiIS/cleanNEW_NUMBERS.png",
                    "originalUrl": "cleanNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Use uma <strong>solução de limpeza antisséptica.</strong> O método de desbridamento deve ser baseado no contexto clínico, nos objetivos do atendimento, na experiência do médico, assim como nas políticas e procedimentos locais.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "ljQSASoMPTCdB2-osmTWSaRS7nVHCFy6",
            "type": "image",
            "items": [
              {
                "id": "clpb6ief8018j3b6wx8hhf8qp",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/0YoeUnskHpxOQYSy-antimicro-dressingNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "antimicro-dressingNEW_NUMBERS.png",
                    "originalUrl": "antimicro-dressingNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Use <strong>curativos antimicrobianos</strong> quando houver sinais de feridas expostas, sintomas de infecção local de feridas e se houver suspeita ou confirmação de que as feridas possuem biopelícula.</span></p><p><span style=\"font-size: 24px;\">Combine-o com <strong>antibióticos sistêmicos</strong> para feridas com sinais de exposição e quando houver sintomas de propagação ou infecção sistêmica.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 1,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "jMQQ0lKOWLFgW2zPOttDtb92EaeocBqg",
            "type": "interactive",
            "items": [
              {
                "id": "cloh5xryn02n53b6xks0gl89v",
                "media": {
                  "tmp": {},
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vKFoEgI2sJrjD_xZ-dermatitis-round.png",
                    "type": "image",
                    "align": "center",
                    "fillWidth": false,
                    "crushedKey": "dermatitis-round.png",
                    "trackingId": "cloh5y0c202p03b6xzq2ddw0k",
                    "originalUrl": "dermatitis-round.png",
                    "useCrushedKey": true,
                    "trackingContext": "block:accordion"
                  }
                },
                "title": "Em caso de dermatite",
                "description": "<p><span style=\"font-size: 22px;\">Investigar fortes suspeitas de dermatite de contato alérgica ou irritante ou considerar um encaminhamento rápido.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br></span></p><p><span style=\"font-size: 22px;\">No caso da <strong>dermatite de contato alérgica</strong>, a inflamação aguda deve ser tratada com compressas frias e esteroides tópicos de potência baixa a média.</span></p><p><span style=\"font-size: 22px;\">No caso de <strong>dermatite de contato irritante</strong>, deve-se identificar e eliminar o agente causador. Hidratantes ricos em lipídios podem ajudar a melhorar a barreira cutânea</span><span style=\"font-size: 14px;\"><sup>5,</sup><sup>19</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></p>"
              },
              {
                "id": "cloh5xryn02n63b6xs28kvwwk",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/3kMcmxc_4qS6VAES-folliculitis-round.png",
                    "type": "image",
                    "align": "center",
                    "fillWidth": false,
                    "crushedKey": "folliculitis-round.png",
                    "trackingId": "cloh5y0c202p03b6xzq2ddw0k",
                    "originalUrl": "folliculitis-round.png",
                    "useCrushedKey": true,
                    "trackingContext": "block:accordion"
                  }
                },
                "title": "Em caso de foliculite",
                "description": "<p><span style=\"font-size: 22px;\">No caso de foliculite, deve-se realizar uma higiene adequada da pele e podem ser necessários antibióticos tópicos e/ou orais</span><span style=\"font-size: 14px;\"><sup>5</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></p>"
              }
            ],
            "family": "interactive",
            "variant": "accordion",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "UgtY6BhVqPmjMi-gkGMg0fNchAAerS2W",
            "type": "text",
            "items": [
              {
                "id": "cl6m7erow002c356q2xrha4xk",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Continue aprendendo sobre a seleção de soluções adesivas.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "5b3L01L3sFjUyjlo-NLoCf_WGU1S5z6x",
            "type": "divider",
            "items": [
              {
                "id": "clhn4fmyj008x356u04y506rz",
                "type": "",
                "title": "¿Como selecionamos as soluções adesivas?",
                "buttonColor": "brand",
                "completeHint": "Complete o conteúdo acima antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "bUaLs1GUOTgGrP3scNUfAkHdX0BPvO0e",
        "deleted": false,
        "createdAt": "2023-11-30T15:05:39.722Z",
        "updatedAt": "2024-01-17T08:05:40.167Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": 3,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "JiVw-mmCf2-OIYpHlEFfS8C-BK-cnNZb",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Como selecionamos as soluções adesivas?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl445k9390006356ocm3cwnek",
            "type": "image",
            "items": [
              {
                "id": "cl445k9390007356okbzuplbp",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/oAAGC6UJ2Hrdx0mQ-Leukoplast-Leukomed-Skin-Sensitive-B2C-Website-Lifestyle-1000x1000px_mirrored.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Leukomed-Skin-Sensitive-B2C-Website-Lifestyle-1000x1000px_mirrored.png",
                    "originalUrl": "Leukoplast-Leukomed-Skin-Sensitive-B2C-Website-Lifestyle-1000x1000px_mirrored.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>A seleção de adesivos faz parte das cinco medidas importantes para prevenir e tratar o MARSI. Deve-se escolher um adesivo adequado com base em uma combinação da pele do paciente, os fatores de risco, as características do adesivo médico e o tipo de MARSI.&nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clsxdynp5014t3b74dix91rll",
            "type": "image",
            "items": [
              {
                "id": "clsxdynp5014u3b74t3k5ezdz",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/5FOZMiyNJmg8Cr7U-appropriate-adhesive-selectionNEW.png",
                    "type": "image",
                    "crushedKey": "p9LsEI/appropriate-adhesive-selectionNEW.png",
                    "originalUrl": "appropriate-adhesive-selectionNEW.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>A seleção adequada de adesivos</strong> implica uma avaliação da pele antes da aplicação, assim como o treinamento e o conhecimento adequados sobre os adesivos e a aplicação do produto, por exemplo, adesivos médicos com suporte elástico em áreas com movimento</span><span style=\"font-size: 14px;\"><sup>12</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#FFFFFF",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7uoxw002h356r1j8m7q24",
            "type": "text",
            "items": [
              {
                "id": "cliuduha3000h356zq704sfcj",
                "paragraph": "<p><span style=\"font-size: 24px;\">A seleção dos adesivos adequados também implica o conhecimento das propriedades características dos produtos, já que certas propriedades podem ajudar a reduzir certos tipos de MARSI</span><span style=\"font-size: 14px;\"><sup>5,6</sup></span><span style=\"font-size: 24px;\">.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7sjfy0026356rq1o5fqiw",
            "type": "image",
            "items": [
              {
                "id": "clhyssjaj0003356xwm06uoad",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/GZz5Qk1hnB8SxGlE-skin-stripping-round.png",
                    "type": "image",
                    "crushedKey": "skin-stripping-round.png",
                    "originalUrl": "skin-stripping-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">O risco de <strong>lacerações cutâneas</strong> pode ser reduzido através da seleção de adesivos que sejam suaves para a pele durante, para garantir a <strong>remoção atraumática</strong>.&nbsp;</span></p>"
              },
              {
                "id": "clhyssjaj0004356xdfigvguq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/GbMCBXVniF5AwZVX-skin-tears-round.png",
                    "type": "image",
                    "crushedKey": "skin-tears-round.png",
                    "originalUrl": "skin-tears-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">O risco de <strong>rupturas da pele</strong> também pode ser reduzido por meio do uso de adesivos com propriedades de <strong>remoção atraumática.</strong>&nbsp;</span></p>"
              },
              {
                "id": "clhyssjaj0005356xb5m46986",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/TYS8r_RIu0PODXSs-tension-injury-round.png",
                    "type": "image",
                    "crushedKey": "tension-injury-round.png",
                    "originalUrl": "tension-injury-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">O risco de <strong>bolhas por tensão</strong> pode ser reduzido através do uso de <strong>material elástico e flexível</strong>, que seja maleável.&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7sz9f002d356rvsnupk5t",
            "type": "image",
            "items": [
              {
                "id": "cliwylv4l0020356r0l5c9smk",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/mm_sFrLHNJOc35Aa-dermatitis-round.png",
                    "type": "image",
                    "crushedKey": "d8n8qP/dermatitis-round.png",
                    "originalUrl": "dermatitis-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">O risco de <strong>dermatite</strong> pode ser reduzido através do uso de <strong>adesivos amigáveis à pele</strong> e material de suporte com baixo potencial alergênico.</span><span style=\"font-size: 20px;\">&nbsp;</span></p>"
              },
              {
                "id": "cliwylv4l0021356rqd1zdcaq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/osmTbSdDovUPfaTD-maceration-round.png",
                    "type": "image",
                    "crushedKey": "maceration-round.png",
                    "originalUrl": "maceration-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">O risco de <strong>maceração</strong> pode ser reduzido através do uso de <strong>material respirável</strong> para evitar o acúmulo de umidade.&nbsp;</span><span style=\"font-size: 20px;\">&nbsp; &nbsp;</span></p>"
              },
              {
                "id": "cliwylv4l0022356rppyvjiug",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/kHT77dJx3LQ_N88l-folliculitis-round.png",
                    "type": "image",
                    "crushedKey": "zfGRsv/folliculitis-round.png",
                    "originalUrl": "folliculitis-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">O risco de <strong>foliculite</strong> pode ser reduzido com um tratamento antimicrobiano, no entanto, não há propriedades específicas relacionadas ao curativo que possam ajudar a reduzir o risco.</span><span style=\"font-size: 20px;\">&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7ukcb002e356rjpbimwsn",
            "type": "text",
            "items": [
              {
                "id": "clje7ukcb002f356rkt63h5k5",
                "paragraph": "<p><span style=\"font-size: 24px;\">Existem três grupos de adesivos médicos com diferentes propriedades e qualidades:</span><ul><li style=\"font-size: 24px;\"><strong>Adesivos à base de borracha.</strong></li><li style=\"font-size: 24px;\"><strong>Adesivos à base de acrílico.</strong></li><li style=\"font-size: 24px;\"><strong>Adesivos à base de silicone.</strong></li></lu></p><p><span style=\"font-size: 24px;\">Clique em cada guia abaixo para obter mais informações.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsxdpy7y00ot3b74u2sfr0gx",
            "type": "interactive",
            "items": [
              {
                "id": "clsxdpy7y00ou3b743x5e36o9",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/_dZEOJXQWDM8dVNX-shutterstock_326780933%2520PLASTER%2520EDITED%2520v6.png",
                    "type": "image",
                    "align": "center",
                    "fillWidth": false,
                    "crushedKey": "shutterstock_326780933%20PLASTER%20EDITED%20v6.jpg",
                    "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                    "originalUrl": "shutterstock_326780933 PLASTER EDITED v6.png",
                    "useCrushedKey": true,
                    "trackingContext": "block:tabs"
                  }
                },
                "title": "À BASEDE BORRACHA",
                "description": "<p><span style=\"font-size: 22px;\">O adesivo à <strong>base de borracha</strong> é um adesivo tradicional que foi o primeiro no mercado. Ele possui um alto nível de aderência, mas pode ter um impacto na integridade da pele. Estas são algumas vantagens e desvantagens:</span></p><p><span style=\"font-size: 22px;\"><br><strong>Vantagens:</strong></span></p><p><span style=\"font-size: 22px;\">+ Adesão forte. Adequado até mesmo para fixar tubos pesados, curativos e dispositivos.</span></p><p><span style=\"font-size: 22px;\">+ Uma boa tolerância à umidade significa que funciona bem quando em contato com a umidade e as secreções.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Desvantagens:</strong></span></p><p><span style=\"font-size: 22px;\">- Frequentemente contém látex, que tem o potencial de causar reações alérgicas.&nbsp;</span></p><p><span style=\"font-size: 22px;\">- Pode ter um impacto em peles frágeis ou sensíveis.&nbsp;</span></p>"
              },
              {
                "id": "clsxdpy7y00ov3b74tayssdh4",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/AwQN5L2GmnPO67eA.jpg",
                    "type": "image",
                    "align": "center",
                    "isSquare": false,
                    "crushedKey": "Leukosilk_punctureEDIT.jpg",
                    "dimensions": {
                      "top": 222,
                      "left": 0,
                      "width": 1680,
                      "height": 887,
                      "originalWidth": 1680,
                      "originalHeight": 1189
                    },
                    "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                    "originalUrl": "Leukosilk_punctureEDIT.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/LlTXMe1o_yZjPowO-Leukosilk_punctureEDIT.jpg",
                      "type": "image",
                      "align": "center",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/c1_sYmC0triQKH1X.jpg",
                      "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                      "originalUrl": "Leukosilk_punctureEDIT.jpg",
                      "useCrushedKey": true,
                      "trackingContext": "block:tabs"
                    },
                    "useCrushedKey": true,
                    "trackingContext": "block:tabs"
                  }
                },
                "title": "À BASE DEACRÍLICO",
                "description": "<p><span style=\"font-size: 22px;\">Os adesivos à <strong>base de acrílico</strong> são adesivos com baixo risco de causar alergias e são amigáveis à pele para o uso diário. Estas são algumas vantagens e desvantagens dos adesivos à base de acrílico:</span></p><p><span style=\"font-size: 22px;\"><br><strong>Vantagens:</strong></span></p><p><span style=\"font-size: 22px;\">+ Baixo risco de alergia.</span></p><p><span style=\"font-size: 22px;\">+ Várias forças de adesão e diferentes materiais de suporte estão disponíveis para diferentes ocasiões de uso.&nbsp;</span></p><p><span style=\"font-size: 22px;\">+ Adequado para a fixação crítica de dispositivos.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Desvantagens:</strong></span></p><p><span style=\"font-size: 22px;\">- Pode causar traumatismos cutâneos se for aplicada ou removida incorretamente, ou no caso de peles muito sensíveis ou frágeis.</span></p>"
              },
              {
                "id": "clsxdpy7y00ow3b74ju3tmf7f",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/-B4Y954jAa2qd3Bm.jpg",
                    "type": "image",
                    "align": "left",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_STEPS_skin%20tear_clinical%20image_11.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 1680,
                      "height": 826,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ySvr2PuAn5kYn0Uv-Leukoplast_STEPS_skin%2520tear_clinical%2520image_11.jpg",
                      "type": "image",
                      "align": "left",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/M7rxHyXKu7dC9U3g.jpg",
                      "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                      "useCrushedKey": true,
                      "trackingContext": "block:tabs"
                    },
                    "useCrushedKey": true,
                    "trackingContext": "block:tabs"
                  }
                },
                "title": "À BASE DE SILICONE",
                "description": "<p><span style=\"font-size: 22px;\">Os adesivos à <strong>base de silicone</strong> são a geração mais recente de adesivos. Sua principal vantagem é a remoção atraumática, no entanto, seu nível de aderência é inferior ao dos outros tipos de adesivos. Aqui estão algumas vantagens e desvantagens:&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Vantagens:</strong></span></p><p><span style=\"font-size: 22px;\">+ Muito suave com a pele ao removê-lo.</span></p><p><span style=\"font-size: 22px;\">+ Remoção atraumática sem danificar a pele.</span></p><p><span style=\"font-size: 22px;\">+ Menos dor na remoção.&nbsp;</span></p><p><span style=\"font-size: 22px;\">+ Boa opção para peles muito sensíveis e frágeis ou em casos de trocas frequentes de curativos.</span></p><p><span style=\"font-size: 22px;\">+ Reposicionável.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Desvantagens:</strong></span></p><p><span style=\"font-size: 22px;\">- Não é recomendado para fixação crítica primária de tubos e dispositivos.&nbsp;</span></p><p><span style=\"font-size: 22px;\">- Menor aderência em ambientes úmidos.&nbsp;</span></p>"
              }
            ],
            "family": "interactive",
            "variant": "tabs",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljeeb9y6005u356rnl8tci4b",
            "type": "text",
            "items": [
              {
                "id": "cljeeag49005h356r8aapmz80",
                "paragraph": "<p><span style=\"font-size: 24px;\">Qual é a melhor opção de adesivo para pacientes com pele frágil ou comprometida? Clique na categoria abaixo que você considera a melhor. Você receberá feedback diretamente.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cliwwgn140005356rjsf5zzwc",
            "type": "interactive",
            "items": [
              {
                "id": "cli9b9xhp000j356pai76pi7y",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><strong>Esta não é uma boa opção</strong>. Os adesivos à base de borracha são muito fortes, mas podem ser agressivos para a pele sensível ou frágil e contêm látex, que pode causar reações alérgicas.</p>"
                },
                "front": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><span style=\"font-size: 28px;\"><span style=\"color: rgb(228, 4, 40);\"><strong>Adesivo à base de borracha</strong></span></span></p>"
                }
              },
              {
                "id": "cli9b9xhp000k356pwuafzdn2",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><strong>Esta não é a melhor opção</strong>. Embora os adesivos à base de acrílico sejam amplamente utilizados e amigáveis à pele, eles podem causar trauma cutâneo se não forem aplicados ou removidos corretamente ou se a pele estiver muito frágilforem aplicados ou removidos corretamente ou se a pele for muito frágil.</p>"
                },
                "front": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><span style=\"font-size: 28px;\"><strong><span style=\"color: rgb(228, 4, 40); background-color: rgb(255, 255, 255);\">Adesivo à base de acrílico</span></strong></span></p>"
                }
              },
              {
                "id": "cliudv8qe000q356zc91uxq5t",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><strong>¡Boa opção!</strong> Os adesivos à base de silicone são a melhor opção para prevenir MARSI em pacientes de alto risco com pele frágil ou comprometida.&nbsp;</p>"
                },
                "front": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><span style=\"color: rgb(228, 2, 40); font-size: 28px;\"><strong>Adesivo à base de silicone</strong></span></p>"
                },
                "isNewlyInserted": true
              }
            ],
            "family": "flashcard",
            "variant": "flashcard",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljee3jer004s356rzry9bfca",
            "type": "image",
            "items": [
              {
                "id": "cljeej4iu0067356rfixz4sse",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/JMLr81qV_wqKXRQN.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_nursing%20home%20woman.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 1120,
                      "height": 1120,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_nursing home woman.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/qyZk7nmrGXmxL9a5-Leukoplast%2520STEPS_lifestyle%2520visual_nursing%2520home%2520woman.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/Yz4pvmXPp95HCs0b.jpg",
                      "originalUrl": "Leukoplast STEPS_lifestyle visual_nursing home woman.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">Para os <strong>pacientes de alto risco</strong> com pele frágil, uma variedade de <strong>adesivos à base de silicone</strong> sensíveis à pele ajuda a reduzir o risco de contrair MARSI. &nbsp;</span></p>",
                "isNewlyInserted": true
              },
              {
                "id": "clje6tj0l001n356rbql8jul2",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/F1INR-cVwu32RiLa-shutterstock_2393485965.jpg",
                    "type": "image",
                    "crushedKey": "shutterstock_2393485965.jpg",
                    "originalUrl": "shutterstock_2393485965.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">Para <strong>pacientes de baixo risco</strong> com pele normal, uma variedade padrão de <strong>adesivos à base de acrílico</strong> ajuda a reduzir o risco de desenvolver MARSI.&nbsp;</span></p>",
                "paragraph": "<p><span style=\"font-size: 24px;\">Para pacientes com baixo risco de desenvolver MARSI, as propriedades do curativo em um sortimento padrão com adesivo acrílico ajudarão a reduzir o risco.&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "opacity": 0.5,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "left",
              "paddingBottom": 3,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cljeeb405005q356rv2jx9k4g",
            "type": "text",
            "items": [
              {
                "id": "cljeeb405005r356r3qtq7y8s",
                "paragraph": "<p><span style=\"font-size: 24px;\">Lembra das propriedades dos curativos que melhor previnem o risco de tipos específicos de MARSI? A seguir, mova as descrições das propriedades para a caixa de MARSI correta. Você receberá feedback diretamente. &nbsp;&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljee9xvv0057356r4fw35tlz",
            "type": "interactive",
            "items": [
              {
                "id": "cljee9xvv0058356re1k6a0is",
                "title": "Remoção atraumática.",
                "pileId": 1
              },
              {
                "id": "cljee9xvw0059356roqcuhilv",
                "title": "Material elástico e flexível, muito maleável.",
                "pileId": 2
              },
              {
                "id": "cljeecj4r005w356rimua0nug",
                "title": "Material respirável.",
                "pileId": "cljeecj4r005v356rtirwp62n"
              },
              {
                "id": "cljeecjv3005y356rjk8a99h4",
                "title": "Adesivos amigáveis a pele e material de suporte com baixo potencial alergênico.",
                "pileId": "cljeecjv3005x356rxz79v54v"
              }
            ],
            "piles": [
              {
                "id": 1,
                "title": "Laceração cutânea e ruptura da pele."
              },
              {
                "id": 2,
                "title": "Lesão por tensão ou bolha"
              },
              {
                "id": "cljeecj4r005v356rtirwp62n",
                "title": "Maceração"
              },
              {
                "id": "cljeecjv3005x356rxz79v54v",
                "title": "Dermatite"
              }
            ],
            "family": "interactive-fullscreen",
            "variant": "sorting",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsopinr900kv3b74kkooa4th",
            "type": "image",
            "items": [
              {
                "id": "clsopinr900kw3b7417yizsdx",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/PIamDHCzoalVsTde.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "sOYlTg/Leukoplast_STEPS_skin%20tear_clinical%20image_11.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 1680,
                      "height": 945,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/v9s-dbVgHLZqA99a-Leukoplast_STEPS_skin%2520tear_clinical%2520image_11.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/d_kXaq9Op2bRgGEH.jpg",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>A tecnologia de silicone dos adesivos para pele sensível ajuda na remoção atraumática e a dor ao retirar é reduzida. Eles podem até ser reposicionados sem perder sua força adesiva.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clkwcj8f50017357866ms2560",
            "type": "text",
            "items": [
              {
                "id": "clkwcj49u00153578ttxhucny",
                "paragraph": "<p><span style=\"font-size: 24px;\">As vantagens da tecnologia de silicone referem-se à tensão superficial. Clique nos marcadores na imagem abaixo para aprender como os adesivos tradicionais e os adesivos de silicone diferem quando se trata de tensão superficial e sensibilidade da pele.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#fffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljy7dzp8000435705ea8djij",
            "type": "interactive",
            "items": [
              {
                "x": "14.154062605063114",
                "y": "37.17207166883681",
                "id": "cljy7dzp900053570sgkg6pb3",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/gkjt3hcTb2-qXoU4.png",
                    "type": "image",
                    "align": "left",
                    "isSquare": false,
                    "crushedKey": "standard%20dressing.png",
                    "dimensions": {
                      "top": 0,
                      "left": 22,
                      "width": 1635,
                      "height": 530,
                      "originalWidth": 1680,
                      "originalHeight": 530
                    },
                    "originalUrl": "standard dressing.png",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/HTh58apJJiJkOIQ3-standard%2520dressing.png",
                      "type": "image",
                      "align": "left",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/9FGPIIandQLvW-e6.png",
                      "originalUrl": "standard dressing.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "title": "Adesivo tradicional",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">O adesivo tradicional tem contato limitado com a pele no início e requer uma adesão maior. Com o tempo, ele aquece e preenche as lacunas, aumentando ainda mais a aderência. Isso exige mais força para remoção.</span></p>"
              },
              {
                "x": "58.297162134285905",
                "y": "38.777008056640625",
                "id": "cljy7dzp900063570ogvmylwb",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/pYy6N5gt4dUw0TsK.jpg",
                    "type": "image",
                    "align": "left",
                    "isSquare": false,
                    "crushedKey": "silicone%20dressing.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 43,
                      "width": 1593,
                      "height": 549,
                      "originalWidth": 1680,
                      "originalHeight": 549
                    },
                    "originalUrl": "silicone dressing.png",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/nGPW1gUrun3nUwnm-silicone%2520dressing.png",
                      "type": "image",
                      "align": "left",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/P2AJ4czrTzhIgk-y.jpg",
                      "originalUrl": "silicone dressing.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "title": "Adesivo de silicone",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Os curativos adesivos de silicone têm uma baixa tensão superficial, o que permite que entrem em contato com toda a superfície da pele desde o início. Eles precisam de menos aderência para criar uma união segura e requerem menos força para removê-los.</span></p>"
              }
            ],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/parvGdATKJBfo978-Standard%2520vs%2520silicone%2520adhesive.png",
                "type": "image",
                "crushedKey": "Standard%20vs%20silicone%20adhesive.png",
                "originalUrl": "Standard vs silicone adhesive.png",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#fffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clix15wol0035356rdf5l61tf",
            "type": "divider",
            "items": [
              {
                "id": "ckus5rpu70010386fx0vf3m3s",
                "type": "",
                "title": "Continue com o teste de conhecimento",
                "buttonColor": "brand",
                "completeHint": "Complete o conteúdo acima antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "",
        "deleted": false,
        "createdAt": "2021-01-18T13:04:23.387Z",
        "updatedAt": "2024-03-25T13:13:03.930Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "e8GBrtGkhqC3uGofNjrWINibhF3ZVXGe",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "Teste de conhecimento",
        "description": "<p><span style=\"font-size: 24px;\">É hora de testar seus conhecimentos! Você deve responder corretamente 8 das 10 perguntas para ser aprovado no teste e completar o curso.!</span></p><p><br></p>",
        "type": "quiz",
        "icon": "Quiz",
        "items": [
          {
            "id": "cl6kq79y80003356qo5i1cbx8",
            "type": "MULTIPLE_RESPONSE",
            "media": {
              "tmp": {
                "image": {
                  "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/xuQR9WouCrZP65US.jpg",
                  "type": "image",
                  "align": "left",
                  "isSquare": false,
                  "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/xuQR9WouCrZP65US.jpg",
                  "dimensions": {
                    "top": 0,
                    "left": 0,
                    "width": 1680,
                    "height": 882,
                    "originalWidth": 1680,
                    "originalHeight": 1144
                  },
                  "originalUrl": "Leukoplast_SkinTears_Women_Pose03+Wound_1565_CMYK.png",
                  "originalImage": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/VFpcFegzFbDkcbkv-Leukoplast_SkinTears_Women_Pose03%252BWound_1565_CMYK.png",
                    "type": "image",
                    "align": "left",
                    "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/rKWvownzH-dDnEjw.jpg",
                    "originalUrl": "Leukoplast_SkinTears_Women_Pose03+Wound_1565_CMYK.png",
                    "useCrushedKey": true
                  },
                  "useCrushedKey": true
                }
              }
            },
            "title": "<p><span style=\"font-size: 22px;\">Quais das seguintes medidas são importantes para evitar MARSI?</span></p><p><span style=\"font-size: 22px;\">Atividade de seleção múltipla.</span></p>",
            "answers": [
              {
                "id": "cl6kq79y80004356qdi3y18nx",
                "title": "<p><span style=\"font-size: 22px;\">Identificação de pacientes de alto risco.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cl6kq79y80005356qb4hcuttk",
                "title": "<p><span style=\"font-size: 22px;\">Regime individualizado de cuidado da pele.</span></p>",
                "feedback": ""
              },
              {
                "id": "cl6x7egb10002356qiauf7um8",
                "title": "<p><span style=\"font-size: 22px;\">Use principalmente adesivos à base de borracha.</span></p>"
              },
              {
                "id": "clkwgsn53006j35784hgww116",
                "title": "<p><span style=\"font-size: 22px;\">Seleção apropriada do adesivo.</span></p>"
              },
              {
                "id": "clkwgt46e00833578bqqmyups",
                "title": "<p><span style=\"font-size: 22px;\">Boas técnicas de aplicação e remoção.</span></p>"
              },
              {
                "id": "clkwgtj6z009q3578d7pu1pgg",
                "title": "<p><span style=\"font-size: 22px;\">Uso de produtos de barreira e removedores de adesivos.</span></p>"
              }
            ],
            "correct": "cl6kq79y80005356qb4hcuttk",
            "corrects": [
              "cl6kq79y80004356qdi3y18nx",
              "cl6kq79y80005356qb4hcuttk",
              "clkwgsn53006j35784hgww116",
              "clkwgt46e00833578bqqmyups",
              "clkwgtj6z009q3578d7pu1pgg"
            ],
            "feedback": ""
          },
          {
            "id": "cl6kq79y80006356qqyjmx5y2",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">Quais das seguintes circunstâncias são indicações de pacientes de alto risco?</span></p><p><span style=\"font-size: 22px;\">Atividade de seleção múltipla.</span></p>",
            "answers": [
              {
                "id": "cl6kq79y80007356ql6hczpby",
                "title": "<p><span style=\"font-size: 22px;\">Extremos de idade: muito jovem ou idade avançada.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cl6kq79y8000a356qtljjedtk",
                "title": "<p><span style=\"font-size: 22px;\">Condições dermatológicas.</span></p>",
                "feedback": ""
              },
              {
                "id": "cl6kq79y80008356q7r8a2pqu",
                "title": "<p><span style=\"font-size: 22px;\">Atividades esportivas extremas.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli03xop7009b356pfrt5m8iu",
                "title": "<p><span style=\"font-size: 22px;\">Desnutrição e desidratação.</span></p>"
              },
              {
                "id": "cli03ybl3009y356pxaj4ykmr",
                "title": "<p><span style=\"font-size: 22px;\">Edema.</span></p>"
              }
            ],
            "correct": "cl6kq79y80008356q7r8a2pqu",
            "corrects": [
              "cl6kq79y80007356ql6hczpby",
              "cl6kq79y8000a356qtljjedtk",
              "cli03xop7009b356pfrt5m8iu",
              "cli03ybl3009y356pxaj4ykmr"
            ],
            "feedback": ""
          },
          {
            "id": "cli04iomj0011356p9veupu5n",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">O que é necessário para uma avaliação completa da pele?</span></p><p><span style=\"font-size: 22px;\">Atividade de seleção múltipla.</span></p>",
            "answers": [
              {
                "id": "cli04iomm0012356ph5ubvfq5",
                "title": "<p><span style=\"font-size: 22px;\">Inspeção visual da pele e palpação, se necessário. </span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04iomm0014356pdd6e0c16",
                "title": "<p><span style=\"font-size: 22px;\">Avaliação da temperatura, cor, nível de umidade, fragilidade, turgor e integridade da pele.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04iomm0015356pg1hxfkh5",
                "title": "<p><span style=\"font-size: 22px;\">Informação do tipo sanguíneo.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04iomm0013356pitlt9578",
                "title": "<p><span style=\"font-size: 22px;\">Documentação</span></p>",
                "correct": true,
                "feedback": ""
              }
            ],
            "correct": "cli04iomm0012356ph5ubvfq5",
            "corrects": [
              "cli04iomm0012356ph5ubvfq5",
              "cli04iomm0013356pitlt9578",
              "cli04iomm0014356pdd6e0c16"
            ],
            "feedback": ""
          },
          {
            "id": "cli04c0z00009356phxrat49g",
            "type": "MATCHING",
            "title": "<p><span style=\"font-size: 22px;\">O que caracteriza os três tipos de adesivos? À base de borracha, à base de acrílico e à base de silicone.</span></p><p><span style=\"font-size: 22px;\">Faça a correspondência entre os diferentes tipos de adesivo e as características corretas para completar as frases.</span></p>",
            "answers": [
              {
                "id": "cli04c0z0000a356popuenf0s",
                "title": "Adesivos à base de borracha são ",
                "matchTitle": "adesivos tradicionais com alto nível de aderência, mas com possível impacto na integridade da pele."
              },
              {
                "id": "cli04c0z0000b356pmcj9sa42",
                "title": "Adesivos à base de acrílico são ",
                "matchTitle": "adesivos de baixa alergia e amigáveis à pele para uso diário em pacientes de baixo risco."
              },
              {
                "id": "cli04c0z0000c356p2l4cjkjh",
                "title": "Os adesivos à base de silicone são ",
                "matchTitle": "adesivos amigáveis à pele com um nível de adesão mais baixo, mas bons para a remoção atraumática."
              }
            ],
            "feedback": ""
          },
          {
            "id": "cli04m66e006k356pf07xfruc",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">Quais fatores são importantes para a escolha adequada do adesivo para o tratamento ou a prevenção de MARSI?</span></p><p><span style=\"font-size: 22px;\">Atividade de seleção múltipla.</span></p>",
            "answers": [
              {
                "id": "cli04m66h006l356pangbfv7d",
                "title": "<p><span style=\"font-size: 22px;\">Gênero do paciente.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04m66h006o356p69bz99qz",
                "title": "<p><span style=\"font-size: 22px;\">Avaliação da pele.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04m66h006m356pqschbryq",
                "title": "<p><span style=\"font-size: 22px;\">Tipo de MARSI. </span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04m66h006n356pmz198k5n",
                "title": "<p><span style=\"font-size: 22px;\">Fatores de risco do paciente.&nbsp;</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04nx7q00bd356phuzznf91",
                "title": "<p><span style=\"font-size: 22px;\">Características do adesivo.</span></p>"
              }
            ],
            "correct": "cli04m66h006l356pangbfv7d",
            "corrects": [
              "cli04m66h006m356pqschbryq",
              "cli04m66h006n356pmz198k5n",
              "cli04m66h006o356p69bz99qz",
              "cli04nx7q00bd356phuzznf91"
            ],
            "feedback": ""
          },
          {
            "id": "cli1cp27y0020356ppmmwa7km",
            "type": "MATCHING",
            "title": "<p><span style=\"font-size: 22px;\">Ao selecionar adesivos, certas propriedades podem ajudar a reduzir o risco de certos tipos de MARSI. Faça a correspondência entre o tipo de MARSI e a propriedade correta do adesivo para completar as frases.</span></p>",
            "answers": [
              {
                "id": "cli1cp2810021356puu5nto5r",
                "title": "O risco de lacerações cutâneas pode ser reduzido ao selecionar adesivos que sejam ",
                "matchTitle": "Muito suave com a pele para garantir uma remoção atraumática."
              },
              {
                "id": "cli1cp2810022356prnfeqis8",
                "title": "O risco de dermatite pode ser reduzido com a seleção de adesivos e materiais de suporte que sejam ",
                "matchTitle": "Amigável à pele e com baixo potencial de alergia."
              },
              {
                "id": "cli1cp2810023356p5y247gg7",
                "title": "O risco de bolhas por tensão pode ser reduzido ao selecionar adesivos que sejam ",
                "matchTitle": "esticável, flexível e muito maleável."
              }
            ],
            "feedback": ""
          },
          {
            "id": "cli1cu3uh0024356p2d6cdf74",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">Como garantir uma boa aplicação de adesivo para reduzir o risco de MARSI? Selecione todos os fatores importantes.</span></p>",
            "answers": [
              {
                "id": "cli1cu3ul0025356p1yq1w4ho",
                "title": "<p><span style=\"font-size: 22px;\">Certifique-se de que a pele esteja sempre seca.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0027356p2qfxr9no",
                "title": "<p><span style=\"font-size: 22px;\">Certifique-se de que a pele esteja sempre úmida.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0028356psgp7yi23",
                "title": "<p><span style=\"font-size: 22px;\">Certifique-se de esticar o produto adesivo médico o máximo possível.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0026356ptgqaoji5",
                "title": "<p><span style=\"font-size: 22px;\">Aplique produtos adesivos médicos elásticos com a orientação correta, caso haja expectativa de inchaço</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cwai4009s356p9v85t8w9",
                "title": "<p><span style=\"font-size: 22px;\">Utilize uma pressão suave durante a aplicação.</span></p>"
              },
              {
                "id": "clkwhvp7c01ix3578wv6iiltu",
                "title": "<p><span style=\"font-size: 22px;\">Reajuste o produto adesivo médico, se necessário.</span></p>"
              }
            ],
            "correct": "",
            "corrects": [
              "cli1cu3ul0025356p1yq1w4ho",
              "cli1cu3ul0026356ptgqaoji5",
              "cli1cwai4009s356p9v85t8w9",
              "clkwhvp7c01ix3578wv6iiltu"
            ],
            "feedback": ""
          },
          {
            "id": "clkwhwwsh01k63578pz56pzzi",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">Como se garante uma boa remoção do adesivo para reduzir o risco de MARSI? Selecione todos os fatores importantes.&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1cu3ul0025356p1yq1w4ho",
                "title": "<p><span style=\"font-size: 22px;\">Sempre use as duas mãos. </span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0027356p2qfxr9no",
                "title": "<p><span style=\"font-size: 22px;\">Retire o produto adesivo médico o mais rápido possível.&nbsp;</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0028356psgp7yi23",
                "title": "<p><span style=\"font-size: 22px;\">Retire o produto adesivo médico lentamente. &nbsp;</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0026356ptgqaoji5",
                "title": "<p><span style=\"font-size: 22px;\">Nunca cutuque nem raspe a borda do curativo.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cwai4009s356p9v85t8w9",
                "title": "<p><span style=\"font-size: 22px;\">Certifique-se de que o adesivo não seja arrancado, puxando-o para cima com uma das mãos.</span></p>"
              }
            ],
            "correct": "cli1cu3ul0025356p1yq1w4ho",
            "corrects": [
              "cli1cu3ul0025356p1yq1w4ho",
              "cli1cwai4009s356p9v85t8w9",
              "cli1cu3ul0028356psgp7yi23",
              "cli1cu3ul0026356ptgqaoji5"
            ],
            "feedback": ""
          },
          {
            "id": "cli1cxp0m00a4356pyb4lkh9c",
            "type": "MULTIPLE_CHOICE",
            "title": "<p><span style=\"font-size: 22px;\">Os produtos de barreira para a pele e os removedores de adesivos médicos podem ajudar a prevenir e proteger contra a MARSI. Isso é verdadeiro ou falso?&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1cxp0r00a5356p94f2mact",
                "title": "<p><span style=\"font-size: 22px;\">Falso</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cxp0r00a6356ppi6egala",
                "title": "<p><span style=\"font-size: 22px;\">Verdadeiro</span></p>",
                "feedback": ""
              }
            ],
            "correct": "cli1cxp0r00a6356ppi6egala",
            "corrects": [
              "cli1cxp0r00a5356p94f2mact"
            ],
            "feedback": ""
          },
          {
            "id": "clkwi2eub01r335783l3dg5ef",
            "type": "MULTIPLE_CHOICE",
            "title": "<p><span style=\"font-size: 22px;\">Que tipo de adesivo usa a tensão superficial a seu favor para a remoção atraumática?&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1cxp0r00a5356p94f2mact",
                "title": "<p><span style=\"font-size: 22px;\">Adesivos tradicionais.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cxp0r00a6356ppi6egala",
                "title": "<p><span style=\"font-size: 22px;\">Adesivos de silicone.</span></p>",
                "feedback": ""
              }
            ],
            "correct": "cli1cxp0r00a6356ppi6egala",
            "corrects": [
              "cli1cxp0r00a5356p94f2mact"
            ],
            "feedback": ""
          }
        ],
        "media": {},
        "piles": [],
        "settings": {
          "retryCount": -1,
          "passingScore": 80,
          "revealAnswers": "all",
          "passToContinue": false,
          "shuffleAnswerChoices": true,
          "randomizeQuestionOrder": true
        },
        "duplicatedFromId": "",
        "deleted": false,
        "createdAt": "2022-08-08T12:24:30.112Z",
        "updatedAt": "2024-01-11T09:27:25.602Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": false,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "sbx88kt9TlBjd6eESUAmYy7INZO44uea",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "Muito bem!",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl1v0rioj00063c5xna9scnfk",
            "type": "image",
            "items": [
              {
                "id": "cl1v0rioj00073c5x75oqdb7o",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/5eyVWRgyw1CP90AZ.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                    "dimensions": {
                      "top": 165,
                      "left": 0,
                      "width": 1680,
                      "height": 572,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/yR1q9lE44orGwD7T-Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/y1ltTWazVZBTUkah.jpg",
                      "originalUrl": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Você completou com sucesso este módulo sobre a prevenção e o tratamento das MARSI. Agora, pode sair do módulo ou continuar com a lista de referências.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cku8spgyz00gl386ilzk3tt50",
            "type": "interactive",
            "items": [
              {
                "id": "cku8rl5qx000p386i1ehfwql0",
                "type": "exit-course",
                "label": "SAIR",
                "description": "<p><span style=\"font-size: 24px;\"><span style=\"color: rgb(49, 53, 55);\">Clique para sair do módulo.</span></span></p>",
                "destination": "exit-course"
              }
            ],
            "family": "buttons",
            "variant": "button",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "clkwi9e3b01r43578zf1ha901",
            "type": "divider",
            "items": [
              {
                "id": "clkwi9e3c01r535786yds0pzd",
                "type": "",
                "title": "LISTA DE REFERÊNCIAS",
                "buttonColor": "brand",
                "completeHint": "Complete o conteúdo acima antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "arEwMnP9-PDVNH1Zwn9ro3tavZLbw1lI",
        "deleted": false,
        "createdAt": "2021-11-29T14:15:43.266Z",
        "updatedAt": "2023-11-03T12:42:26.918Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "dIUnrfEyRPuEf_B2tClBz2UPuw8cokCA",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "Referências",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl1v0rioj00063c5xna9scnfk",
            "type": "image",
            "items": [
              {
                "id": "cl1v0rioj00073c5x75oqdb7o",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/jQCCRrD5YbQ7WaaE-TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "type": "image",
                    "crushedKey": "TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "originalUrl": "TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>As seguintes publicações foram usadas como referências ao longo do módulo. &nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl6kjta2c001r356qv1xab5m1",
            "type": "text",
            "items": [
              {
                "id": "cl6kjta2c001s356qf5t5o62x",
                "paragraph": "<p><span style=\"font-size: 24px;\">1. Stephen-Haynes J &amp; Carville K.&nbsp;</span><span style=\"font-size: 24px;\">Skin tears made easy.<em>&nbsp;</em>Wounds International. 2011;2(4):1-6.</span></p><p><span style=\"font-size: 24px;\">2. Thayer D. Skin damage associated with intravenous therapy: &nbsp; &nbsp; &nbsp; &nbsp; common problems and strategies for prevention. J Infus Nurs. 2012;35(6):390-401.</span></p><p><span style=\"font-size: 24px;\">3. Lawton S. Skin 1: the structure and functions of the skin. Nurs Times. 2019;115(12):30-3.</span></p><p><span style=\"font-size: 24px;\">4. LeBlanc K et al. Best practice recommendations for the prevention and management of skin tears in aged skin. Wounds International. 2018.</span></p><p><span style=\"font-size: 24px;\">5. McNichol L et al. Medical adhesives and patient safety: state of the science: consensus statements for the assessment, prevention, and treatment of adhesive-related skin injuries.<em>&nbsp;</em>J Wound Ostomy Continence Nurs. 2013;40(4):365-E2.&nbsp;</span></p><p><span style=\"font-size: 24px;\">6. Fumarola S et al. Overlooked and underestimated: medical adhesive-related skin injuries. Best practice consensus document on prevention. J Wound Care. 2020;29(3):1.</span></p><p><span style=\"font-size: 24px;\">7. Ousey K &amp; Wasek S. Clinician perspectives on medical adhesive-related skin injuries. Wounds UK. 2016;12(4).</span></p><p><span style=\"font-size: 24px;\">8. Maene B. Hidden costs of medical tape-induced skin injuries. Wounds UK. 2013;9(1).</span></p><p><span style=\"font-size: 24px;\">9. Downie F &amp; Collier M. Medical adhesive related skin injury (MARSI): Wounds UK<em>&nbsp;</em>made easy. Wounds UK. 2021;17(1).</span></p><p><span style=\"font-size: 24px;\">10. LeBlanc K et al. Best practice recommendations for prevention and management of periwound skin complications. Wounds international. 2021.</span></p><p><span style=\"font-size: 24px;\">11. Dunk et al. Best practice recommendations for holistic strategies to promote and maintain skin integrity. Wounds International. 2020.</span></p><p><span style=\"font-size: 24px;\">12. Yates S, McNichol L, Heinecke SB, Gray M. Embracing the concept, defining the practice, and changing the outcome: setting the standard for medical adhesive-related skin injury interventions in WOC nursing practice. J Wound Ostomy Continence Nurs. 2017;44(1):13-17.</span></p><p><span style=\"font-size: 24px;\">13. Upton P et al. Complications associated with postoperative dressings: a clinician&rsquo;s perspective. Wound Practice and Research. 2019; 27(4): 158-63.</span></p><p><span style=\"font-size: 24px;\">14. Konya C et al. Skin injuries caused by medical adhesive tape in older people and associated factors. J Clin Nurs. 2010;19(9-10):1236-42.</span></p><p><span style=\"font-size: 24px;\">15. Farris MK et al. Medical adhesive-related skin injury prevalence among adult acute care patients: a single-center observational study. J Wound Ostomy Continence Nurs. 2015;42(6):589-98.</span></p><p><span style=\"font-size: 24px;\">16. Wang D et al. Medical adhesive-related skin injuries and associated risk factors in a pediatric intensive care unit. Adv Skin Wound Care. 2019;32(4):176-182.</span></p><p><span style=\"font-size: 24px;\">17. Zhao H et al. Prevalence of medical adhesive-related skin injury at peripherally inserted central catheter insertion site in oncology patients.<em>&nbsp;</em>J Vasc Access. 2018;19(1):23-27.</span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">18. Ratliff CR. Descriptive study of the frequency of medical adhesive-related skin injuries in a vascular clinic. J Vasc Nurs. 2017;35(2):86-89.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">19. Alavi A, Sibbald RG, Ladizinski B, Saraiya A, Lee KC, Skotneicki-Grant S, Maibach H. Wound-related allergic/irritant contact dermatitis. Advances in skin &amp; wound care. 2016;29(6).</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">20. Hitchcock J, Savine L. Medical adhesive-related skin injuries associated with vascular access. Br J Nurs. 2017;26(8):S4-S12.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">21. International Wound Infection Institute (IWII). Wound Infection in Clinical Practice. Wounds International 2022.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">22. Ubbink DT et al. Evidence-Based Care of Acute Wounds: A Perspective. Adv Wound Care (New Rochelle). 2015;4(5):286-294.</span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "BbO7I2lMdMWToVrdPnR82stmcOdl0Otc",
        "deleted": false,
        "createdAt": "2022-08-08T09:23:46.938Z",
        "updatedAt": "2024-01-11T08:59:21.063Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      }
    ],
    "jobs": [],
    "labelSetId": "vsB-kUOtq5l7HkElQ8hasPAQ",
    "deleted": false,
    "createdAt": "2023-05-24T12:51:49.384Z",
    "updatedAt": "2024-03-28T08:59:08.565Z",
    "markComplete": false,
    "isDefault": false,
    "ready": true,
    "reviewId": "c601cfef-b349-4c05-be91-a7e757478b14",
    "exportSettings": {
      "title": "Prevención y tratamiento de MARSI",
      "format": "zip",
      "quizId": "e8GBrtGkhqC3uGofNjrWINibhF3ZVXGe",
      "target": "scorm12",
      "shareId": "4CygSh496UxqWy-4wQr6QjcEFSgSvIoS",
      "activeLMS": 0,
      "reporting": "passed-incomplete",
      "exportType": "lms",
      "identifier": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9_rise",
      "targetName": "SCORM 1.2",
      "storylineId": null,
      "completeWith": "quiz",
      "quizComplete": true,
      "activeEdition": 0,
      "disableCoverPage": false,
      "enableExitCourse": false,
      "resetLearnerData": false,
      "updateResumeData": true,
      "storylineComplete": false,
      "completionPercentage": 100
    },
    "headingTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
    "bodyTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
    "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
    "sidebarMode": "open",
    "tenantId": "8db6028c-93bd-4564-a695-adf0dd261aab",
    "showLessonCount": true,
    "showNavigationButtons": true,
    "allowSearch": true,
    "animateBlockEntrance": true,
    "transferredAt": "2023-02-02T14:11:07.832Z",
    "allowCopy": false,
    "enableVideoPlaybackSpeed": true,
    "jobType": null,
    "partnerContentId": null,
    "cardImage": {},
    "theme": {
      "themeId": "classic",
      "navigation": true,
      "showAuthor": true,
      "allowSearch": true,
      "colorAccent": "#e40428",
      "blockCorners": "ROUNDED",
      "buttonScheme": "LIGHT",
      "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "coverPageType": "LEFT_OVERLAY",
      "bodyTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
      "navigationType": "SIDEBAR",
      "blockPaddingTop": 30,
      "coverImageAlpha": 50,
      "navigationStyle": "LIGHT_IMAGE",
      "showLessonCount": true,
      "lessonHeaderSize": "MEDIUM",
      "buttonInlineStyle": "ROUNDED",
      "coverImageDefault": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg",
      "headingTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
      "lessonHeaderColor": null,
      "lessonHeaderStyle": "LIGHT",
      "sidebarStartsOpen": true,
      "blockPaddingBottom": 30,
      "markLessonsComplete": false,
      "animateBlockEntrance": true,
      "navigationRestricted": false,
      "buttonNavigationStyle": "FULL",
      "showNavigationButtons": true,
      "compactShowLessonCount": true,
      "lessonHeaderImageAlpha": 0.6,
      "lessonHeaderImageColor": "DARK",
      "navigationOverlayImage": "https://articulateusercontent.com/assets/rise/assets/themes/example-header-image.jpg",
      "enableVideoPlaybackSpeed": true,
      "navigationOverlayImageAlpha": 0.6,
      "navigationOverlayImageColor": "DARK"
    },
    "lessonHeaderImage": {},
    "overlayNavigationImage": {},
    "type": null,
    "lastImportedXliff": null,
    "locale": null,
    "sourceCourseLocaleId": null,
    "experiments": null,
    "features": {
      "rise-authoring-controls": true,
      "rise-auto-calc-contrast": true,
      "rise-block-controls-phase-one": true,
      "rise-block-controls-phase-two": true,
      "rise-course-navigation": true,
      "rise-course-themes": true,
      "rise-randomize-block-bg-images": true,
      "rise-theme-image-overlay-updates": true
    },
    "authors": [
      {
        "id": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "avatar": "U1QpqS/small.png",
        "authorName": "Lisa Agerbæk"
      },
      {
        "id": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
        "avatar": "96Vmub/small.png",
        "authorName": "Malina Andrén"
      },
      {
        "id": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
        "avatar": "c2g81V/small.png",
        "authorName": "Olga Kuzmenko"
      },
      {
        "id": "aid|188dd1f1-afab-48b7-a744-b322fd5ab0c3",
        "avatar": "U1QpqS/small.png",
        "authorName": "Lotten Andrér"
      }
    ],
    "bodyTypeface": "Open Sans",
    "headingTypeface": "Open Sans",
    "uiTypeface": "Lato",
    "lmsOptions": {
      "enableExitCourse": false,
      "disableCoverPage": false
    },
    "mondrian": {}
  },
  "labelSet": {
    "id": "vsB-kUOtq5l7HkElQ8hasPAQ",
    "author": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
    "name": "Dynacast AS - english - Transferred",
    "defaultId": null,
    "defaultSet": false,
    "labels": {
      "result": "resultado",
      "search": "buscar",
      "results": "resultados",
      "quizNext": "PRÓXIMO",
      "tabGroup": "Aba",
      "codeGroup": "Código",
      "noResults": "Nenhum resultado encontrado para",
      "noteGroup": "Nota",
      "quizScore": "Sua pontuação",
      "quizStart": "INICIAR TESTE",
      "courseExit": "SAIR DO CURSO",
      "courseHome": "Início",
      "lessonName": "Lição",
      "quizSubmit": "ENVIAR",
      "quoteGroup": "Citação",
      "salutation": "👋 Adeus!",
      "buttonGroup": "Botão",
      "courseStart": "INICIAR CURSO",
      "embedViewOn": "VER EM",
      "exitMessage": "Agora você pode sair desta página.",
      "quizCorrect": "",
      "quizPassing": "APROVADO",
      "quizResults": "Resultados do teste",
      "courseResume": "RETOMAR CURSO",
      "processStart": "INICIAR",
      "processSwipe": "Deslize para continuar",
      "quizContinue": "Continuar",
      "quizLandmark": "Teste",
      "quizQuestion": "Pergunta",
      "courseDetails": "DETALHES",
      "embedReadMore": "Ler mais",
      "feedbackGroup": "Feedback",
      "quizIncorrect": "",
      "quizTakeAgain": "TENTAR NOVAMENTE",
      "sortingReplay": "REPETIR",
      "accordionGroup": "Acordeão",
      "embedLinkGroup": "Conteúdo incorporado",
      "lessonComplete": "CONCLUÍDO",
      "statementGroup": "Declaração",
      "storylineGroup": "História",
      "attachmentGroup": "Anexo",
      "embedPhotoGroup": "Foto incorporada",
      "embedVideoGroup": "Vídeo incorporado",
      "playButtonLabel": "Reproduzir",
      "processComplete": "Concluído",
      "processLandmark": "Processo",
      "processNextStep": "PRÓXIMO PASSO",
      "processStepName": "Passo",
      "seekSliderLabel": "Buscar",
      "sortingLandmark": "Atividade de classificação",
      "audioPlayerGroup": "Reprodutor de áudio. Use a barra de espaço para reproduzir/pausar e as teclas de seta para avançar.",
      "buttonStackGroup": "Grupo de botões",
      "embedPlayerGroup": "Reprodutor de mídia incorporado",
      "lessonRestricted": "As lições devem ser concluídas em ordem",
      "pauseButtonLabel": "Pausar",
      "scenarioComplete": "Cenário concluído",
      "scenarioContinue": "CONTINUAR",
      "scenarioTryAgain": "TENTAR NOVAMENTE",
      "textOnImageGroup": "Texto sobre imagem",
      "timelineLandmark": "Linha do tempo",
      "urlEmbedLandmark": "URL/Incorporar",
      "videoPlayerGroup": "Reprodutor de vídeo. Use a barra de espaço para reproduzir/pausar e as teclas de seta para avançar.",
      "blocksClickToFlip": "Clique nas cartas para virar",
      "blocksPreposition": "de",
      "bulletedListGroup": "Lista com marcadores",
      "checkboxListGroup": "Lista de seleção",
      "imageAndTextGroup": "Imagem e texto",
      "imageGalleryGroup": "Galeria de imagens",
      "lessonPreposition": "de",
      "numberedListGroup": "Lista numerada",
      "processLessonName": "Lição",
      "processStartAgain": "COMEÇAR NOVAMENTE",
      "scenarioStartOver": "RECOMEÇAR",
      "courseSkipToLesson": "PULAR PARA LIÇÃO",
      "flashcardBackLabel": "Verso do cartão",
      "flashcardGridGroup": "Grade de cartões",
      "nextFlashCardLabel": "Próximo cartão",
      "flashcardFrontLabel": "Frente do cartão",
      "flashcardStackGroup": "Pilha de cartões",
      "knowledgeCheckGroup": "Verificação de conhecimento",
      "sortingCardsCorrect": "Cartões corretos",
      "hamburgerButtonLabel": "Menu lateral do curso",
      "lessonHeaderLandmark": "Cabeçalho da lição",
      "numberedDividerGroup": "Divisor numerado",
      "lessonContentLandmark": "Conteúdo da lição",
      "lessonSidebarLandmark": "Barra lateral da lição",
      "quizAnswerPlaceholder": "Digite sua resposta aqui",
      "labeledGraphicLandmark": "Gráfico rotulado",
      "previousFlashCardLabel": "Cartão anterior",
      "processStepPreposition": "de",
      "overviewPageTitleSuffix": "Visão geral",
      "quizAcceptableResponses": "Respostas aceitáveis",
      "quizRequirePassingScore": "Você precisa passar no teste para continuar",
      "timelineCardGroupPrefix": "Cartão da linha do tempo",
      "labeledGraphicBubbleLabel": "Bolha do gráfico rotulado",
      "labeledGraphicMarkerLabel": "Marcador do gráfico rotulado",
      "labeledGraphicNextMarkerLabel": "Próximo marcador",
      "labeledGraphicPreviousMarkerLabel": "Marcador anterior",
      "a11yAnswerLive": "Sua resposta",
      "a11yAuthorPrefix": "Por",
      "a11yBlockChartBar": "Gráfico de barras",
      "a11yBlockChartLine": "Gráfico de linhas",
      "a11yBlockChartPie": "Gráfico de pizza",
      "a11yBlockCode": "Código",
      "a11yBlockEmbed": "Conteúdo incorporado",
      "a11yBlockFlashcardBack": "Verso do cartão",
      "a11yBlockFlashcardFront": "Frente do cartão",
      "a11yBlockFlashcardGrid": "Grade de cartões",
      "a11yBlockFlashcardStack": "Carrossel de cartões",
      "a11yBlockKnowledgeCheck": "Verificação de conhecimento",
      "a11yBlockKnowledgeCheckFIB": "Verificação de conhecimento: Preencher lacunas",
      "a11yBlockKnowledgeCheckMC": "Verificação de conhecimento: Múltipla escolha",
      "a11yBlockKnowledgeCheckM": "Verificação de conhecimento: Correspondência",
      "a11yBlockKnowledgeCheckMR": "Verificação de conhecimento: Múltiplas respostas",
      "a11yBlockQuoteCarousel": "Carrossel de citações",
      "a11yBlockStoryline": "História",
      "a11yBlockTimeline": "Linha do tempo",
      "a11yCarouselNext": "Próximo",
      "a11yCarouselPrevious": "Anterior",
      "a11yCorrectLive": "Resposta correta",
      "a11yExcelIcon": "Planilha do Microsoft Excel",
      "a11yFileIcon": "Arquivo",
      "a11yGroupAudioPlayer": "Reprodutor de áudio",
      "a11yGroupVideoPlayer": "Reprodutor de vídeo",
      "a11yLabeledGraphicBlock": "Gráfico rotulado",
      "a11yLabeledGraphicButtonMarker": "Marcador",
      "a11yLabeledGraphicIconPlus": "Mais",
      "a11yLabeledGraphicIconDot": "Ponto",
      "a11yLabeledGraphicIconInformation": "Informação",
      "a11yLabeledGraphicIconQuestion": "Ponto de interrogação",
      "a11yLabeledGraphicIconCheck": "Marca de verificação",
      "a11yLabeledGraphicIconX": "X",
      "a11yLabeledGraphicIconHeart": "Coração",
      "a11yLabeledGraphicIconPin": "Alfinete",
      "a11yLabeledGraphicIconArrowLeft": "Seta esquerda",
      "a11yLabeledGraphicIconArrowRight": "Seta direita",
      "a11yLabeledGraphicIconArrowUp": "Seta para cima",
      "a11yLabeledGraphicIconArrowDown": "Seta para baixo",
      "a11yLabeledGraphicIconArrowUpLeft": "Seta noroeste",
      "a11yLabeledGraphicIconArrowUpRight": "Seta nordeste",
      "a11yLabeledGraphicIconArrowDownLeft": "Seta sudoeste",
      "a11yLabeledGraphicIconArrowDownRight": "Seta sudeste",
      "a11yLabeledGraphicUnviewed": "Não visualizado",
      "a11yLabeledGraphicViewed": "Visualizado",
      "a11yMediaPause": "Pausar",
      "a11yMediaPlay": "Reproduzir",
      "a11yMediaSeek": "Buscar",
      "a11yNavigationMenuClose": "Fechar menu de navegação",
      "a11yNavigationMenuOpen": "Abrir menu de navegação",
      "a11yPageMarker": "Topo da página",
      "a11yPDFIcon": "Arquivo PDF",
      "a11yPPTIcon": "Apresentação do PowerPoint",
      "a11yQuizFailed": "Reprovado",
      "a11yQuizFeedback": "Feedback",
      "a11yQuizPassed": "Aprovado",
      "a11yQuizReviewCorrectlyChecked": "Corretamente marcado",
      "a11yQuizReviewCorrectlySelected": "Corretamente selecionado",
      "a11yQuizReviewCorrectlyUnchecked": "Corretamente desmarcado",
      "a11yQuizReviewCorrectlyUnselected": "Corretamente não selecionado",
      "a11yQuizReviewIncorrectlyChecked": "Incorretamente marcado",
      "a11yQuizReviewIncorrectlySelected": "Incorretamente selecionado",
      "a11yQuizReviewIncorrectlyUnchecked": "Incorretamente desmarcado",
      "a11yQuizReviewIncorrectlyUnselected": "Incorretamente não selecionado",
      "a11yRegionMainLesson": "Conteúdo da lição",
      "a11yRegionMainOverview": "Visão geral do curso",
      "a11yRegionNavLesson": "Menu de navegação",
      "a11yRegionNavOverview": "Sumário",
      "a11yRestrictedNav": "Esta lição não está disponível no momento",
      "a11yRTFIcon": "Arquivo de texto formatado",
      "a11ySearchClose": "Fechar busca",
      "a11ySearchInput": "Buscar",
      "a11ySearchOpen": "Abrir busca",
      "a11yStatusContinued": "Continuado",
      "a11yStatusAdditionalContent": "Conteúdo adicional carregado",
      "a11yUnzoomImage": "Reduzir imagem",
      "a11yWordIcon": "Documento do Microsoft Word",
      "a11yZipIcon": "Arquivo compactado",
      "a11yZoomImage": "Ampliar imagem",
      "quizRequireAnswer": "Por favor, responda a pergunta para continuar",
      "quizRestart": "Reiniciar",
      "progressPieUnstarted": "Não iniciado",
      "progressPieCompleted": "Concluído",
      "progressPieClickToComplete": "Clique para concluir",
      "progressPieClickToReset": "Clique para reiniciar",
      "progressPieQuizFailed": "Reprovado"
  },
    "deleted": false,
    "createdAt": "2022-04-13T08:55:03.285Z",
    "updatedAt": "2022-04-13T08:55:40.602Z",
    "iso639Code": "en",
    "transferredAt": "2023-09-13T07:05:25.000Z"
  },
  "fonts": [
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Italic.woff",
      "style": "italic",
      "weight": "400"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Bold.woff",
      "style": "normal",
      "weight": "700"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Regular.woff",
      "style": "normal",
      "weight": "400"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Light.woff",
      "style": "normal",
      "weight": "300"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Black.woff",
      "style": "normal",
      "weight": "900"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Italic.woff",
      "style": "italic",
      "weight": "400"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Bold.woff",
      "style": "normal",
      "weight": "700"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Regular.woff",
      "style": "normal",
      "weight": "400"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Light.woff",
      "style": "normal",
      "weight": "300"
    }
  ],
  "media": []
}")
