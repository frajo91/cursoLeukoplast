__resolveJsonp("course:und","{
  "course": {
    "id": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
    "originalId": null,
    "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
    "selectedAuthorId": "none",
    "color": "#e40428",
    "navigationMode": "free",
    "title": "Introducción a MARSI",
    "sharePassword": "",
    "description": "<p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Conoce sobre las lesiones cutáneas relacionadas con adhesivos médicos (MARSI).  En este módulo se abordaran los diferentes tipos de MARSI, por ejemplo, los pacientes de alto riesgo y los factores de riesgo, además de explicar por qué es tan importante conocer sobre esta condición.&nbsp;</span></p><p><br></p><p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Al final del modulo será necesario aprobar la evaluación de conocimiento para completar el módulo. &nbsp;</span></p><br><p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Todas las referencias utilizadas en el módulo están enumeradas en el último capítulo. &nbsp;</span></p><br><p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Duración módulo introductorio = 20 minutos.&nbsp;</span></p>",
    "shareId": "pkeP4Dho6kSYKfWkitVm3e-S-QVQQSCZ",
    "copyOf": "aSxTaWXJcuCCKrQKcdbAJ4lBKm_JgR9e",
    "order": "1711615963870",
    "fonts": null,
    "media": {
      "tmp": {
        "image": {
          "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/vO9WolFej6gaGKHR-Essity_logo_colour_RGB.png",
          "type": "image",
          "width": 140,
          "height": 59,
          "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/QVdBWF7borwCOYOa.png",
          "originalUrl": "Essity_logo_colour_RGB.png",
          "useCrushedKey": true
        }
      },
      "image": {
        "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/0YYzZWLzMRZX3irv-181120_Leukoplast_Logo_RGB.png",
        "type": "image",
        "width": 174,
        "height": 40,
        "crushedKey": "cEkvQRvdyWQQgP7I.png",
        "originalUrl": "181120_Leukoplast_Logo_RGB.png",
        "useCrushedKey": true
      }
    },
    "coverImage": {
      "alpha": 50,
      "media": {
        "image": {
          "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/aUzap1TMAXiFePYr-Leukoplast%2520STEPS_lifestyle%2520visual_father%2520and%2520baby.jpg",
          "crushedKey": "OiQhy7OW0NaG8lhN.jpg",
          "originalUrl": "Leukoplast STEPS_lifestyle visual_father and baby.jpg",
          "useCrushedKey": true,
          "src": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg"
        }
      },
      "displaySidebar": true
    },
    "lessons": [
      {
        "id": "8r8GnL6gYOWG4YouwvosE7I45ka2YDTe",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
        "title": "¿Cómo funciona nuestra piel?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl445k9390006356ocm3cwnek",
            "type": "image",
            "items": [
              {
                "id": "cl445k9390007356okbzuplbp",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/CoSPP9njnXyRYPgP.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_SkinTears_Women_Closeups_1672_RGB.jpg",
                    "dimensions": {
                      "top": 256,
                      "left": 0,
                      "width": 1680,
                      "height": 725,
                      "originalWidth": 1680,
                      "originalHeight": 1121
                    },
                    "originalUrl": "Leukoplast_SkinTears_Women_Closeups_1672_RGB.jpg",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/ws2qTxrPNjPgmDSy-Leukoplast_SkinTears_Women_Closeups_1672_RGB.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/5Vr113p7IHuD9QTj.jpg",
                      "originalUrl": "Leukoplast_SkinTears_Women_Closeups_1672_RGB.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>La piel es el órgano más grande de nuestro cuerpo. Dependiendo de la ubicación anatómica, el grosor promedio de la piel es de 1 a 2 mm y consta de tres capas principales<sup><span style=\"font-size: 14px;\">1</span></sup>.</p><p>Puedes ver el siguiente video para obtener más información.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1jt1c9001h356pqlo0d6x9",
            "type": "multimedia",
            "items": [
              {
                "id": "cli1jt1ca001i356piirlz4zd",
                "media": {
                  "video": {
                    "key": "Skin%20structure%20MARSI_NOPROCESS_.mp4",
                    "url": "https://articulate-us.s3.amazonaws.com/rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/T-hh5XzamWOmtle8-Skin%2520structure%2520MARSI_NOPROCESS_.mp4?AWSAccessKeyId=ASIATDIHEUTRCVFYJNOP&Content-Type=video%2Fmp4&Expires=1695877510&Signature=Obr76BjtNGDK5mzO2pZKKwW9I0g%3D&x-amz-acl=public-read&x-amz-security-token=IQoJb3JpZ2luX2VjEKX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJHMEUCIQCIsr5ccAYn%2FNRpn8OHYbSKkgk6%2FPkej7LrbtesxIjipwIgWyo6JqL0ppfceLibsiPcAB7Y15bcF79FsowF2MfLYXYqgwUInf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwyMTMxNTI3MzY0ODIiDBJuSL%2BEiRAyu1fZ4SrXBMfzKimKP2YOWxb7Nq7ypJ5GfcvP%2FRb0JaFQzW%2FsTGrx5f1542kAz3uCY%2FAQ%2B67XxeyUBgObYojXaaB3otlrzFt%2B5acujr%2BB9tL9Tya5uTWGm3CNlMzTMczIifpJ7KmJQGkuEjHImMNALMw0720CtazeSO4NDeVrWZ9biIhlqFT2ECnE5D2yJc0T%2BEmTeFXy66qVpiPFpnMMpSzq7ZkL0G8a74YLD%2F9bT1R4K2WQOm57fCl6ZTcYiNVt16a8tPVBqqgRSBxPx%2FjvqyUH1kiY7ly2x9WfQ944VyfK40ZYfKo7hperkiLZ8efN5KAuRNEdM%2FhafVX2hrM1s4YZplkeWMIcUgMvawvU2MlxlVHlAlg8%2FHcLaZ7m0f1tPQtPORIl8RTOjqHdPA084hh4bKQdilDoIB%2FYsdOELboZzKXACQ24hUtZEWnGU1lQT9O6ouckr0HoFXhP4FuXRVVRIWWaj28seBr0PS%2FYGiyCOpGuapVu0iRZ6l0ssMqz3HrkJSosycc%2BHO%2BFlSC4uDtXtQ8Slj9TCrQHZ5RvbXDykOuPqgbB4aihP2pn0ZzTKiA2xqH3Ei%2FXua5x95q8zoFMvXQ2QcWOIq6Cr8vXceC6L%2FIdGQPHKmv0NlGpVGriMTKJQxeRrwLFU35ZqE3VlwjovA8CZizjthROXZ6lkfEWjPP7FYFz5acReneYmiv%2BS%2F7wi9cWRkA7EtBo2n6xLVswJNWtFckrRakt%2FLsScnHywzMJLWjQU%2BvV6I2uqe5ZXI9FsbB3PcdPvvqaVJHfOOaCVxa6Gaw%2BMjg6wt8JMM7506gGOpoBwIS9M7aZmwMaVYovGHMNTITiaEkFWno8TiOYH%2B%2BbL0xMCHOOGU267D2J71nykKeEPftoqYzNZ8KmZ1%2BAOQm4Fwk%2FrTuJ4pWh%2BUMc5yzRGSTDxo%2FQ6Pb1XQjmnrc%2Fn3HEc7ljr4PomjrQaoUhxcuqrMYXmYo2JDWBfLo9E3rpXdHYHgL3AO%2FmltMkjDidm13ztupNvcBkpq%2Bidg%3D%3D",
                    "type": "video",
                    "poster": "Skin%20structure%20MARSI_NOPROCESS_.png",
                    "captions": [
                      {
                        "id": "cln2p6hwt002l356zcor6e2su",
                        "key": "Skin%20structure%20-%20MARSI.vtt",
                        "code": "en",
                        "name": "English",
                        "filename": "Skin structure - MARSI.vtt"
                      }
                    ],
                    "filename": "T-hh5XzamWOmtle8-Skin%20structure%20MARSI_NOPROCESS_.mp4",
                    "thumbnail": "https://images.articulate.com/f:jpg,b:fff,w:100,h:100,s:cover/rise%2Fcourses%2FKCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77%2FYo3A1pgySeELTtsp-Skin%2520structure%2520MARSI_NOPROCESS_.png",
                    "captionUID": "cln2p6j07002m356z9ns6uk6k",
                    "trackingId": "cli1jt1c9001h356pqlo0d6x9",
                    "originalUrl": "Skin structure MARSI_NOPROCESS_.mp4",
                    "skipProcess": true,
                    "cancelSource": {
                      "token": {
                        "promise": {}
                      }
                    },
                    "trackingContext": "block:video"
                  }
                },
                "caption": ""
              }
            ],
            "family": "multimedia",
            "variant": "video",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clhzx7eoy000x356pd2647ojm",
            "type": "text",
            "items": [
              {
                "id": "clhkde4lc000f356xf9phf225",
                "paragraph": "<p><span style=\"font-size: 24px;\">¿Recuerdas las diferencias entre las tres capas principales de la piel?</p><p><span style=\"font-size: 24px;\">Arrastra las descripciones al cuadro de la capa de piel correspondiente. Recibirá comentarios inmediatamente.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhzzd6kn002e356pip935ugg",
            "type": "interactive",
            "items": [
              {
                "id": "clhzwpwn50003356pwue20mlb",
                "title": "La capa externa",
                "pileId": 1
              },
              {
                "id": "clhzwpwn50004356pz3mzi2kr",
                "title": "Grosor de aproximadamente 1-5 mm",
                "pileId": 2
              },
              {
                "id": "clhzwty7r000d356p8u0xfzqb",
                "title": "Constituida por tejido adiposo y conectivo",
                "pileId": "clhzwty7r000c356p0bsab2yr"
              },
              {
                "id": "clhzwua52000e356pme0pqy5m",
                "title": "Grosor de aproximadamente 0.1 mm",
                "pileId": 1
              },
              {
                "id": "clhzwuqmc000g356pr3t0l8a1",
                "title": "Firmemente conectada a la dermis (unión dermoepidérmica)",
                "pileId": 1
              },
              {
                "id": "clhzwvjao000i356p0zy4uo85",
                "title": "No tiene suministro propio de sangre",
                "pileId": 1
              },
              {
                "id": "clhzwvt96000k356p85mal8qg",
                "title": "Recibe oxígeno y nutrientes a través de la dermis",
                "pileId": 1
              },
              {
                "id": "clhzx1jra000o356peupq8eh3",
                "title": "Contiene fibras elásticas",
                "pileId": 2
              },
              {
                "id": "clhzx3rlp000q356p5ztnmmus",
                "title": "Contiene vasos sanguíneos, nervios, linfáticos y glándulas sudoríparas",
                "pileId": 2
              },
              {
                "id": "clhzx6emm000s356p6a6952i0",
                "title": "Contiene vasos sanguíneos y nervios",
                "pileId": "clhzwty7r000c356p0bsab2yr",
                "isNewlyInserted": true
              }
            ],
            "piles": [
              {
                "id": 1,
                "title": "Epidermis"
              },
              {
                "id": 2,
                "title": "Dermis"
              },
              {
                "id": "clhzwty7r000c356p0bsab2yr",
                "title": "Hipodermis"
              }
            ],
            "family": "interactive-fullscreen",
            "variant": "sorting",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clm6a8qsa0005356zplrwzewc",
            "type": "text",
            "items": [
              {
                "id": "clhzxq7u40019356pkyl9dr32",
                "paragraph": "<p><span style=\"font-size: 24px;\">¿Lo lograste correctamente?</p><br><p>Aquí tiene un resumen de las características y funciones de las tres capas de la piel.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 0,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhzzdcqq002g356pchgo956k",
            "type": "image",
            "items": [
              {
                "id": "clhkc71mr0007356x50s8btjq",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/xRZIY1Men1LtslZX.png",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "epidermis.png",
                    "dimensions": {
                      "top": 0,
                      "left": 238,
                      "width": 1212,
                      "height": 1214,
                      "originalWidth": 1680,
                      "originalHeight": 1575
                    },
                    "originalUrl": "epidermis.png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/2yQ6NMN5kLWgzoEZ-epidermis.png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/Sf6fCyL9fkMutIvN.png",
                      "originalUrl": "epidermis.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<ul><li><span style=\"font-size: 22px;\">La <strong>epidermis</strong> es la capa externa más delgada (alrededor de 0,1 mm</span><span style=\"font-size: 14px;\"><sup>1, 2</sup></span><span style=\"font-size: 22px;\">).&nbsp;</span></li><li><span style=\"font-size: 22px;\">Está firmemente conectada a la dermis (la unión dermoepidérmica) y no tiene su propio suministro de sangre</span><span style=\"font-size: 14px;\"><sup>1, 3</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></li><li><span style=\"font-size: 22px;\">Recibe oxígeno y nutrientes a través de la dermis</span><span style=\"font-size: 14px;\"><sup>1, 3</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></li></ul>"
              },
              {
                "id": "clhkc71mr0008356xpoug4wy5",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/mmme1FYG-hQwrzgP.png",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "dermis.png",
                    "dimensions": {
                      "top": 0,
                      "left": 246,
                      "width": 1209,
                      "height": 1211,
                      "originalWidth": 1680,
                      "originalHeight": 1575
                    },
                    "originalUrl": "dermis.png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/xsFfWeOekagc3uw--dermis.png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/U5XPv9FAbcCkhTYS.png",
                      "originalUrl": "dermis.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<ul><li><span style=\"font-size: 22px;\">La <strong>dermis</strong> es más gruesa que la epidermis, con un grosor de alrededor de 1-5 mm</span><span style=\"font-size: 14px;\"><sup>3</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></li><li><span style=\"font-size: 22px;\">Está formada por tejido conectivo y células especializadas como los fibroblastos.&nbsp;</span></li><li><span style=\"font-size: 22px;\">Contiene vasos sanguíneos, nervios, linfáticos y glándulas sudoríparas</span><span style=\"font-size: 14px;\"><sup>1, 3</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></li><li><span style=\"font-size: 22px;\">La elastina y el colágeno proporcionan estructura y resiliencia a la piel</span><span style=\"font-size: 14px;\"><sup>2</sup></span><span style=\"font-size: 22px;\">. </span></li></ul>"
              },
              {
                "id": "clhkc71mr0009356xuy4kuy64",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/yKrIqua5ljr6i3wr.png",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "subcutaneous%20tissue.png",
                    "dimensions": {
                      "top": 0,
                      "left": 258,
                      "width": 1207,
                      "height": 1208,
                      "originalWidth": 1680,
                      "originalHeight": 1575
                    },
                    "originalUrl": "subcutaneous tissue.png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/gR7Fd7Wkhy8fiN8t-subcutaneous%2520tissue.png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/cDHjYc9aVWPcZVsH.png",
                      "originalUrl": "subcutaneous tissue.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<ul><li><span style=\"font-size: 22px;\">La <strong>hipodermis</strong> está formada por tejido adiposo y conectivo</span><span style=\"font-size: 14px;\"><sup>1</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></li><li><span style=\"font-size: 22px;\">Contiene vasos sanguíneos y nervios</span><span style=\"font-size: 14px;\"><sup>3</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></li><li><span style=\"font-size: 22px;\">Ayuda a aislar el cuerpo del frío y contribuye a la absorción de impactos</span><span style=\"font-size: 14px;\"><sup>3</sup></span><span style=\"font-size: 22px;\">.</span></li></ul>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clm6a8wx20007356zabxjf93a",
            "type": "text",
            "items": [
              {
                "id": "clhzx7a3i000v356pwc1zhbot",
                "paragraph": "<p><span style=\"font-size: 24px;\">La piel juega un papel fundamental en el cuidado de nuestra salud y bienestar. Aquí se mencionan algunas funciones vitales de la piel:&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clibgytmh0024356pvvarbitd",
            "type": "image",
            "items": [
              {
                "id": "clibgytmh0025356pmetechq0",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/1c1Ii34iOtR0rxHQ-protective-barrier_skin-functions.png",
                    "type": "image",
                    "crushedKey": "protective-barrier_skin-functions.png",
                    "originalUrl": "protective-barrier_skin-functions.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Actúa como una <strong>barrera protectora</strong>, defendiéndonos contra microorganismos invasores, toxinas y la luz ultravioleta</span><span style=\"font-size: 14px;\"><sup>1</sup></span><span style=\"font-size: 22px;\">. </span></p>"
              },
              {
                "id": "clibgytmh0026356pgf7qodj0",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/9RydI2lD0E9kxvGA-sense_skin-functions.png",
                    "type": "image",
                    "crushedKey": "sense_skin-functions.png",
                    "originalUrl": "sense_skin-functions.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Nos ayuda a <strong>percibir</strong>, por ejemplo, el dolor y la temperatura, y la <strong>secreción</strong> de sebo, sudor y cerumen</span><span style=\"font-size: 14px;\"><sup>1</sup></span><span style=\"font-size: 22px;\">.</span> </p>"
              },
              {
                "id": "clibgytmh0027356pxkhpdn5d",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/xiERL9IjQyPl1zIY-homeostasis_skin-functions.png",
                    "type": "image",
                    "crushedKey": "homeostasis_skin-functions.png",
                    "originalUrl": "homeostasis_skin-functions.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Contribuye al <strong>mantenimiento de la homeostasis</strong> y protege nuestros órganos y tejidos internos</span><span style=\"font-size: 14px;\"><sup>1</sup></span><span style=\"font-size: 22px;\">. </span></p>"
              },
              {
                "id": "clibgytmh0028356pfov6glri",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/Xefo5qE97_U49qwP-vitamin%2520D%2520icon%2520(1).png",
                    "type": "image",
                    "crushedKey": "vitamin%20D%20icon%20%281%29.png",
                    "originalUrl": "vitamin D icon (1).png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Ayuda en la producción y síntesis de vitamina D</strong></span><span style=\"font-size: 14px;\"><sup>1</sup></span><span style=\"font-size: 22px;\">. </span></p>"
              }
            ],
            "family": "gallery",
            "variant": "four column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli011z5o003r356ph0g2qnuj",
            "type": "text",
            "items": [
              {
                "id": "cli011r25003n356psg9rd2lp",
                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(255, 255, 255);\">En el próximo capítulo, profundizaremos en cómo el uso de productos adhesivos médicos puede afectar y dañar la piel, lo que podría resultar en una lesión relacionada con adhesivos médicos, MARSI.</span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl6c208r8003a356qrxd8sy3q",
            "type": "divider",
            "items": [
              {
                "id": "ckus5rpu70010386fx0vf3m3s",
                "type": "",
                "title": "¿Qué es MARSI?",
                "buttonColor": "brand",
                "completeHint": "Complete el contenido arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "",
        "deleted": false,
        "createdAt": "2021-01-18T13:04:23.387Z",
        "updatedAt": "2024-02-15T13:59:07.754Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "yHb_fNhmu4K03MW7CZd2OtEKAYarKo6Q",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
        "title": "¿Qué es MARSI?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "clhyuzh5j001o356rkptdj0n6",
            "type": "image",
            "items": [
              {
                "id": "clhyuzh5j001p356rad82ac57",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/1lxO5rVnBXZIh3jr.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast-Leukomed-Skin-Sensitive-2_0-Application%20%281%29.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 1501,
                      "height": 1064,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast-Leukomed-Skin-Sensitive-2_0-Application (1).png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/2KTnFeng2dU5tD1m-Leukoplast-Leukomed-Skin-Sensitive-2_0-Application%2520(1).png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/CEKRXZBcHFpqazuj.jpg",
                      "originalUrl": "Leukoplast-Leukomed-Skin-Sensitive-2_0-Application (1).png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>MARSI, es el daño o lesión cutánea relacionada con adhesivos médicos. Aunque MARSI es en gran medida prevenible, puede ocurrir en todos los grupos de edad y en cualquier entorno de atención, sin embargo, suele ser poco reconocida<sup><span style=\"font-size: 14px;\">5-8</span></sup>.  Los profesionales de la salud se refieren a MARSI como:</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clks7j3ng000635788dwe3ego",
            "type": "image",
            "items": [
              {
                "id": "clks7j3ng00073578nay8m6x2",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/G1mXZxi3GPjevSGH.png",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Artboard%201.png",
                    "dimensions": {
                      "top": 161,
                      "left": 182,
                      "width": 1337,
                      "height": 1338,
                      "originalWidth": 1680,
                      "originalHeight": 1681
                    },
                    "originalUrl": "Artboard 1.png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/4WZEG0SpQfleOpCc-Artboard%25201.png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/dtPAQSP1ICdurQ-o.png",
                      "originalUrl": "Artboard 1.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Daño en la piel relacionado con el uso de productos o dispositivos adhesivos médicos, como cintas, apósitos, productos para ostomías o estomas, electrodos, parches medicados y tiras para cierre de heridas</strong></span><span style=\"font-size: 14px;\"><sup>6</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.5,
              "cardMode": null,
              "imageSize": "medium",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clm7jp6ht000u3579rmqziq1n",
            "type": "image",
            "items": [
              {
                "id": "clm7jp6ht000v3579c97858d9",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/7_5U4_Bm8LXjSU4l.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast_SkinTears_Women_Leg_2873_CMYK.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 318,
                      "width": 1027,
                      "height": 1027,
                      "originalWidth": 1680,
                      "originalHeight": 1027
                    },
                    "originalUrl": "Leukoplast_SkinTears_Women_Leg_2873_CMYK.png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/1OnhX1MyEwfKuvxD-Leukoplast_SkinTears_Women_Leg_2873_CMYK.png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/S6Q2VS-CUGNLQjJL.jpg",
                      "originalUrl": "Leukoplast_SkinTears_Women_Leg_2873_CMYK.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><br></p><p><span style=\"font-size: 24px;\">MARSI siempre conduce a una pérdida de la <strong>integridad de la piel</strong></span><span style=\"font-size: 14px;\"><sup>1</sup></span><span style=\"font-size: 24px;\">. Cuando nuestra piel se ve dañada, su función protectora se ve afectada, y nuestro cuerpo ya no está tan bien protegido.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.5,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "right",
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhq24xo7000l356p6yc2xpdv",
            "type": "text",
            "items": [
              {
                "id": "clhq24nmu000f356pon7ztfum",
                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\" bis_skin_checked=\"1\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(0, 0, 0);\">El daño en la piel causado por los adhesivos médicos da lugar a diferentes tipos de MARSI. </span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 3,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clhyssjaj0002356x3qp2a9uj",
            "type": "image",
            "items": [
              {
                "id": "clhyssjaj0003356xwm06uoad",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/NcIKTY63Rz09Nu1k-skin-stripping-round.png",
                    "type": "image",
                    "crushedKey": "skin-stripping-round.png",
                    "originalUrl": "skin-stripping-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>El desgarro de la piel</strong> ocurre cuando la adherencia entre la piel y el adhesivo médico es más fuerte que la adherencia con las células del paciente</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              },
              {
                "id": "clhyssjaj0004356xdfigvguq",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/96E-jQgxDm20nfzn-skin-tears-round.png",
                    "type": "image",
                    "crushedKey": "skin-tears-round.png",
                    "originalUrl": "skin-tears-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Las laceraciones de la piel</strong> son heridas traumáticas \"causadas por fuerzas mecánicas, incluyendo la remoción de adhesivos. La gravedad puede variar según la profundidad (sin extenderse a la capa subcutánea)\"</span><span style=\"font-size: 14px;\"><sup>4</sup></span><span style=\"font-size: 22px;\">.</span><span style=\"font-size: 22px;\">&nbsp;</span></p>"
              },
              {
                "id": "clhyssjaj0005356xb5m46986",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/XBpX8KcPam3D5mfW-tension-injury-round.png",
                    "type": "image",
                    "crushedKey": "tension-injury-round.png",
                    "originalUrl": "tension-injury-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Las ampollas por tensión</strong>, o lesiones por tensión, se producen por la distensión de la piel debajo de un adhesivo que no cede</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">. </span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 2,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clj44s4fr000b356rwxkqljxt",
            "type": "image",
            "items": [
              {
                "id": "clhystbqs000d356xjtvx8i52",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/E9cKRlAn9TwCIlV8-dermatitis-round.png",
                    "type": "image",
                    "crushedKey": "dermatitis-round.png",
                    "originalUrl": "dermatitis-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>La dermatitis</strong> es causada por una inflamación debido a una sustancia irritante presente en el adhesivo</span><span style=\"font-size: 14px;\"><sup>5,9</sup></span><span style=\"font-size: 22px;\">. &nbsp; &nbsp;</span></p>"
              },
              {
                "id": "clhystbqs000e356x98mopx5a",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/Xz2BSllIfe-b9v4--maceration-round.png",
                    "type": "image",
                    "crushedKey": "maceration-round.png",
                    "originalUrl": "maceration-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>La maceración</strong> ocurre cuando la piel se ablanda debido a la humedad atrapada bajo el adhesivo</span><span style=\"font-size: 14px;\"><sup>5,6</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              },
              {
                "id": "clhystbqs000f356xdmjcas8k",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/CTNyjP24qWKbHc2Q-folliculitis-round.png",
                    "type": "image",
                    "crushedKey": "folliculitis-round.png",
                    "originalUrl": "folliculitis-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>La foliculitis</strong> es una inflamación del folículo piloso causada por la acumulación de humedad y calor bajo el adhesivo, lo que favorece la proliferación de bacterias</span><span style=\"font-size: 14px;\"><sup>5,6</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clj44rryi0006356rgvudfvpd",
            "type": "text",
            "items": [
              {
                "id": "clj44rntl0005356rue983d7l",
                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\" bis_skin_checked=\"1\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(0, 0, 0);\"><strong>El desgarro de la piel, las laceraciones de la piel</strong> y <strong>las lesiones por tensión</strong> son causadas por <strong>fuerzas mecánicas</strong></span></span><span style=\"color: rgb(0, 0, 0);\"><span style=\"font-size: 14px;\"><sup>5, 6</sup></span></span><span style=\"font-size: 24px;\"><span style=\"color: rgb(0, 0, 0);\">. </span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clj49m1wh004s356ry8g6sp52",
            "type": "image",
            "items": [
              {
                "id": "clj49m1wi004t356rmktw4pp1",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/gFWQ3ngOVIhnJ7m3-Skin%2520stripping.png",
                    "type": "image",
                    "crushedKey": "Skin%20stripping.png",
                    "originalUrl": "Skin stripping.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><strong><span style=\"font-size: 24px;\">El desgarro de la piel </span></strong><span style=\"font-size: 24px;\">se caracteriza por la remoción de las capas del estrato córneo</span><span style=\"font-size: 14px;\"><sup>9</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              },
              {
                "id": "clj49m1wi004u356r8jzc349e",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/9JLlJhBIGehG369M-Tension%2520injury.png",
                    "type": "image",
                    "crushedKey": "Tension%20injury.png",
                    "originalUrl": "Tension injury.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><strong><span style=\"font-size: 24px;\">Las lesiones por tensión </span></strong><span style=\"font-size: 24px;\">se caracterizan por el desprendimiento de la epidermis de la dermis</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cll126gve001w3575l5mgm6og",
            "type": "text",
            "items": [
              {
                "id": "clhywt70400033571azenaze2",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\"><strong>Las laceraciones de la piel </strong> se caracterizan por una separación de las capas de la piel</span><span style=\"font-size: 14px; color: rgb(49, 53, 55);\"><sup>6,9</sup></span><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">, ya sea como una herida de grosor parcial (a través de la epidermis o dermis) o como una herida de grosor completo (que llega hasta la hipodermis y la fascia)</span><span style=\"font-size: 14px; color: rgb(49, 53, 55);\"><sup>4,6</sup></span><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clj49kpdu004p356rffbmm767",
            "type": "image",
            "items": [
              {
                "id": "clid20gga000i356u17scfuvx",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/-q3M_d6Pz4PSt2Se-Artboard%252016.png",
                    "type": "image",
                    "crushedKey": "Artboard%2016.png",
                    "originalUrl": "Artboard 16.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 24px;\">Herida de grosor parcial</span></p>"
              },
              {
                "id": "clid20gga000j356uy5q6ppyf",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/s7bZRdQKZcK2LDqP-Artboard%252016%2520copy.png",
                    "type": "image",
                    "crushedKey": "Artboard%2016%20copy.png",
                    "originalUrl": "Artboard 16 copy.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 24px;\">Herida de grosor completo</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 0,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clj49klpl004n356r28lgdcsr",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhq35yzg0023356pgp08jkgr",
            "type": "text",
            "items": [
              {
                "id": "clhq35ump0020356pkd9cft77",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">¿Recuerdas qué causa estos diferentes tipos de MARSI?</span></p><p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Coloque el tipo de MARSI en el cuadro de descripción de la causa correspondiente.</span></p><p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Recibirá comentarios inmediatamente.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 3,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhq35paz001w356p79wf89t2",
            "type": "interactive",
            "items": [
              {
                "id": "clhq35pb0001x356pqy75c36z",
                "title": "Desgarro de la piel",
                "pileId": 1
              },
              {
                "id": "clhq35pb0001y356pmpfgzxq3",
                "title": "Dermatitis",
                "pileId": 2
              },
              {
                "id": "clhq37fdh002a356pxx5r49dn",
                "title": "Foliculitis",
                "pileId": "clhq37fdh0029356puycl2a2s"
              },
              {
                "id": "clhq37qai002c356pkr2xyrse",
                "title": "Maceración",
                "pileId": "clhq37qah002b356pugamldop"
              },
              {
                "id": "clhq3a59s002d356ph905kugf",
                "title": "Laceraciones de la piel",
                "pileId": 1
              },
              {
                "id": "clhq3a7sv002f356prk97lql0",
                "title": "Lesión o ampolla por tensión",
                "pileId": 1,
                "isNewlyInserted": true
              }
            ],
            "piles": [
              {
                "id": 1,
                "title": "Fuerza mecánica"
              },
              {
                "id": 2,
                "title": "Contacto con un irritante químico o respuesta inmunológica al apósito"
              },
              {
                "id": "clhq37fdh0029356puycl2a2s",
                "title": "Proliferación de bacterias bajo el adhesivo"
              },
              {
                "id": "clhq37qah002b356pugamldop",
                "title": "Acumulación prolongada de humedad bajo el adhesivo"
              }
            ],
            "family": "interactive-fullscreen",
            "variant": "sorting",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsnuiu9s005v3b747y6eag9z",
            "type": "knowledgeCheck",
            "items": [
              {
                "id": "clsnuiu9t005w3b74grn5vfwp",
                "type": "MATCHING",
                "media": {
                  "image": {
                    "key": "Leukoplast%20STEPS_lifestyle%20visual_woman%20at%20doctor-edit_NOPROCESS_.png",
                    "type": "image",
                    "align": "left",
                    "fillWidth": false,
                    "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/8rvUJCgfzGV2PEGJ.jpg",
                    "trackingId": "clsnuiu9s005v3b747y6eag9z",
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_woman at doctor-edit_NOPROCESS_.png",
                    "useCrushedKey": false,
                    "trackingContext": "block:knowledge-check:MATCHING"
                  }
                },
                "title": "<p><span style=\"font-size: 24px;\">¿Cómo afectan los diferentes tipos de MARSI a la piel?</span></p><p>A continuación, empareja los diferentes tipos de MARSI con las descripciones correctas para completar las oraciones.</p>",
                "answers": [
                  {
                    "id": "clhq31iqc001s356p8objj66u",
                    "title": "El desgarro de la piel ocurre cuando",
                    "correct": true,
                    "matchTitle": "Se eliminan las capas del estrato córneo."
                  },
                  {
                    "id": "clhq31iqc001t356pmt8fnr9z",
                    "title": "Las laceraciones de la piel ocurren cuando",
                    "correct": true,
                    "matchTitle": "Las capas de la piel se dividen en: herida de grosor parcial o herida de grosor completo. "
                  },
                  {
                    "id": "clhq31iqc001u356pn53kovoh",
                    "title": "Las lesiones por tensión ocurren cuando",
                    "correct": true,
                    "matchTitle": "La epidermis se separa de la dermis. "
                  },
                  {
                    "id": "clhzyw73u001j356p4ht80y46",
                    "title": "La dermatitis ocurre cuando ",
                    "correct": false,
                    "matchTitle": "La piel se inflama debido a una sustancia irritante. "
                  },
                  {
                    "id": "clhzyx6g6001k356pj1bzxf9z",
                    "title": "La maceración ocurre cuando ",
                    "correct": false,
                    "matchTitle": "La piel se ablanda debido a la humedad. "
                  },
                  {
                    "id": "clhzyxxh8001l356pz77ch3kz",
                    "title": "La foliculitis ocurre cuando ",
                    "correct": false,
                    "matchTitle": "Las bacterias proliferan y los folículos pilosos se inflaman. "
                  }
                ],
                "feedback": ""
              }
            ],
            "family": "knowledgeCheck",
            "variant": "matching",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cli011z5o003r356ph0g2qnuj",
            "type": "text",
            "items": [
              {
                "id": "cli011r25003n356psg9rd2lp",
                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(255, 255, 255);\">En el siguiente capítulo, profundizaremos quiénes están en riesgo de desarrollar MARSI y cuáles son los factores de riesgo.</span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl6c208r8003a356qrxd8sy3q",
            "type": "divider",
            "items": [
              {
                "id": "ckus5rpu70010386fx0vf3m3s",
                "type": "",
                "title": "¿Quién está en riesgo?",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido de arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "8r8GnL6gYOWG4YouwvosE7I45ka2YDTe",
        "deleted": false,
        "createdAt": "2023-09-05T07:08:43.824Z",
        "updatedAt": "2024-02-15T23:23:19.894Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "ziXU33URVkmVIF5FUPZEfKe-6o3UPjVC",
        "originalId": null,
        "author": "aid|56c37a65-15ab-4176-9fd9-227401c4aab4",
        "selectedAuthorId": "none",
        "courseId": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
        "title": "¿Quién está en riesgo?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "clktioamb000235785xyqoqst",
            "type": "image",
            "items": [
              {
                "id": "clktioamb00033578bbtx6vol",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/cfN9ruaVfjhPKcKz.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_home%20care%20man%20nurse%20cancer.jpg",
                    "dimensions": {
                      "top": 297,
                      "left": 0,
                      "width": 1680,
                      "height": 824,
                      "originalWidth": 1680,
                      "originalHeight": 1121
                    },
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_home care man nurse cancer.jpg",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/sM1HwKwACGfUBxi_-Leukoplast%2520STEPS_lifestyle%2520visual_home%2520care%2520man%2520nurse%2520cancer.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/lERl1r7UNcwMFW3I.jpg",
                      "originalUrl": "Leukoplast STEPS_lifestyle visual_home care man nurse cancer.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Cualquier persona a quien se le aplique un adhesivo médico en su cuerpo corre el riesgo de desarrollar MARSI. El riesgo aumenta con el uso frecuente debido a las múltiples aplicaciones y remociones<sup><span style=\"font-size: 14px;\">6</span></sup>. Sin embargo, algunas personas son más propensas que otras a desarrollar MARSI.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1m3xem0005356pzwewckrg",
            "type": "knowledgeCheck",
            "items": [
              {
                "id": "cli1m3xem0006356pblm7eimh",
                "type": "MULTIPLE_RESPONSE",
                "title": "<p><span style=\"font-size: 24px;\">¿Cuáles de los siguientes grupos crees que tienen un mayor riesgo de desarrollar MARSI?</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas</span></p>",
                "answers": [
                  {
                    "id": "clha9o6i400143c5yjjeq5kw9",
                    "title": "<p><span style=\"font-size: 22px;\">Neonatos y niños pequeños</span></p>",
                    "correct": true
                  },
                  {
                    "id": "clha9o6i400153c5yezqeu4lc",
                    "title": "<p><span style=\"font-size: 22px;\">Niños y adolescentes</span></p>",
                    "correct": false
                  },
                  {
                    "id": "clha9o6i400163c5y56d2l0bi",
                    "title": "<p><span style=\"font-size: 22px;\">Adultos jóvenes</span></p>",
                    "correct": false
                  },
                  {
                    "id": "clha9o6i400173c5ydvwo6zdk",
                    "title": "<p><span style=\"font-size: 22px;\">Adultos mayores</span></p>",
                    "correct": true
                  }
                ],
                "feedback": "",
                "feedbackType": "CORRECT_INCORRECT",
                "feedbackCorrect": "<p style=\"text-align: left;\"><span style=\"font-size: 24px;\">¡Correcto! MARSI generalmente ocurre cuando se retira un dispositivo médico adhesivo de una persona con una piel que es frágil o tiene menos integridad. Los neonatos, los niños muy pequeños y los adultos mayores tienen la piel más sensible</span><sup>6,9,10</sup><span style=\"font-size: 24px;\">.</span></p>",
                "feedbackIncorrect": "<p style=\"text-align: left;\"><span style=\"font-size: 24px;\">¡No del todo correcto! MARSI ocurre típicamente cuando se retira un dispositivo médico adhesivo de una persona con una piel que es frágil o tiene menos integridad. Los neonatos, los niños muy pequeños y los adultos mayores tienen la piel más sensible</span><sup>6,9,10</sup><span style=\"font-size: 24px;\">.</span></p>"
              }
            ],
            "family": "knowledgeCheck",
            "variant": "multiple response",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1m6onb0007356pboq5821a",
            "type": "text",
            "items": [
              {
                "id": "cli1m6onb0008356p8hwub5x9",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(0, 0, 0);\">Cuando nacemos, nuestra piel necesita tiempo para madurar completamente, y a medida que envejecemos, nuestra piel pierde muchas de sus cualidades</span><span style=\"color: rgb(0, 0, 0);\"><span style=\"font-size: 14px;\"><sup>6,11</sup></span></span><span style=\"font-size: 24px; color: rgb(0, 0, 0);\">. Haga clic en los marcadores a continuación para conocer más sobre por qué los adultos mayores, los bebés y los niños pequeños tienen una piel más frágil.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 0,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli3596f20003356p0i5tmy7m",
            "type": "interactive",
            "items": [
              {
                "x": "26.568627450980394",
                "y": "23.676470588235293",
                "id": "cli3596f20004356pentxc7vb",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/Ije8FNk64lMpwVdL-collagen%2520and%2520elastin.gif",
                    "type": "image",
                    "align": "left",
                    "fillWidth": false,
                    "crushedKey": "collagen%20and%20elastin.gif",
                    "originalUrl": "collagen and elastin.gif",
                    "useCrushedKey": true
                  }
                },
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Con la edad, se produce una disminución del colágeno y la elastina, lo que reduce la elasticidad de la piel</span><sup><span style=\"font-size: 14px;\">6,11</span></sup><span style=\"font-size: 20px;\">.</span></p>"
              },
              {
                "x": "20.980392156862745",
                "y": "46.32352941176471",
                "id": "cli3596f20005356ppnxd6kt3",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/6517w3YyddIujqOm-thinner%2520skin.gif",
                    "type": "image",
                    "align": "left",
                    "fillWidth": false,
                    "crushedKey": "thinner%20skin.gif",
                    "originalUrl": "thinner skin.gif",
                    "useCrushedKey": true
                  }
                },
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">La pérdida de tejido epidérmico, dérmico y subcutáneo da como resultado una piel más delgada</span><span style=\"font-size: 14px;\"><sup>6,11</sup></span><span style=\"font-size: 20px;\">.</span></p><p><br></p>"
              },
              {
                "x": "23.03921568627451",
                "y": "67.79411764705883",
                "id": "cli3596f20006356pkw2b4uea",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/V2tGIrLD4JCwF-IN-junction.gif",
                    "type": "image",
                    "align": "left",
                    "fillWidth": false,
                    "crushedKey": "junction.gif",
                    "originalUrl": "junction.gif",
                    "useCrushedKey": true
                  }
                },
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">El adelgazamiento de la unión dermo-epidérmica conduce a una menor cohesión</span><sup><span style=\"font-size: 14px;\">11</span></sup><span style=\"font-size: 20px;\">.</span></p>",
                "isNewlyInserted": true
              },
              {
                "x": "56.626838235294116",
                "y": "43.646599264705884",
                "id": "cli3596f20007356pojq0rn9g",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/CX5UWLF2fIIzSYHK-baby%2520thin.png",
                    "type": "image",
                    "align": "left",
                    "fillWidth": false,
                    "crushedKey": "baby%20thin.jpg",
                    "originalUrl": "baby thin.png",
                    "useCrushedKey": true
                  }
                },
                "title": "",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Los bebés y los niños pequeños tienen un estrato córneo inmaduro</span><sup><span style=\"font-size: 14px;\">6</span></sup><span style=\"font-size: 20px;\">.</span></p>"
              },
              {
                "x": "58.44975490196078",
                "y": "60.90992647058824",
                "id": "cli3596f20008356pqgasp35v",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/reMkHGp3x8y5gqSQ-adult%2520baby%25202.png",
                    "type": "image",
                    "align": "left",
                    "fillWidth": false,
                    "crushedKey": "adult%20baby%202.jpg",
                    "originalUrl": "adult baby 2.png",
                    "useCrushedKey": true
                  }
                },
                "title": "",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">La piel es entre un 40 y un 60 % más delgada que la piel de un adulto</span><sup><span style=\"font-size: 14px;\">6</span></sup><span style=\"font-size: 20px;\">.</span></p>"
              },
              {
                "x": "52.352941176470594",
                "y": "76.46599264705883",
                "id": "cli3596f20009356pmakmasf5",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/yWkhrjXBl1gUqyQk-baby%2520junction.png",
                    "type": "image",
                    "align": "left",
                    "fillWidth": false,
                    "crushedKey": "baby%20junction.jpg",
                    "originalUrl": "baby junction.png",
                    "useCrushedKey": true
                  }
                },
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">La cohesión entre la epidermis y la dermis es menor</span><sup><span style=\"font-size: 14px;\">6</span></sup><span style=\"font-size: 20px;\">.</span></p>"
              }
            ],
            "media": {
              "image": {
                "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/PS3s0YnKYCYepJDT-Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                "type": "image",
                "crushedKey": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                "originalUrl": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 5,
              "accentColor": null,
              "markerColor": "",
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1mk3k3000b356ppuqtyfok",
            "type": "text",
            "items": [
              {
                "id": "cli1mk3k3000c356p6059jyic",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Todos los pacientes con <strong>piel frágil</strong> son considerados de <strong>alto riesgo</strong></span><span style=\"font-size: 14px; color: rgb(255, 255, 255);\"><sup>9,10</sup></span><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">. Además de las <strong>edades extremas</strong></span><span style=\"font-size: 14px; color: rgb(255, 255, 255);\"><sup>5</sup></span><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">, los factores que afectan el riesgo de desarrollar MARSI en todos los grupos demográficos pueden dividirse en:</span></p><ul style=\"font-size: 24px; color: rgb(255, 255, 255);\"><li style=\"font-size: 24px; color: rgb(255, 255, 255);\"><span style=\"font-size: 24px; color: rgb(255, 255, 255);\"><strong>factores intrínsecos</strong>, que son específicos del paciente.</li><li style=\"font-size: 24px; color: rgb(255, 255, 255);\"><span style=\"font-size: 24px; color: rgb(255, 255, 255);\"><strong>factores extrínsecos</strong>, que dependen de elementos externos, como el entorno que nos rodea.</span><span style=\"font-size: 14px; color: rgb(255, 255, 255);\"><sup>5</sup></span><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">.</span></li></ul>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1n1v2a000d356p394o0725",
            "type": "text",
            "items": [
              {
                "id": "cli1n1v2a000e356px4q79ojf",
                "paragraph": "<p><span style=\"font-size: 24px;\">¿Ya puede identificar los factores de riesgo intrínsecos y extrínsecos para la MARSI</span><span style=\"font-size: 14px;\"><sup>5</sup></span><span style=\"font-size: 24px;\">? Arrastre el icono de factor de riesgo que aparece a continuación hasta el círculo de categoría que considere correcto. Recibirá comentarios instantáneos.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhmhrm3r000r356r85eqadng",
            "type": "interactive",
            "items": [
              {
                "id": "clhmhrm3r000s356rwkcb7okb",
                "media": {
                  "storyline": {
                    "src": "fdkoYELeSBjRg5lV/story.html",
                    "meta": {
                      "stage": {
                        "width": 1620,
                        "height": 1080
                      },
                      "title": "Riskfactors_new",
                      "player": {
                        "name": "unified",
                        "width": 1640,
                        "height": 1100
                      },
                      "scenes": [
                        {
                          "title": "Untitled Scene"
                        }
                      ],
                      "slides": [
                        {
                          "id": "6RmECeSt8sZ",
                          "title": "Drag and Drop",
                          "scene_index": "1.1"
                        }
                      ],
                      "version": "3.77.30587.0",
                      "course_id": "6lalvYU2kRd_course_id",
                      "thumbnail": "story_content/thumbnail.jpg"
                    },
                    "type": "storyline",
                    "title": "Riskfactors_new",
                    "thumbnail": "review/uploads/HJDxdB-UnC5EPLAP/6-db-0-cum-2-zy-n.png",
                    "processing": false,
                    "contentPrefix": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/fdkoYELeSBjRg5lV"
                  }
                }
              }
            ],
            "family": "360",
            "variant": "storyline",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "0",
              "paddingTop": 1,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhmhszds000v356rw18fe876",
            "type": "divider",
            "items": [
              {
                "id": "clhmhsuu5000u356rtzcfoiwi",
                "type": "completeBlock",
                "title": "CONTINUAR",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido de arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1n4y190003356xzboznv1j",
            "type": "text",
            "items": [
              {
                "id": "cli1n4y190004356xequl5q3z",
                "paragraph": "<p><span style=\"font-size: 24px;\">Además de las diferencias en la edad, los <strong><span style=\"color: rgb(228, 4, 40);\">factores de riesgo intrínsecos</span></strong> son</span><span style=\"font-size: 14px;\"><sup>5</sup></span><span style=\"font-size: 24px;\">:&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli0nyoof000s3c5yahyaruiz",
            "type": "image",
            "items": [
              {
                "id": "cli0nyoof00103c5ykl9sxprp",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/aS4R-i1UrMz1f64i-Leukoplast-Website-Absorption-Level3-Icon-1200x1200px.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Website-Absorption-Level3-Icon-1200x1200px.png",
                    "originalUrl": "Leukoplast-Website-Absorption-Level3-Icon-1200x1200px.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Desnutrición y deshidratación</strong></span></p>"
              },
              {
                "id": "cli0nyoof00113c5ykke39gtb",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/i4Yz-ZVPSlOO2ejf-Leukoplast-Edema-Icon-1200x1200-V2.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Edema-Icon-1200x1200-V2.png",
                    "originalUrl": "Leukoplast-Edema-Icon-1200x1200-V2.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Edema</strong></span></p>"
              },
              {
                "id": "cli0nyoof00123c5yujq1snin",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/hZKms77f3Byzgk-A-Leukoplast-Website-Microorganisms-Icon-1200x1200px.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Website-Microorganisms-Icon-1200x1200px.png",
                    "originalUrl": "Leukoplast-Website-Microorganisms-Icon-1200x1200px.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Condiciones médicas&nbsp;</strong></span><span style=\"font-size: 22px;\">(por ejemplo, diabetes, infecciones, insuficiencia renal, inmunosupresión, insuficiencia venosa)</span></p>"
              },
              {
                "id": "cli0nyoof00133c5yt4wazqyk",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/v6FozhdecxbsGY8W-Leukoplast-Website-Versatile-Icon-1200x1200px.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Website-Versatile-Icon-1200x1200px.png",
                    "originalUrl": "Leukoplast-Website-Versatile-Icon-1200x1200px.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Condiciones dermatológicas</strong></span></p>"
              }
            ],
            "family": "gallery",
            "variant": "four column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli0o4cws002r3c5ya2icc07q",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#e40428",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1n53yr0005356xeks2xka3",
            "type": "text",
            "items": [
              {
                "id": "cli1n53yr0006356xocssoohq",
                "paragraph": "<p><span style=\"font-size: 24px;\">Los <strong><span style=\"color: rgb(228, 4, 40);\">factores de riesgo extrínsecos</span></strong> son</span><span style=\"font-size: 14px;\"><sup>5</sup></span><span style=\"font-size: 24px;\">:</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli0o4hdg002t3c5youu5olpz",
            "type": "image",
            "items": [
              {
                "id": "cli0o1xg6001f3c5yhzdt4zob",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/Gp2TOi38uxR7aY1V-Leukoplast-Website-Plaster-Icon-1200x1200px.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Website-Plaster-Icon-1200x1200px.png",
                    "originalUrl": "Leukoplast-Website-Plaster-Icon-1200x1200px.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Remoción y colocación repetitiva de cinta</strong></span></p>"
              },
              {
                "id": "cli0o1xg6001g3c5y33vonmdt",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/PyxjUhppxdUIOFK_-Leukoplast-Website-Pain-Killers-Icon-1200x1200px.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Website-Pain-Killers-Icon-1200x1200px.png",
                    "originalUrl": "Leukoplast-Website-Pain-Killers-Icon-1200x1200px.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><strong><span style=\"font-size: 22px;\">Ciertos medicamentos</span></strong><span style=\"font-size: 22px;\">&nbsp;</span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">(por ejemplo, uso prolongado de corticosteroides, agentes quimioterapéuticos, antiinflamatorios y anticoagulantes)</span></p>"
              },
              {
                "id": "cli0o1xg6001h3c5ywld6iznq",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/hNIxACv2ovL7zvzG-Leukoplast-Website-Moisturizing-Icon-1200x1200px.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Website-Moisturizing-Icon-1200x1200px.png",
                    "originalUrl": "Leukoplast-Website-Moisturizing-Icon-1200x1200px.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><strong><span style=\"font-size: 22px;\">Exposición prolongada a la humedad</span></strong></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli0o4jk6002u3c5yt3j1colq",
            "type": "image",
            "items": [
              {
                "id": "cli0o1z2h001n3c5yoeckltla",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/hVN3F2hmJMMocyJT-Photodamage-Icon-1200x1200px.png",
                    "type": "image",
                    "crushedKey": "Photodamage-Icon-1200x1200px.png",
                    "originalUrl": "Photodamage-Icon-1200x1200px.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Terapia de radiación, fotodaño</strong></span></p>"
              },
              {
                "id": "cli0o1z2h001o3c5ygiyce44r",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/PIhiq1sy2CnYD0aY.png",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast-Dry-Skin-Icon-1200x1200.png",
                    "dimensions": {
                      "top": 63,
                      "left": 60,
                      "width": 1087,
                      "height": 1088,
                      "originalWidth": 1200,
                      "originalHeight": 1200
                    },
                    "originalUrl": "Leukoplast-Dry-Skin-Icon-1200x1200.png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/EUTQIPiaMvPVRLhN-Leukoplast-Dry-Skin-Icon-1200x1200.png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/oSGVoVlZmenkQ425.png",
                      "originalUrl": "Leukoplast-Dry-Skin-Icon-1200x1200.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Piel seca&nbsp;</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">(por ejemplo, causada por limpiadores agresivos)</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhn4e8qg008v356uunmugqxc",
            "type": "text",
            "items": [
              {
                "id": "cl6m7erow002c356q2xrha4xk",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Continua al siguiente capítulo para examinar más de cerca la prevalencia de MARSI y cuáles son sus consecuencias.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhn4fmyi008w356ui0gz3c4g",
            "type": "divider",
            "items": [
              {
                "id": "clhn4fmyj008x356u04y506rz",
                "type": "",
                "title": "¿Por qué necesitamos saber sobre MARSI?",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido de arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "VteOPPGvTW9jmdsp2e2MQlXy5ECkTKM0",
        "deleted": false,
        "createdAt": "2023-05-16T13:18:08.411Z",
        "updatedAt": "2024-02-13T14:45:27.560Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "faBWjlxZlmBtoe8PHpAT_ia-c63ko0vv",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
        "title": "¿Por qué necesitamos saber sobre MARSI?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "clia8gme100j911dbak8acupr",
            "type": "image",
            "items": [
              {
                "id": "cl6xezxqz000n356q54dta0c8",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/KQollQ19ApYUPXh1-HXNJbF4GHc4z9T__-stock_image.jpg",
                    "type": "image",
                    "crushedKey": "HXNJbF4GHc4z9T__-stock_image.png",
                    "originalUrl": "HXNJbF4GHc4z9T__-stock_image.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Se espera que la prevalencia de MARSI aumente debido al envejecimiento de la población mundial y al aumento de la supervivencia de los bebés prematuros<sup><span style=\"font-size: 14px;\">6,8</span></sup>.&nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl7ugonfd0010356p19gecdx9",
            "type": "text",
            "items": [
              {
                "id": "cl7ugonfk0011356p3dye0jav",
                "paragraph": "<p><span style=\"font-size: 24px;\">La verdadera incidencia y prevalencia general actual son desconocidas debido a la falta de concientización e informes sobre MARSI</span><span style=\"font-size: 14px;\"><sup>6,7,12</sup></span><span style=\"font-size: 24px;\">. Se han realizado estudios que muestran la prevalencia específica en ciertos entornos.</span></p><p><span style=\"font-size: 24px;\">Conoce los resultados de algunos de ellos haciendo clic en las flechas a continuación.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 1,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clhrgb25b000v3c5yphu81aw3",
            "type": "image",
            "items": [
              {
                "id": "clhrgb25c000w3c5y2xzb99kr",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/TPrJ7JtOE_AnRGI6-27.0.gif",
                    "type": "image",
                    "crushedKey": "27.0.gif",
                    "originalUrl": "27.0.gif",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">En Australia, se estimó que el MARSI afectaba a <strong>más de una cuarta parte de los individuos</strong> con heridas postoperatorias  <strong>dentro de los 12 meses</strong></span><span style=\"font-size: 14px;\"><sup>13</sup></span><span style=\"font-size: 24px;\">.</span></p>",
                "paragraph": ""
              },
              {
                "id": "clhrgb25c000x3c5ypebved4h",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/42nooaCBrWisV8p2-15.5.gif",
                    "type": "image",
                    "crushedKey": "15.5.gif",
                    "originalUrl": "15.5.gif",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">La tasa de incidencia acumulada en <strong>155 pacientes de 65 años o más</strong> en un hogar de ancianos en Japón <strong>dentro de 8 semanas</strong></span><span style=\"font-size: 14px;\"><sup>14</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              },
              {
                "id": "clhrh430a00233c5yexs2jujk",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/ZVzJMkdaI05Dw0q6-13.0.gif",
                    "type": "image",
                    "crushedKey": "13.0.gif",
                    "originalUrl": "13.0.gif",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">Un estudio de 4 semanas en una unidad de cuidados no intensivos para  <strong>pacientes adultos</strong> en EE. UU. mostró <strong>una prevalencia diaria de 3.4 &ndash; 25.0%</strong> para MARSI (promedio: 13.0%)</span><span style=\"font-size: 14px;\"><sup>15</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              },
              {
                "id": "clhrh49z900263c5yzacfkchi",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/OzRfPGarISzm1gZ--37.2.gif",
                    "type": "image",
                    "crushedKey": "37.2.gif",
                    "originalUrl": "37.2.gif",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">Un estudio de 2 semanas en <strong>232 pacientes en una unidad de cuidados intensivos pediátricos</strong> en China mostró <strong>una prevalencia diaria de 23.5 &ndash; 54.2%</strong> (promedio: 37.2%)</span><span style=\"font-size: 14px;\"><sup>16</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              },
              {
                "id": "clhrh4qeu00293c5y07gcqzvl",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/3T8ZvLoJBEAkqCiM-29.8.gif",
                    "type": "image",
                    "crushedKey": "29.8.gif",
                    "originalUrl": "29.8.gif",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">La prevalencia de MARSI en un estudio de 2 semanas en <strong>419 pacientes oncológicos</strong> con catéteres centrales de inserción periférica en China</span><span style=\"font-size: 14px;\"><sup>17</sup></span><span style=\"font-size: 24px;\">.</span></p>",
                "isNewlyInserted": true
              }
            ],
            "family": "gallery",
            "variant": "centered",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1ndd3p000u356x15w3ybgg",
            "type": "image",
            "items": [
              {
                "id": "cli1ndd3q000v356xa8n1785b",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/RbogmC7B4AJojC53.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "KsWqGG/Leukoplast%20STEPS_lifestyle%20visual_home%20care%20man%20nurse%20cancer.jpg",
                    "dimensions": {
                      "top": 606,
                      "left": 0,
                      "width": 1680,
                      "height": 515,
                      "originalWidth": 1680,
                      "originalHeight": 1121
                    },
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_home care man nurse cancer.jpg",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/Ul8mqRES18RYEd-l-Leukoplast%2520STEPS_lifestyle%2520visual_home%2520care%2520man%2520nurse%2520cancer.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/t6TppCOrbw6tw8md.jpg",
                      "originalUrl": "Leukoplast STEPS_lifestyle visual_home care man nurse cancer.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>La propagación de MARSI tiene consecuencias negativas tanto para los individuos como para el sistema de salud.&nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "clhrlnacw00363c5yxud6u7ac",
            "type": "text",
            "items": [
              {
                "id": "clhrln8fv00353c5yk1628kzw",
                "paragraph": "<p><span style=\"font-size: 24px;\">Para los individuos, la calidad de vida se ve afectada</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 24px;\">:</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 2,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cltibuwlx00he3b6zychn0klp",
            "type": "image",
            "items": [
              {
                "id": "cltibuwly00hf3b6zm1x77afa",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/K3xfDh6gEAZDmEY6.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "TENA-Professionals-Lifestyle-At-Home-Man-Garden-Hands.jpg",
                    "dimensions": {
                      "top": 84,
                      "left": 106,
                      "width": 927,
                      "height": 928,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "TENA-Professionals-Lifestyle-At-Home-Man-Garden-Hands.png",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/9c8TD_v8XomkriFT-TENA-Professionals-Lifestyle-At-Home-Man-Garden-Hands.png",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/LKQoiAFQNQeMOk5n.jpg",
                      "originalUrl": "TENA-Professionals-Lifestyle-At-Home-Man-Garden-Hands.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Barrera cutánea comprometida y curación retrasada</span><span style=\"font-size: 14px;\"><sup>6</sup></span></p>"
              },
              {
                "id": "cltibuwly00hg3b6z5m3be9x0",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/mRB_zt-BzCR1EDmg.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "shutterstock_226214581.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 225,
                      "width": 1120,
                      "height": 1120,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "shutterstock_226214581.jpg",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/_ARfjIoz2PqDkgfn-shutterstock_226214581.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/ZRlSfsOj_iqj57GS.jpg",
                      "originalUrl": "shutterstock_226214581.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Mayor dolor y mayor riesgo de complicaciones adicionales</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span></p>"
              },
              {
                "id": "cltibuwly00hh3b6z57d4i61t",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/P448iRmj6lOfNbfV-Leukoplast_Skin_Tears_Brochure_A5.jpg",
                    "type": "image",
                    "crushedKey": "Leukoplast_Skin_Tears_Brochure_A5.jpg",
                    "originalUrl": "Leukoplast_Skin_Tears_Brochure_A5.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Impacto en el bienestar y satisfacción con el tratamiento</span><span style=\"font-size: 14px;\"><sup>9</sup></span></p>"
              },
              {
                "id": "cltibuwly00hi3b6z2kx2do5r",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/KFo7G_hXSPwPQl0h-Leukoplast%2520STEPS_%2520Lifestyle%2520visual_woman%2520and%2520doctor%2520consultation.jpg",
                    "type": "image",
                    "crushedKey": "Leukoplast%20STEPS_%20Lifestyle%20visual_woman%20and%20doctor%20consultation.jpg",
                    "originalUrl": "Leukoplast STEPS_ Lifestyle visual_woman and doctor consultation.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Aumento de citas con un profesional de la salud</span><span style=\"font-size: 14px;\"><sup>9</sup></span></p>"
              }
            ],
            "family": "gallery",
            "variant": "four column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1nmdd1000w356x6etvc9mp",
            "type": "text",
            "items": [
              {
                "id": "cli1nmdd1000x356xiln4dh34",
                "paragraph": "<p><span style=\"font-size: 24px;\">Para el sector de la salud, aumentan las cargas y los costos de tratamiento</span><span style=\"font-size: 14px;\"><sup>6,9,10</sup></span><span style=\"font-size: 24px;\">:</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 1,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clticc4n200i13b6zviklagn9",
            "type": "image",
            "items": [
              {
                "id": "clticc4n200i23b6zgh8abehb",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/ooWm6-TDeiq1vPmN-new-prolonged-hospitalization.png",
                    "type": "image",
                    "crushedKey": "new-prolonged-hospitalization.png",
                    "originalUrl": "new-prolonged-hospitalization.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Hospitalización prolongada</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span></p>"
              },
              {
                "id": "clticc4n200i33b6z5rf3mi6d",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/zc3Ym7Tufw8sYNDF-_4xy2cwMPslejSl7.png",
                    "type": "image",
                    "crushedKey": "X-_4xy2cwMPslejSl7.png",
                    "originalUrl": "_4xy2cwMPslejSl7.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Una encuesta indica que el 7.1% de los pacientes tratados con cinta médica desarrollan MARSI</span><span style=\"font-size: 14px;\"><sup>8</sup></span></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cli1nt2gd0011356xkl921vp5",
            "type": "image",
            "items": [
              {
                "id": "cli1nt2gd0012356xi7dcw5te",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/nZTdTZj91mn1RXZz.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_STEPS_skin%20tear_clinical%20image_12.jpg",
                    "dimensions": {
                      "top": 95,
                      "left": 0,
                      "width": 1680,
                      "height": 850,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_12.jpg",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/3SNiPx18IcC2jRJk-Leukoplast_STEPS_skin%2520tear_clinical%2520image_12.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/5HoFdhHE6sCdrj5Y.jpg",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_12.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Los costos de tratamiento para MARSI y el sufrimiento entre los pacientes podrían evitarse en gran medida al aumentar la conciencia sobre MARSI. Para reducir su prevalencia, es importante trabajar de manera proactiva, lo cual podrás aprender más en el módulo &quotPrevención y tratamiento de MARSI&quot;.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.5,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "ckwktdw19003a386jec30uh8x",
            "type": "divider",
            "items": [
              {
                "id": "ckus5rpu70010386fx0vf3m3s",
                "type": "",
                "title": "CONTINUAR A LA PRUEBA DE CONOCIMIENTOS",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido de arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "5UO3fLLyEgo46X7PcKWKTHWjTTpVH6OK",
        "deleted": false,
        "createdAt": "2022-07-21T14:28:18.763Z",
        "updatedAt": "2024-03-08T13:00:04.875Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "LstxUKzpqeXHmT4uR80X8VcbV8x-H7bL",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
        "title": "Prueba de conocimientos",
        "description": "<p><span style=\"font-size: 24px;\">¡Es hora de poner a prueba tus conocimientos! Debes responder correctamente 8 de las 10 preguntas para aprobar la evaluación y completar el curso.</span></p><p><br></p>",
        "type": "quiz",
        "icon": "Quiz",
        "items": [
          {
            "id": "cl6kq79y80003356qo5i1cbx8",
            "type": "MULTIPLE_CHOICE",
            "media": {
              "tmp": {
                "image": {
                  "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/xuQR9WouCrZP65US.jpg",
                  "type": "image",
                  "align": "left",
                  "isSquare": false,
                  "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/xuQR9WouCrZP65US.jpg",
                  "dimensions": {
                    "top": 0,
                    "left": 0,
                    "width": 1680,
                    "height": 882,
                    "originalWidth": 1680,
                    "originalHeight": 1144
                  },
                  "originalUrl": "Leukoplast_SkinTears_Women_Pose03+Wound_1565_CMYK.png",
                  "originalImage": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/VFpcFegzFbDkcbkv-Leukoplast_SkinTears_Women_Pose03%252BWound_1565_CMYK.png",
                    "type": "image",
                    "align": "left",
                    "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/rKWvownzH-dDnEjw.jpg",
                    "originalUrl": "Leukoplast_SkinTears_Women_Pose03+Wound_1565_CMYK.png",
                    "useCrushedKey": true
                  },
                  "useCrushedKey": true
                }
              }
            },
            "title": "<p><span style=\"font-size: 24px;\">¿Qué es un MARSI?</span></p>",
            "answers": [
              {
                "id": "cl6kq79y80004356qdi3y18nx",
                "title": "<p><span style=\"font-size: 22px;\">Una lesión cutánea por fuerza mecánica.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cl6kq79y80005356qb4hcuttk",
                "title": "<p><span style=\"font-size: 22px;\">Una lesión cutánea relacionada con adhesivos médicos.</span></p>",
                "feedback": ""
              },
              {
                "id": "cl6x7egb10002356qiauf7um8",
                "title": "<p><span style=\"font-size: 22px;\">Una lesión cutánea médica aguda.</span></p>"
              }
            ],
            "correct": "cl6kq79y80005356qb4hcuttk",
            "corrects": [
              "cl6kq79y80004356qdi3y18nx"
            ],
            "feedback": ""
          },
          {
            "id": "cl6kq79y80006356qqyjmx5y2",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 24px;\">¿Cuáles de los siguientes ejemplos de MARSI son causados por fuerza mecánica?</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas.</span></p>",
            "answers": [
              {
                "id": "cl6kq79y80007356ql6hczpby",
                "title": "<p><span style=\"font-size: 22px;\">Desprendimiento de piel</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cl6kq79y8000a356qtljjedtk",
                "title": "<p><span style=\"font-size: 22px;\">Corte de piel</span></p>",
                "feedback": ""
              },
              {
                "id": "cl6kq79y80008356q7r8a2pqu",
                "title": "<p><span style=\"font-size: 22px;\">Lesión por tensión</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli03xop7009b356pfrt5m8iu",
                "title": "<p><span style=\"font-size: 22px;\">Dermatitis</span></p>"
              },
              {
                "id": "cli03ybl3009y356pxaj4ykmr",
                "title": "<p><span style=\"font-size: 22px;\">Maceración</span></p>"
              },
              {
                "id": "cli03yjf300ag356pt43zz26w",
                "title": "<p><span style=\"font-size: 22px;\">Foliculitis</span></p>"
              }
            ],
            "correct": "cl6kq79y80008356q7r8a2pqu",
            "corrects": [
              "cl6kq79y80007356ql6hczpby",
              "cl6kq79y80008356q7r8a2pqu",
              "cl6kq79y8000a356qtljjedtk"
            ],
            "feedback": ""
          },
          {
            "id": "cli04c0z00009356phxrat49g",
            "type": "MATCHING",
            "title": "<p><span style=\"font-size: 24px;\">¿Cómo afectan los diferentes tipos de MARSI a la piel?&nbsp;</span></p><p><span style=\"font-size: 17px;\">Relaciona los diferentes tipos de MARSI con las descripciones correctas para completar las oraciones.&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli04c0z0000a356popuenf0s",
                "title": "En el caso del desprendimiento de piel,",
                "matchTitle": "las capas de estrato córneo son eliminadas."
              },
              {
                "id": "cli04c0z0000b356pmcj9sa42",
                "title": "En el caso de corte de piel,",
                "matchTitle": "las capas de piel se separan en: herida de grosor parcial o herida de grosor completo. "
              },
              {
                "id": "cli04c0z0000c356p2l4cjkjh",
                "title": "En el caso de lesiones por tensión, ",
                "matchTitle": "la epidermis se separa de la dermis."
              },
              {
                "id": "cli04e8re000d356pprii9awd",
                "title": "En el caso de dermatitis,",
                "matchTitle": "la piel se inflama. "
              },
              {
                "id": "cli04ek6y000e356paltcej7m",
                "title": "En el caso de maceración, ",
                "matchTitle": "la piel se ablanda debido a la humedad. "
              },
              {
                "id": "cli04eu6s000f356p5jhd79me",
                "title": "En el caso de foliculitis,",
                "matchTitle": "las bacterias proliferan y los folículos pilosos se inflaman. "
              }
            ],
            "feedback": ""
          },
          {
            "id": "cli1ciki60018356pnvamarxg",
            "type": "MATCHING",
            "title": "<p><span style=\"font-size: 24px;\">¿Cuál es la causa de los siguientes tipos de MARSI?&nbsp;</span></p><p><span style=\"font-size: 17px;\">A continuación empareja los diferentes MARSI con sus causas correctas para completar las oraciones.&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1ciki60019356p6gtziwu7",
                "title": "La dermatitis es causada por",
                "matchTitle": "contacto con un irritante químico o una respuesta inmunológica al apósito. "
              },
              {
                "id": "cli1ciki6001a356pi6lz0v4b",
                "title": "La maceración es causada por",
                "matchTitle": "acumulación prolongada de humedad bajo el adhesivo."
              },
              {
                "id": "cli1ciki6001b356pxqhmfplj",
                "title": "La foliculitis es causada por",
                "matchTitle": "bacterias que proliferan en el ambiente húmedo y cálido bajo el adhesivo."
              }
            ],
            "feedback": ""
          },
          {
            "id": "cli04iomj0011356p9veupu5n",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 24px;\">¿Qué grupos tienen un mayor riesgo de desarrollar MARSI?&nbsp;</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas.</span></p>",
            "answers": [
              {
                "id": "cli04iomm0012356ph5ubvfq5",
                "title": "<p><span style=\"font-size: 22px;\">Recién nacidos y niños pequeños</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04iomm0014356pdd6e0c16",
                "title": "<p><span style=\"font-size: 22px;\">Hombres</span>&nbsp;</p>",
                "feedback": ""
              },
              {
                "id": "cli04iomm0015356pg1hxfkh5",
                "title": "<p><span style=\"font-size: 22px;\">Adolescentes</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04iomm0013356pitlt9578",
                "title": "<p><span style=\"font-size: 22px;\">Adultos mayores</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04lan20059356pelpppbpa",
                "title": "<p><span style=\"font-size: 22px;\">Pacientes con piel frágil</span></p>"
              }
            ],
            "correct": "",
            "corrects": [
              "cli04iomm0012356ph5ubvfq5",
              "cli04iomm0013356pitlt9578",
              "cli04lan20059356pelpppbpa"
            ],
            "feedback": ""
          },
          {
            "id": "cli04m66e006k356pf07xfruc",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 24px;\">A continuación marca los factores <strong>extrínsecos&nbsp;</strong>que son factores de riesgo para desarrollar MARSI.&nbsp;</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas.</span></p>",
            "answers": [
              {
                "id": "cli04m66h006l356pangbfv7d",
                "title": "<p><span style=\"font-size: 22px;\">Exposición prolongada a la humedad</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04m66h006n356pmz198k5n",
                "title": "<p><span style=\"font-size: 22px;\">Pérdida de nutrientes y deshidratación</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04m66h006o356p69bz99qz",
                "title": "<p><span style=\"font-size: 22px;\">Edema</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04m66h006m356pqschbryq",
                "title": "<p><span style=\"font-size: 22px;\">Terapia de radiación</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04nx7q00bd356phuzznf91",
                "title": "<p><span style=\"font-size: 22px;\">Condiciones médicas y dermatológicas</span></p>"
              },
              {
                "id": "cli04oasa00c6356p7enurczp",
                "title": "<p><span style=\"font-size: 22px;\">Edad</span></p>"
              },
              {
                "id": "cli04okve00ch356pt9jr5je9",
                "title": "<p><span style=\"font-size: 22px;\">Remoción de cinta y aplicación repetida</span></p>"
              },
              {
                "id": "cli04q9ea00hq356pl58iyxsg",
                "title": "<p><span style=\"font-size: 22px;\">Piel seca causada por, por ejemplo, limpiadores agresivos</span></p>"
              },
              {
                "id": "cli04qmwd00i8356p15lx7jjl",
                "title": "<p><span style=\"font-size: 22px;\">Ciertos medicamentos</span></p>"
              }
            ],
            "correct": "",
            "corrects": [
              "cli04m66h006l356pangbfv7d",
              "cli04m66h006m356pqschbryq",
              "cli04okve00ch356pt9jr5je9",
              "cli04q9ea00hq356pl58iyxsg",
              "cli04qmwd00i8356p15lx7jjl"
            ],
            "feedback": ""
          },
          {
            "id": "cli1cp27y0020356ppmmwa7km",
            "type": "MATCHING",
            "title": "<p><span style=\"font-size: 24px;\">¿Qué caracteriza a cada una de las tres capas principales de la piel?&nbsp;</span></p><p><span style=\"font-size: 17px;\">A continuación relaciona las capas con la descripción correcta para completar las oraciones.&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1cp2810021356puu5nto5r",
                "title": "La epidermis ",
                "matchTitle": "Es la capa exterior más delgada sin suministro sanguíneo propio."
              },
              {
                "id": "cli1cp2810022356prnfeqis8",
                "title": "La dermis ",
                "matchTitle": "consiste en un tejido conectivo y células especializadas como fibroblastos. "
              },
              {
                "id": "cli1cp2810023356p5y247gg7",
                "title": "La hipodermis",
                "matchTitle": "contiene vasos sanguíneos y nervios y ayuda a aislar el cuerpo del frío."
              }
            ],
            "feedback": ""
          },
          {
            "id": "cli1cu3uh0024356p2d6cdf74",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 24px;\">¿Qué es cierto acerca de la función de nuestra piel?</span><span style=\"font-size: 22px;\">&nbsp;</span></p><p><span style=\"font-size: 17px;\">Selecciona todas las respuestas correctas.</span></p>",
            "answers": [
              {
                "id": "cli1cu3ul0025356p1yq1w4ho",
                "title": "<p><span style=\"font-size: 22px;\">Actúa como una barrera protectora.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0027356p2qfxr9no",
                "title": "<p><span style=\"font-size: 22px;\">Es vital para la producción de hormonas. </span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0028356psgp7yi23",
                "title": "<p><span style=\"font-size: 22px;\">Nos ayuda a percibir el dolor y la temperatura. </span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0026356ptgqaoji5",
                "title": "<p><span style=\"font-size: 22px;\">Ayuda a mantener la homeostasis. </span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cwai4009s356p9v85t8w9",
                "title": "<p><span style=\"font-size: 22px;\">Ayuda con la producción y síntesis de vitamina D.</span></p>"
              }
            ],
            "correct": "",
            "corrects": [
              "cli1cu3ul0025356p1yq1w4ho",
              "cli1cu3ul0026356ptgqaoji5",
              "cli1cu3ul0028356psgp7yi23",
              "cli1cwai4009s356p9v85t8w9",
              "cli1cu3ul0027356p2qfxr9no"
            ],
            "feedback": ""
          },
          {
            "id": "cli1cxp0m00a4356pyb4lkh9c",
            "type": "MULTIPLE_CHOICE",
            "title": "<p><span style=\"font-size: 24px;\">¿Podemos esperar que la ocurrencia de MARSI disminuya en el futuro?</span></p><p><span style=\"font-size: 24px;\">¿Es esto verdadero o falso? </span></p>",
            "answers": [
              {
                "id": "cli1cxp0r00a5356p94f2mact",
                "title": "<p><span style=\"font-size: 22px;\">Falso</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cxp0r00a6356ppi6egala",
                "title": "<p><span style=\"font-size: 22px;\">Verdadero</span></p>",
                "feedback": ""
              }
            ],
            "correct": "cli1cxp0r00a5356p94f2mact",
            "corrects": [
              "cli1cxp0r00a5356p94f2mact"
            ],
            "feedback": ""
          },
          {
            "id": "cli2719pk000v3c5yk1apj3kz",
            "type": "MULTIPLE_CHOICE",
            "title": "<p><span style=\"font-size: 24px;\">Las consecuencias de MARSI solo afectan al paciente individual.</span></p><p><span style=\"font-size: 24px;\">¿Es esto verdadero o falso?</span></p>",
            "answers": [
              {
                "id": "cli2719pl000w3c5y4uss59s3",
                "title": "<p><span style=\"font-size: 22px;\">Verdadero&nbsp;</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli2719pl000x3c5y12ifebu3",
                "title": "<p><span style=\"font-size: 22px;\">Falso</span></p>",
                "feedback": ""
              }
            ],
            "correct": "cli2719pl000x3c5y12ifebu3",
            "corrects": [
              "cli2719pl000w3c5y4uss59s3"
            ],
            "feedback": ""
          }
        ],
        "media": {},
        "piles": [],
        "settings": {
          "retryCount": -1,
          "passingScore": 80,
          "revealAnswers": "all",
          "passToContinue": false,
          "shuffleAnswerChoices": true,
          "randomizeQuestionOrder": true
        },
        "duplicatedFromId": "",
        "deleted": false,
        "createdAt": "2022-08-08T12:24:30.112Z",
        "updatedAt": "2023-11-03T10:46:35.934Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": false,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "Ts271HwPMsorXK12YzF_XmuOwB1AJDFG",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
        "title": "¡Bien hecho!",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl1v0rioj00063c5xna9scnfk",
            "type": "image",
            "items": [
              {
                "id": "cl1v0rioj00073c5x75oqdb7o",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/awYoYUeMCDOWmT9c.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "SvefOO/Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                    "dimensions": {
                      "top": 165,
                      "left": 0,
                      "width": 1433,
                      "height": 555,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                    "originalImage": {
                      "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/yR1q9lE44orGwD7T-Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/y1ltTWazVZBTUkah.jpg",
                      "originalUrl": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Has completado con éxito este primer módulo sobre MARSI. Ahora puedes salir del módulo o continuar con la lista de referencias.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cku8spgyz00gl386ilzk3tt50",
            "type": "interactive",
            "items": [
              {
                "id": "cku8rl5qx000p386i1ehfwql0",
                "type": "exit-course",
                "label": "SALIR",
                "description": "<p><span style=\"font-size: 24px;\"><span style=\"color: rgb(49, 53, 55);\">Haga clic para salir del módulo.</span></span></p>",
                "destination": "exit-course"
              }
            ],
            "family": "buttons",
            "variant": "button",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli2vpk8x0002356pg6h8hsxq",
            "type": "divider",
            "items": [
              {
                "id": "cli2vpk8x0003356pbph3tzg6",
                "type": "",
                "title": "Lista de referencias",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido de arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "arEwMnP9-PDVNH1Zwn9ro3tavZLbw1lI",
        "deleted": false,
        "createdAt": "2021-11-29T14:15:43.266Z",
        "updatedAt": "2023-05-25T08:35:33.520Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "MEv3WCjv7bOFoXKpwQxsEIvMuYOrcSZv",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
        "title": "Referencias",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl1v0rioj00063c5xna9scnfk",
            "type": "image",
            "items": [
              {
                "id": "cl1v0rioj00073c5x75oqdb7o",
                "media": {
                  "image": {
                    "key": "rise/courses/KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77/jQCCRrD5YbQ7WaaE-TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "type": "image",
                    "crushedKey": "TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "originalUrl": "TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Las siguientes publicaciones han sido utilizadas como referencias a lo largo del módulo.&nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl6kjta2c001r356qv1xab5m1",
            "type": "text",
            "items": [
              {
                "id": "cl6kjta2c001s356qf5t5o62x",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">1.&nbsp;</span><span style=\"font-size: 24px;\">Stephen-Haynes J &amp; Carville K. Skin tears made easy.<em>&nbsp;</em>Wounds International. 2011;2(4):1-6.</span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">2. Thayer D. Skin damage associated with intravenous therapy: common problems and strategies for prevention. J Infus Nurs. 2012;35(6):390-401.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">3. Lawton S. Skin 1: the structure and functions of the skin. Nurs Times. 2019;115(12):30-3.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">4. LeBlanc K et al. Best practice recommendations for the prevention and management of skin tears in aged skin. Wounds International. 2018.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">5. McNichol L et al. Medical adhesives and patient safety: state of the science: consensus statements for the assessment, prevention, and treatment of adhesive-related skin injuries.<em>&nbsp;</em>J Wound Ostomy Continence Nurs. 2013;40(4):365-E2.&nbsp;</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">6. Fumarola S et al. Overlooked and underestimated: medical adhesive-related skin injuries. Best practice consensus document on prevention. J Wound Care. 2020;29(3):1.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">7. Ousey K &amp; Wasek S. Clinician perspectives on medical adhesive-related skin injuries. Wounds UK. 2016;12(4).</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">8. Maene B. Hidden costs of medical tape-induced skin injuries. Wounds UK. 2013;9(1).</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">9. Downie F &amp; Collier M. Medical adhesive related skin injury (MARSI): Wounds UK<em>&nbsp;</em>made easy. <em>Wounds UK</em>. 2021;17(1).</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">10. LeBlanc K et al. Best practice recommendations for prevention and management of periwound skin complications. Wounds international. 2021.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">11. Dunk et al. Best practice recommendations for holistic strategies to promote and maintain skin integrity. Wounds International. 2020.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">12. Yates S, McNichol L, Heinecke SB, Gray M. Embracing the concept, defining the practice, and changing the outcome: setting the standard for medical adhesive-related skin injury interventions in WOC nursing practice. J Wound Ostomy Continence Nurs. 2017;44(1):13-17.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">13. Upton P et al. Complications associated with postoperative dressings: a clinician&rsquo;s perspective. Wound Practice and Research. 2019; 27(4): 158-63.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">14. Konya C et al. Skin injuries caused by medical adhesive tape in older people and associated factors. J Clin Nurs. 2010;19(9-10):1236-42.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">15. Farris MK et al. Medical adhesive-related skin injury prevalence among adult acute care patients: a single-center observational study. J Wound Ostomy Continence Nurs. 2015;42(6):589-98.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">16. Wang D et al. Medical adhesive-related skin injuries and associated risk factors in a pediatric intensive care unit. Adv Skin Wound Care. 2019;32(4):176-182.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">17. Zhao H et al. Prevalence of medical adhesive-related skin injury at peripherally inserted central catheter insertion site in oncology patients.<em>&nbsp;</em>J Vasc Access. 2018;19(1):23-27.</span></span></p><p><span style=\"font-size: 24px;\">18. Ratliff CR. Descriptive study of the frequency of medical adhesive-related skin injuries in a vascular clinic. J Vasc Nurs. 2017;35(2):86-89.</span></p><p><span style=\"font-size: 24px;\">19. Alavi A, Sibbald RG, Ladizinski B, Saraiya A, Lee KC, Skotneicki-Grant S, Maibach H. Wound-related allergic/irritant contact dermatitis. Advances in skin &amp; wound care. 2016;29(6).</span></p><p><span style=\"font-size: 24px;\">20. Hitchcock J, Savine L. Medical adhesive-related skin injuries associated with vascular access. Br J Nurs. 2017;26(8):S4-S12.</span></p><p><span style=\"font-size: 24px;\">21. International Wound Infection Institute (IWII). Wound Infection in Clinical Practice. Wounds International 2022.</span></p><p><span style=\"font-size: 24px;\">22. Ubbink DT et al. Evidence-Based Care of Acute Wounds: A Perspective. Adv Wound Care (New Rochelle). 2015;4(5):286-294.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "BbO7I2lMdMWToVrdPnR82stmcOdl0Otc",
        "deleted": false,
        "createdAt": "2022-08-08T09:23:46.938Z",
        "updatedAt": "2024-01-17T08:52:30.566Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      }
    ],
    "jobs": [],
    "labelSetId": "vsB-kUOtq5l7HkElQ8hasPAQ",
    "deleted": false,
    "createdAt": "2023-05-04T07:56:58.571Z",
    "updatedAt": "2024-03-28T08:52:43.870Z",
    "markComplete": false,
    "isDefault": false,
    "ready": true,
    "reviewId": "2ecb8359-f299-4613-96aa-f08862842773",
    "exportSettings": {
      "title": "Introducción a MARSI",
      "format": "zip",
      "quizId": "LstxUKzpqeXHmT4uR80X8VcbV8x-H7bL",
      "target": "scorm12",
      "shareId": "pkeP4Dho6kSYKfWkitVm3e-S-QVQQSCZ",
      "activeLMS": 0,
      "reporting": "passed-incomplete",
      "exportType": "lms",
      "identifier": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77_rise",
      "targetName": "SCORM 1.2",
      "storylineId": "clhmhrm3r000r356r85eqadng",
      "completeWith": "quiz",
      "quizComplete": true,
      "activeEdition": 0,
      "disableCoverPage": false,
      "enableExitCourse": false,
      "resetLearnerData": false,
      "updateResumeData": true,
      "storylineComplete": false,
      "completionPercentage": 100
    },
    "headingTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
    "bodyTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
    "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
    "sidebarMode": "open",
    "tenantId": "8db6028c-93bd-4564-a695-adf0dd261aab",
    "showLessonCount": true,
    "showNavigationButtons": true,
    "allowSearch": true,
    "animateBlockEntrance": true,
    "transferredAt": "2023-02-02T14:11:07.832Z",
    "allowCopy": false,
    "enableVideoPlaybackSpeed": true,
    "jobType": null,
    "partnerContentId": null,
    "cardImage": {},
    "theme": {
      "themeId": "classic",
      "navigation": true,
      "showAuthor": true,
      "allowSearch": true,
      "colorAccent": "#e40428",
      "blockCorners": "ROUNDED",
      "buttonScheme": "LIGHT",
      "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "coverPageType": "LEFT_OVERLAY",
      "bodyTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
      "navigationType": "SIDEBAR",
      "blockPaddingTop": 30,
      "coverImageAlpha": 50,
      "navigationStyle": "LIGHT_IMAGE",
      "showLessonCount": true,
      "lessonHeaderSize": "MEDIUM",
      "buttonInlineStyle": "ROUNDED",
      "coverImageDefault": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg",
      "headingTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
      "lessonHeaderColor": null,
      "lessonHeaderStyle": "LIGHT",
      "sidebarStartsOpen": true,
      "blockPaddingBottom": 30,
      "markLessonsComplete": false,
      "animateBlockEntrance": true,
      "navigationRestricted": false,
      "buttonNavigationStyle": "FULL",
      "showNavigationButtons": true,
      "compactShowLessonCount": true,
      "lessonHeaderImageAlpha": 0.6,
      "lessonHeaderImageColor": "DARK",
      "navigationOverlayImage": "https://articulateusercontent.com/assets/rise/assets/themes/example-header-image.jpg",
      "enableVideoPlaybackSpeed": true,
      "navigationOverlayImageAlpha": 0.6,
      "navigationOverlayImageColor": "DARK"
    },
    "lessonHeaderImage": {},
    "overlayNavigationImage": {},
    "type": null,
    "lastImportedXliff": null,
    "locale": null,
    "sourceCourseLocaleId": null,
    "experiments": null,
    "features": {
      "rise-authoring-controls": true,
      "rise-auto-calc-contrast": true,
      "rise-block-controls-phase-one": true,
      "rise-block-controls-phase-two": true,
      "rise-course-navigation": true,
      "rise-course-themes": true,
      "rise-randomize-block-bg-images": true,
      "rise-theme-image-overlay-updates": true
    },
    "authors": [
      {
        "id": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
        "authorName": "Malina Andrén"
      },
      {
        "id": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
        "authorName": "Olga Kuzmenko"
      },
      {
        "id": "aid|188dd1f1-afab-48b7-a744-b322fd5ab0c3",
        "authorName": "Lotten Andrér"
      },
      {
        "id": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "authorName": "Lisa Agerbæk"
      }
    ],
    "bodyTypeface": "Open Sans",
    "headingTypeface": "Open Sans",
    "uiTypeface": "Lato",
    "lmsOptions": {
      "enableExitCourse": false,
      "disableCoverPage": false
    },
    "mondrian": {}
  },
  "labelSet": {
    "id": "vsB-kUOtq5l7HkElQ8hasPAQ",
    "author": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
    "name": "Dynacast AS - english - Transferred",
    "defaultId": null,
    "defaultSet": false,
    "labels": {
        "result": "resultado",
        "search": "buscar",
        "results": "resultados",
        "quizNext": "SIGUIENTE",
        "tabGroup": "Pestaña",
        "codeGroup": "Código",
        "noResults": "No hay resultados para",
        "noteGroup": "Nota",
        "quizScore": "Tu puntuación",
        "quizStart": "INICIAR EXAMEN",
        "courseExit": "SALIR DEL CURSO",
        "courseHome": "Inicio",
        "lessonName": "Lección",
        "quizSubmit": "ENVIAR",
        "quoteGroup": "Cita",
        "salutation": "👋 ¡Adiós!",
        "buttonGroup": "Botón",
        "courseStart": "Curso inicial",
        "embedViewOn": "VER EN",
        "exitMessage": "Ahora puedes dejar esta página.",
        "quizCorrect": "",
        "quizPassing": "APROBADO",
        "quizResults": "Resultados del examen",
        "courseResume": "CONTINUAR CURSO",
        "processStart": "INICIAR",
        "processSwipe": "Desliza para continuar",
        "quizContinue": "Continuar",
        "quizLandmark": "Examen",
        "quizQuestion": "Pregunta",
        "courseDetails": "DETALLES",
        "embedReadMore": "Leer más",
        "feedbackGroup": "Comentarios",
        "quizIncorrect": "",
        "quizTakeAgain": "VOLVER A TOMAR",
        "sortingReplay": "REPRODUCIR DE NUEVO",
        "accordionGroup": "Acordeón",
        "embedLinkGroup": "Contenido web incrustado",
        "lessonComplete": "COMPLETO",
        "statementGroup": "Declaración",
        "storylineGroup": "Historia",
        "attachmentGroup": "Archivo adjunto",
        "embedPhotoGroup": "Foto incrustada",
        "embedVideoGroup": "Video incrustado",
        "playButtonLabel": "Reproducir",
        "processComplete": "Completo",
        "processLandmark": "Proceso",
        "processNextStep": "SIGUIENTE PASO",
        "processStepName": "Paso",
        "seekSliderLabel": "Buscar",
        "sortingLandmark": "Actividad de clasificación",
        "audioPlayerGroup": "Reproductor de audio. Puedes usar la barra espaciadora para alternar la reproducción y las teclas de flecha para avanzar.",
        "buttonStackGroup": "Pila de botones",
        "embedPlayerGroup": "Reproductor de medios incrustado",
        "lessonRestricted": "Las lecciones deben completarse en orden",
        "pauseButtonLabel": "Pausa",
        "scenarioComplete": "Escenario completo",
        "scenarioContinue": "CONTINUAR",
        "scenarioTryAgain": "INTENTAR DE NUEVO",
        "textOnImageGroup": "Texto en imagen",
        "timelineLandmark": "Cronología",
        "urlEmbedLandmark": "URL/Incrustar",
        "videoPlayerGroup": "Reproductor de video. Puedes usar la barra espaciadora para alternar la reproducción y las teclas de flecha para avanzar.",
        "blocksClickToFlip": "Haz clic en las tarjetas para voltear",
        "blocksPreposition": "de",
        "bulletedListGroup": "Lista con viñetas",
        "checkboxListGroup": "Lista de casillas de verificación",
        "imageAndTextGroup": "Imagen y texto",
        "imageGalleryGroup": "Galería de imágenes",
        "lessonPreposition": "de",
        "numberedListGroup": "Lista numerada",
        "processLessonName": "Lección",
        "processStartAgain": "EMPEZAR DE NUEVO",
        "scenarioStartOver": "EMPEZAR DE NUEVO",
        "courseSkipToLesson": "SALTAR A LA LECCIÓN",
        "flashcardBackLabel": "Parte posterior de la tarjeta",
        "flashcardGridGroup": "Cuadrícula de tarjetas",
        "nextFlashCardLabel": "Siguiente tarjeta",
        "flashcardFrontLabel": "Parte frontal de la tarjeta",
        "flashcardStackGroup": "Pila de tarjetas",
        "knowledgeCheckGroup": "Chequeo de conocimiento",
        "sortingCardsCorrect": "Tarjetas correctas",
        "hamburgerButtonLabel": "Barra lateral de vista general del curso",
        "lessonHeaderLandmark": "Encabezado de lección",
        "numberedDividerGroup": "Divisor numerado",
        "lessonContentLandmark": "Contenido de la lección",
        "lessonSidebarLandmark": "Barra lateral de lección",
        "quizAnswerPlaceholder": "Escribe tu respuesta aquí",
        "labeledGraphicLandmark": "Gráfico etiquetado",
        "previousFlashCardLabel": "Tarjeta anterior",
        "processStepPreposition": "de",
        "overviewPageTitleSuffix": "Visión general",
        "quizAcceptableResponses": "Respuestas aceptables",
        "quizRequirePassingScore": "Debe aprobar el examen antes de continuar",
        "timelineCardGroupPrefix": "Tarjeta de cronología",
        "labeledGraphicBubbleLabel": "Burbuja de gráfico etiquetado",
        "labeledGraphicMarkerLabel": "Marcador de gráfico etiquetado",
        "labeledGraphicNextMarkerLabel": "Siguiente marcador",
        "labeledGraphicPreviousMarkerLabel": "Marcador anterior",
        "a11yAnswerLive": "Tu respuesta",
        "a11yAuthorPrefix": "Por",
        "a11yBlockChartBar": "Gráfico de barras",
        "a11yBlockChartLine": "Gráfico de líneas",
        "a11yBlockChartPie": "Gráfico de pastel",
        "a11yBlockCode": "Código",
        "a11yBlockEmbed": "Contenido incrustado",
        "a11yBlockFlashcardBack": "Parte posterior de la tarjeta",
        "a11yBlockFlashcardFront": "Parte frontal de la tarjeta",
        "a11yBlockFlashcardGrid": "Cuadrícula de tarjetas",
        "a11yBlockFlashcardStack": "Carrusel de tarjetas",
        "a11yBlockKnowledgeCheck": "Chequeo de conocimiento",
        "a11yBlockKnowledgeCheckFIB": "Chequeo de conocimiento: Rellenar el espacio en blanco",
        "a11yBlockKnowledgeCheckMC": "Chequeo de conocimiento: Opción múltiple",
        "a11yBlockKnowledgeCheckM": "Chequeo de conocimiento: Emparejar",
        "a11yBlockKnowledgeCheckMR": "Chequeo de conocimiento: Respuesta múltiple",
        "a11yBlockQuoteCarousel": "Carrusel de citas",
        "a11yBlockStoryline": "Historia",
        "a11yBlockTimeline": "Cronología",
        "a11yCarouselNext": "Siguiente",
        "a11yCarouselPrevious": "Anterior",
        "a11yCorrectLive": "Respuesta correcta",
        "a11yExcelIcon": "Hoja de cálculo de Microsoft Excel",
        "a11yFileIcon": "Archivo",
        "a11yGroupAudioPlayer": "Reproductor de audio",
        "a11yGroupVideoPlayer": "Reproductor de video",
        "a11yLabeledGraphicBlock": "Gráfico etiquetado",
        "a11yLabeledGraphicButtonMarker": "Marcador",
        "a11yLabeledGraphicIconPlus": "Más",
        "a11yLabeledGraphicIconDot": "Punto",
        "a11yLabeledGraphicIconInformation": "Información",
        "a11yLabeledGraphicIconQuestion": "Signo de interrogación",
        "a11yLabeledGraphicIconCheck": "Marca de verificación",
        "a11yLabeledGraphicIconX": "X",
        "a11yLabeledGraphicIconHeart": "Corazón",
        "a11yLabeledGraphicIconPin": "Pin del mapa",
        "a11yLabeledGraphicIconArrowLeft": "Flecha izquierda",
        "a11yLabeledGraphicIconArrowRight": "Flecha derecha",
        "a11yLabeledGraphicIconArrowUp": "Flecha arriba",
        "a11yLabeledGraphicIconArrowDown": "Flecha abajo",
        "a11yLabeledGraphicIconArrowUpLeft": "Flecha arriba izquierda",
        "a11yLabeledGraphicIconArrowUpRight": "Flecha arriba derecha",
        "a11yLabeledGraphicIconArrowDownLeft": "Flecha abajo izquierda",
        "a11yLabeledGraphicIconArrowDownRight": "Flecha abajo derecha",
        "a11yLabeledGraphicUnviewed": "No visto",
        "a11yLabeledGraphicViewed": "Visto",
        "a11yMediaPause": "Pausa",
        "a11yMediaPlay": "Reproducir",
        "a11yMediaSeek": "Buscar",
        "a11yNavigationMenuClose": "Cerrar menú de navegación",
        "a11yNavigationMenuOpen": "Abrir menú de navegación",
        "a11yPageMarker": "Parte superior de la página",
        "a11yPDFIcon": "Archivo PDF",
        "a11yPPTIcon": "Presentación de PowerPoint",
        "a11yQuizFailed": "Fallado",
        "a11yQuizFeedback": "Comentarios",
        "a11yQuizPassed": "Aprobado",
        "a11yQuizReviewCorrectlyChecked": "Correctamente marcado",
        "a11yQuizReviewCorrectlySelected": "Correctamente seleccionado",
        "a11yQuizReviewCorrectlyUnchecked": "Correctamente desmarcado",
        "a11yQuizReviewCorrectlyUnselected": "Correctamente no seleccionado",
        "a11yQuizReviewIncorrectlyChecked": "Incorrectamente marcado",
        "a11yQuizReviewIncorrectlySelected": "Incorrectamente seleccionado",
        "a11yQuizReviewIncorrectlyUnchecked": "Incorrectamente desmarcado",
        "a11yQuizReviewIncorrectlyUnselected": "Incorrectamente no seleccionado",
        "a11yRegionMainLesson": "Contenido de la lección",
        "a11yRegionMainOverview": "Visión general del curso",
        "a11yRegionNavLesson": "Menú de navegación",
        "a11yRegionNavOverview": "Tabla de contenido",
        "a11yRestrictedNav": "Esta lección no está disponible actualmente",
        "a11yRTFIcon": "Archivo de texto enriquecido",
        "a11ySearchClose": "Cerrar menú de búsqueda",
        "a11ySearchInput": "Buscar",
        "a11ySearchOpen": "Abrir menú de búsqueda",
        "a11yStatusContinued": "Continuado",
        "a11yStatusAdditionalContent": "Se ha cargado contenido adicional",
        "a11yUnzoomImage": "Deshacer zoom en imagen",
        "a11yWordIcon": "Documento de Microsoft Word",
        "a11yZipIcon": "Archivo Zip",
        "a11yZoomImage": "Hacer zoom en imagen",
        "quizRequireAnswer": "Por favor responde la pregunta para continuar",
        "quizRestart": "Reiniciar",
        "progressPieUnstarted": "No iniciado",
        "progressPieCompleted": "Completado",
        "progressPieClickToComplete": "Haz clic para completar",
        "progressPieClickToReset": "Haz clic para reiniciar",
        "progressPieQuizFailed": "Fallado"
    },
    "deleted": false,
    "createdAt": "2022-04-13T08:55:03.285Z",
    "updatedAt": "2022-04-13T08:55:40.602Z",
    "iso639Code": "en",
    "transferredAt": "2023-09-13T07:05:25.000Z"
  },
  "fonts": [
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Italic.woff",
      "style": "italic",
      "weight": "400"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Bold.woff",
      "style": "normal",
      "weight": "700"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Regular.woff",
      "style": "normal",
      "weight": "400"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Light.woff",
      "style": "normal",
      "weight": "300"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Black.woff",
      "style": "normal",
      "weight": "900"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Italic.woff",
      "style": "italic",
      "weight": "400"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Bold.woff",
      "style": "normal",
      "weight": "700"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Regular.woff",
      "style": "normal",
      "weight": "400"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Light.woff",
      "style": "normal",
      "weight": "300"
    }
  ],
  "media": []
}
")
