__resolveJsonp("course:und","{
  "course": {
    "id": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
    "originalId": null,
    "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
    "selectedAuthorId": "none",
    "color": "#e40428",
    "navigationMode": "free",
    "title": "Prevención y tratamiento de MARSI",
    "sharePassword": "",
    "description": "<p><span style=\"font-size: 24px;\">Aprende sobre la prevención y el manejo de lesiones cutáneas relacionadas con adhesivos médicos, MARSI. Este módulo cubre medidas preventivas vitales, así como consejos sobre el tratamiento y una introducción a la selección de adhesivos adecuados. &nbsp;</span></p><p><span style=\"font-size: 24px;\">Debes aprobar el examen de conocimientos al final para completar el módulo. Todas las referencias utilizadas en el módulo están enumeradas en el último capítulo.&nbsp;</span></p><p><br></p><p><span style=\"font-size: 18px;\">Esta guía está destinada para tenerla presente cuando la organización toma decisiones clínicas y no constituye un consejo médico. Se deben seguir las normas y reglamentos específicos de su país o instalación en consecuencia.</span></p><p><br></p>",
    "shareId": "4CygSh496UxqWy-4wQr6QjcEFSgSvIoS",
    "copyOf": "KCQ-H0J7iuUrkFxap0gFL_QRmyo7_T77",
    "order": "1711616348565",
    "fonts": null,
    "media": {
      "tmp": {
        "image": {
          "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vO9WolFej6gaGKHR-Essity_logo_colour_RGB.png",
          "type": "image",
          "width": 140,
          "height": 59,
          "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/QVdBWF7borwCOYOa.png",
          "originalUrl": "Essity_logo_colour_RGB.png",
          "useCrushedKey": true
        }
      },
      "image": {
        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/0YYzZWLzMRZX3irv-181120_Leukoplast_Logo_RGB.png",
        "type": "image",
        "width": 174,
        "height": 40,
        "crushedKey": "cEkvQRvdyWQQgP7I.png",
        "originalUrl": "181120_Leukoplast_Logo_RGB.png",
        "useCrushedKey": true
      }
    },
    "coverImage": {
      "alpha": 50,
      "media": {
        "image": {
          "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/3FS3sqGwcYFJiy46-Leukoplast_STEPS_skin%2520tear_clinical%2520image_05-reversed.png",
          "crushedKey": "X--f5HkYfACahWvYol.jpg",
          "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_05-reversed.png",
          "useCrushedKey": true,
          "src": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg"
        }
      },
      "displaySidebar": true
    },
    "lessons": [
      {
        "id": "jhZ60VAJncFYFc4Cqk0Vfm1HV7aaq0AG",
        "originalId": null,
        "author": "aid|56c37a65-15ab-4176-9fd9-227401c4aab4",
        "selectedAuthorId": "aid|56c37a65-15ab-4176-9fd9-227401c4aab4",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Cómo podemos prevenir MARSI?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cliapnnn1002j356ry68tsdct",
            "type": "image",
            "items": [
              {
                "id": "cliapnnn1002k356r1wkungiq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/3gw-EcaHF-66xSvi.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast%20STEPS_%20Lifestyle%20visual_woman%20and%20doctor%20consultation.jpg",
                    "dimensions": {
                      "top": 670,
                      "left": 0,
                      "width": 1582,
                      "height": 451,
                      "originalWidth": 1680,
                      "originalHeight": 1121
                    },
                    "originalUrl": "Leukoplast STEPS_ Lifestyle visual_woman and doctor consultation.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/w0nH7B5nBCE7QfXT-Leukoplast%2520STEPS_%2520Lifestyle%2520visual_woman%2520and%2520doctor%2520consultation.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/NjkmjXWdTBgnp6dp.jpg",
                      "originalUrl": "Leukoplast STEPS_ Lifestyle visual_woman and doctor consultation.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Dado que MARSI es en gran medida evitable, pero también poco reconocida<sup><span style=\"font-size: 14px;\">5,6,7,8</span></sup>, una medida de prevención es la educación de los profesionales de la salud, los pacientes y los cuidadores<span style=\"font-size: 14px;\"><sup>6,9</sup></span>.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.2,
              "cardMode": null,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cliej29lf000s356p5yupjui9",
            "type": "text",
            "items": [
              {
                "id": "cliej29lg000t356pi4qhggkm",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">La educación y la concientización son los factores clave de éxito para la prevención de MARSI ; es importante tener conocimiento sobre estas cinco medidas preventivas:</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsnu9y6j00ab3b74nk99dkcq",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/f8WWaFTQzL8rdTzW-preventive%2520measuresNEW2.png",
                "type": "image",
                "crushedKey": "preventive%20measuresNEW2.png",
                "originalUrl": "preventive measuresNEW2.png",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib25z601293b6xwo5tmu73",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 0,
              "accentColor": null,
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#E40428",
              "entranceAnimation": true
            }
          },
          {
            "id": "clskrg92q01ja3b7510lamrn7",
            "type": "image",
            "items": [
              {
                "id": "clskrg92q01jb3b75wgb4voyh",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/S31FpOfSmSrcSnZQ-Leukoplast%2520STEPS_lifestyle%2520visual_woman%2520garden-round.png",
                    "type": "image",
                    "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_woman%20garden-round.png",
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_woman garden-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Los pacientes de alto riesgo deben ser identificados</strong></span><span style=\"font-size: 14px;\"><sup>18</sup></span><span style=\"font-size: 24px;\">. Aparte de los grupos de edad</span><span style=\"font-size: 14px;\"><sup>9,10</sup></span><span style=\"font-size: 24px;\">&nbsp;específicos que son particularmente vulnerables, se deben considerar otros factores de riesgo</span><span style=\"font-size: 14px;\"><sup>5</sup></span><span style=\"font-size: 24px;\">&nbsp;para MARSI:</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.4,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "paddingBottom": 1,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib3aqa014h3b6x3n4tffx8",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "risks-factors-icons_NOPROCESS_.png",
                "type": "image",
                "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/qrZDH8481FALuujG.png",
                "originalUrl": "risks-factors-icons_NOPROCESS_.png",
                "useCrushedKey": false
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 0,
              "accentColor": null,
              "markerColor": "",
              "zoomOnClick": true,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clia5nzvh0006356px6gzc3l9",
            "type": "image",
            "items": [
              {
                "id": "clia5nzvh0007356p54opwzc5",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/6M-QItQg1iZrKLdv-moisturise%2520picture.png",
                    "type": "image",
                    "crushedKey": "moisturise%20picture.png",
                    "originalUrl": "moisturise picture.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>El régimen individualizado de cuidado de la piel</strong> consiste en cuidar la piel y mantenerla hidratada</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 24px;\">&nbsp;para promover la integridad de la piel, lo que evita la aparición de heridas, así como MARSI. La piel hidratada se puede lograr tanto desde el interior como desde el exterior:</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "imageSize": "small",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "right",
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clibx9y60004w3c5y31dkxitx",
            "type": "image",
            "items": [
              {
                "id": "clibx9y61004z3c5yau96tpxw",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/78_RRIqp94lPCUam-nutrition_icon.png",
                    "type": "image",
                    "crushedKey": "nutrition_icon.png",
                    "originalUrl": "nutrition_icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Mediante una dieta equilibrada y bebiendo suficiente agua</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              },
              {
                "id": "clibx9y6100503c5yj9wmyw5l",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/4Z6SLJMMMpxk2r9o-moisturise%2520icon.png",
                    "type": "image",
                    "crushedKey": "moisturise%20icon.png",
                    "originalUrl": "moisturise icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Mediante la aplicación diaria de crema hidratante, protector solar, uso de emolientes en lugar de jabones para proteger la piel</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsx6zvne01sy3b741m14nkcn",
            "type": "image",
            "items": [
              {
                "id": "clsx6zvne01sz3b744alhgx45",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/gYoLW_TkkVf0Newg-appropriate-adhesive-selectionNEW.png",
                    "type": "image",
                    "crushedKey": "appropriate-adhesive-selectionNEW.png",
                    "originalUrl": "appropriate-adhesive-selectionNEW.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>La selección adecuada del adhesivo</strong> depende de la integridad de la piel del paciente, los factores de riesgo y las características del adhesivo médico.&nbsp;</span></p><p><span style=\"font-size: 24px;\">Cada selección siempre debe iniciarse con una evaluación completa de la piel</span><span style=\"font-size: 14px;\"><sup>5,19</sup></span><span style=\"font-size: 24px;\">:</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.4,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljtqufit001j357065qswbzs",
            "type": "image",
            "items": [
              {
                "id": "cljtqufiu001o3570o2h6lbm0",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/y51Z7Z8XuNwClstm-inspect%2520icon.png",
                    "type": "image",
                    "crushedKey": "inspect%20icon.png",
                    "originalUrl": "inspect icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Inspeccione:</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Inspeccionar la piel visualmente y, cuando sea necesario, también por palpación.</span></p>"
              },
              {
                "id": "cljtqufiu001p3570meoq54c1",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/EjbDgHvwoptzS0od-assess%2520icon.png",
                    "type": "image",
                    "crushedKey": "assess%20icon.png",
                    "originalUrl": "assess icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Evalúe</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">B</span><span style=\"font-size: 22px;\">usque signos locales de irritación o daño y evalúe la piel basándose en temperatura, color, nivel de humedad, fragilidad e integridad.</span></p>"
              },
              {
                "id": "cljtqufiu001q3570cxmg40i2",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/QuusY0wzboEXbhny-document%2520icon.png",
                    "type": "image",
                    "crushedKey": "document%20icon.png",
                    "originalUrl": "document icon.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Documente</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Documente sus hallazgos antes de comenzar la selección de adhesivos.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clktitzih00023578fcfqwoiz",
            "type": "image",
            "items": [
              {
                "id": "clktitzih00033578n949ixfc",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/UhQw0GAuQAlzV3Gu-apply%2520dressing.png",
                    "type": "image",
                    "crushedKey": "apply%20dressing.png",
                    "originalUrl": "apply dressing.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Unas buenas técnicas de aplicación y remoción</strong> son esenciales, ya que la presión y la tensión de la aplicación de un adhesivo médico o la fuerza mecánica creada durante la extracción pueden causar MARSI. Las áreas con riesgo de edema exigen intervalos más cortos de cambios de apósito</span><span style=\"font-size: 14px;\"><sup>12</sup></span><span style=\"font-size: 24px;\">.&nbsp;</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "imageSize": "small",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "right",
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib8ccc01ex3b6xp9yc352z",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "paddingBottom": 0,
              "backgroundType": null,
              "backgroundColor": "#E40428",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloib7orx01en3b6x7w8c14gf",
            "type": "text",
            "items": [
              {
                "id": "cli8v16z7000k3c5y4wh27za2",
                "paragraph": "<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><strong>Aplicación de adhesivos médicos</strong></span><span style=\"font-size: 14px;\"><sup>6,10</sup></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsxdhixq00a83b74rdwj6jfy",
            "type": "image",
            "items": [
              {
                "id": "clsxdhixq00a93b74mpzwazfq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vcSaPgt4YbeRHnVb.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                    "dimensions": {
                      "top": 64,
                      "left": 0,
                      "width": 960,
                      "height": 960,
                      "originalWidth": 960,
                      "originalHeight": 1080
                    },
                    "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/TrPfNs4FtkXD08iT-Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/KHqCJ5JERRQudQPG.jpg",
                      "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Elija el producto correcto en función de la condición de la piel y el tamaño correcto en función de la dimensión de la herida. Comprobar si el paciente se encuentra cómodo y empezar por limpiar la herida, desbridarla y recortar el vello según corresponda a la herida y al estado (es necesario adaptarlo a las pautas locales). Termine secando la piel con golpecitos suaves. </span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "imagePosition": "right",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clsxdfpes009n3b74v0yk8dpn",
            "type": "image",
            "items": [
              {
                "id": "clsxdfpes009o3b748dza1m68",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/POjASIsHfNYRObaw.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_STEPS_skin%20tear_clinical%20image_05.jpg",
                    "dimensions": {
                      "top": 69,
                      "left": 208,
                      "width": 905,
                      "height": 876,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_05.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/US7Lr2mr-Z6KtDxH-Leukoplast_STEPS_skin%2520tear_clinical%2520image_05.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/03a5Z4_W7IyOYvoE.jpg",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_05.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Retire el revestimiento de liberación y aplique el producto de acuerdo con las instrucciones de uso, directamente sobre la herida</span><span style=\"font-size: 22px;\">. En caso de desgarro de la piel, marque una flecha en el apósito para mostrar la dirección correcta de remoción del apósito (adaptación necesaria a las pautas locales).</span></p>"
              },
              {
                "id": "clsxdfpes009p3b74dhwrc8wh",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/SskCOjlFcJjEDtM_.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast_STEPS_skin%20tear_clinical%20image_06.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 325,
                      "width": 944,
                      "height": 945,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_06.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/uPADK1oI0gU8U3Xk-Leukoplast_STEPS_skin%2520tear_clinical%2520image_06.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/IyfKOkbvMxTRRIXF.jpg",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_06.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Inicie la aplicación desde el centro hacia los bordes, evitando arrugas y pliegues. Aplique adhesivos médicos elásticos con la orientación correcta, si se espera hinchazón. No aplique apósitos estirados o con tensión.&nbsp;</span></p>"
              },
              {
                "id": "clsxdfpet009q3b744xuf59xu",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/oCAt1NeHkSoFhp18.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast_Ready_To_Use_Application_INT_NN%202.jpg",
                    "dimensions": {
                      "top": 345,
                      "left": 206,
                      "width": 735,
                      "height": 735,
                      "originalWidth": 960,
                      "originalHeight": 1080
                    },
                    "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN 2.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ffOZc0fRQgCtDe-3-Leukoplast_Ready_To_Use_Application_INT_NN%25202.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ScsDJcw8w4uecIR9.jpg",
                      "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_NN 2.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Use las manos calientes con una presión firme y suave. Vuelva a ajustar el producto adhesivo médico si es necesario.&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clskr93tr00px3b75rm2z3o4v",
            "data": {},
            "type": "multimedia",
            "items": [
              {
                "id": "clskr93ts00py3b75q8fgdj97",
                "media": {
                  "video": {
                    "key": "Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "url": "transcoded-vpeHxq6jgNVCbNZB-Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "type": "video",
                    "poster": "Leukoplast_Ready_To_Use_Application_INT_AP.jpg",
                    "duration": 142,
                    "inputKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vpeHxq6jgNVCbNZB-Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "thumbnail": "https://images.articulate.com/f:jpg,b:fff,w:100,h:100,s:cover/rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/transcoded-vpeHxq6jgNVCbNZB-Leukoplast_Ready_To_Use_Application_INT_AP.0000000.jpg",
                    "originalUrl": "Leukoplast_Ready_To_Use_Application_INT_AP.mp4",
                    "transcodeId": "1709901577036-agn7jp"
                  }
                },
                "caption": ""
              }
            ],
            "family": "multimedia",
            "variant": "video",
            "settings": {
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "cloib8mej01g13b6xns0lrsp9",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "paddingBottom": 0,
              "backgroundType": null,
              "backgroundColor": "#E40428",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli8v42mq00203c5yvid35zyy",
            "type": "text",
            "items": [
              {
                "id": "cli8v3zgu001y3c5ygtbsxjsu",
                "paragraph": "<p style=\"text-align: center;\"><span style=\"font-size: 24px;\"><strong>Remoción de adhesivos médicos</strong></span><span style=\"font-size: 14px;\"><sup>6,10,12</sup></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "clo8qbzaj005d3b6xrmrilbpf",
            "type": "image",
            "items": [
              {
                "id": "clo8qbzak005e3b6x36eqi22v",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/untxs5Vf4fee1N9n.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "removal1.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 14,
                      "width": 435,
                      "height": 435,
                      "originalWidth": 572,
                      "originalHeight": 435
                    },
                    "originalUrl": "removal1.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/5sBMaQ3ZT5ueP7Ss-removal1.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/GRZxForGdUYgZ5hA.jpg",
                      "originalUrl": "removal1.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Afloje con cuidado los bordes del adhesivo médico, nunca hurgue ni rasque el borde del apósito. Coloque los dedos debajo del apósito para continuar aflojando la adherencia.</span></p>"
              },
              {
                "id": "clo8qbzak005f3b6xckgqoc5u",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/9LLoEuJrItjQzem5.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "removal2.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 117,
                      "width": 435,
                      "height": 435,
                      "originalWidth": 669,
                      "originalHeight": 435
                    },
                    "originalUrl": "removal2.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/u3j7mfQzhTaAptoH-removal2.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/eD5qvPi7W3JFC2V5.jpg",
                      "originalUrl": "removal2.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Siempre use ambas manos y tómese el tiempo para quitar el vendaje lentamente. </span> <span style=\"font-size: 22px;\">Con una mano hale, en la dirección del crecimiento del vello si es posible, siempre a nivel de la piel. Use la otra mano para sostener la piel empujándola suavemente hacia abajo.&nbsp;</span></p>"
              },
              {
                "id": "clo8qbzak005g3b6x2h1qmyr5",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/Km-p2S-R4pPRr39g.png",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "removal3.png",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 536,
                      "height": 536,
                      "originalWidth": 540,
                      "originalHeight": 536
                    },
                    "originalUrl": "removal3.png",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/CB9IP40Sl8gk324A-removal3.png",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/aaBKnwWSx3rj-ORe.png",
                      "originalUrl": "removal3.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">Nunca arranque el vendaje halando hacia arriba con una mano</span><span style=\"font-size: 22px;\">.</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clskr7c7600pj3b75jnmrdmpz",
            "data": {},
            "type": "multimedia",
            "items": [
              {
                "id": "clskr7c7700pk3b753n1bjxn1",
                "media": {
                  "video": {
                    "key": "Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "url": "transcoded--t9caT7XHsjO59yQ-Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "type": "video",
                    "poster": "Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.jpg",
                    "duration": 70,
                    "inputKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/-t9caT7XHsjO59yQ-Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "thumbnail": "https://images.articulate.com/f:jpg,b:fff,w:100,h:100,s:cover/rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/transcoded--t9caT7XHsjO59yQ-Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.0000000.jpg",
                    "originalUrl": "Leukoplast_Ready_To_Use_Removal_LSS_INT_AP.mp4",
                    "transcodeId": "1709901728172-fzjmdb"
                  }
                },
                "caption": ""
              }
            ],
            "family": "multimedia",
            "variant": "video",
            "settings": {
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clktj904c000h35781dtsvbor",
            "type": "image",
            "items": [
              {
                "id": "clktj904c000i3578z4q17mck",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/fUujZ3eUamEOhPSL-cutimed%2520protect.png",
                    "type": "image",
                    "crushedKey": "cutimed%20protect.png",
                    "originalUrl": "cutimed protect.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Para los pacientes con mayor riesgo de desarrollar MARSI, los </span><span style=\"font-size: 24px;\"><strong>productos de barrera y los removedores de adhesivos</strong> se pueden usar como protectores y preventivos.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "imageSize": "small",
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "left",
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clk0xt8f2001b35751gzoekkg",
            "type": "image",
            "items": [
              {
                "id": "clk0xt8f3001e35752k1kgxgf",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ZXdv2x4GCm48Wq64-skin%2520barrier.png",
                    "type": "image",
                    "crushedKey": "skin%20barrier.png",
                    "originalUrl": "skin barrier.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Productos de barrera cutánea&nbsp;</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Un producto de barrera cutánea es un polímero formador de película o un producto a base de silicona que funciona como una capa de interfaz entre la piel y el adhesivo médico</span><span style=\"font-size: 14px;\"><sup>9</sup></span><span style=\"font-size: 22px;\">.</span></p>"
              },
              {
                "id": "clk0xt8f3001f3575h9srq9l4",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/a5Dhb21sfzKH0c3y-adhesive%2520remover.png",
                    "type": "image",
                    "crushedKey": "adhesive%20remover.png",
                    "originalUrl": "adhesive remover.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p style=\"text-align: center;\"><span style=\"font-size: 22px;\"><strong>Removedores de adhesivo médicos&nbsp;</strong></span></p><p style=\"text-align: center;\"><span style=\"font-size: 22px;\">Use removedores de adhesivo estériles para pacientes con un alto riesgo de infección</span><span style=\"font-size: 14px;\"><sup>6,9</sup></span><span style=\"font-size: 22px;\">. Considere el uso de removedores de adhesivo sin alcohol</span><span style=\"font-size: 14px;\"><sup>10</sup></span><span style=\"font-size: 22px;\">.</span></p><p style=\"text-align: center;\"><br></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cloineviz009r3b6xrh7szay3",
            "type": "knowledgeCheck",
            "items": [
              {
                "id": "cloinevj000a23b6xwf19rszi",
                "type": "MATCHING",
                "title": "<p><span style=\"font-size: 24px;\">¿Recuerdas el significado de las cinco medidas preventivas para MARSI?</span>&nbsp;</p><p><span style=\"font-size: 17px;\">A continuación haga coincidir la medida preventiva con la descripción correcta para completar las oraciones.</span></p>",
                "answers": [
                  {
                    "id": "cloinevj000a33b6xcsoe48ir",
                    "title": "La identificación de los pacientes de alto riesgo es",
                    "correct": true,
                    "matchTitle": "necesario porque algunas personas son más susceptibles a desarrollar MARSI."
                  },
                  {
                    "id": "cloinevj000a43b6x6vzrh5j4",
                    "title": "El régimen individualizado de cuidado de la piel es",
                    "correct": true,
                    "matchTitle": "cuidar la piel desde el interior y el exterior para evitar la aparición de heridas."
                  },
                  {
                    "id": "cloinevj000a53b6x2o249cki",
                    "title": "La selección adecuada del adhesivo es",
                    "correct": true,
                    "matchTitle": "depende de la integridad de la piel, factores de riesgo y características del apósito adhesivo."
                  },
                  {
                    "id": "cloinr4or00ah3b6x9lykqy9r",
                    "title": "Las buenas técnicas de aplicación y remoción son",
                    "correct": false,
                    "matchTitle": "para evitar la presión, la tensión o las fuerzas mecánicas que pueden causar MARSI."
                  },
                  {
                    "id": "cloinreze00ai3b6x627u2ag6",
                    "title": "El uso de productos barrera y removedores de adhesivo es",
                    "correct": false,
                    "matchTitle": " para proteger la piel durante el uso y la remoción de un producto adhesivo médico."
                  }
                ],
                "feedback": "",
                "feedbackType": "CORRECT_INCORRECT",
                "feedbackCorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 17px;\">¡Ya lo tienes!</span></p>",
                "feedbackIncorrect": "<p style=\"text-align: center;\"><span style=\"font-size: 17px;\">¡Inténtalo de nuevo!</span></p>"
              }
            ],
            "family": "knowledgeCheck",
            "variant": "matching",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplc0ahp00au116j4493hwlv",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 0,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#e40428",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplc0ahp00av116j5up774w3",
            "type": "text",
            "items": [
              {
                "id": "clnopl08e00f23b6xkvp5ryjt",
                "paragraph": "<p style=\"text-align: center;\"><span style=\"font-size: 24px; color: rgb(0, 0, 0);\"><strong>MARSI en acceso vascular</strong></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 2,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clplc0ahp00aw116j6v3c9xfb",
            "type": "text",
            "items": [
              {
                "id": "clj6tiqop001w356rkml7jd5v",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Alrededor del 90% de los pacientes hospitalizados reciben <strong>acceso vascular</strong></span><span style=\"font-size: 14px; color: rgb(49, 53, 55);\"><sup>6</sup>.&nbsp;</span><span style=\"font-size: 24px; color: rgb(49, 53, 55);\">Cuando se usan apósitos intravenosos o cinta de fijación, MARSI puede ser un problema. Haga clic en los marcadores de la imagen a continuación para obtener información sobre algunas medidas preventivas:</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 2,
              "accentColor": null,
              "paddingBottom": 2,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clplc0aag00100zesgjs503cs",
            "type": "interactive",
            "items": [
              {
                "x": "11.202651515151516",
                "y": "36.65951810268702",
                "id": "clktk57mx000k3578jgxi40ya",
                "icon": "02",
                "title": "",
                "isActive": false,
                "description": "<p><span style=\"color: rgb(0, 0, 0);\"><span style=\"font-size: 20px;\">Asegúrese de que la desinfección de la piel se seque por completo antes de aplicar un adhesivo médico</span><span style=\"font-size: 14px;\"><sup>2,20</sup></span><span style=\"font-size: 20px;\">.</span></span></p>"
              },
              {
                "x": "11.34364478114478",
                "y": "54.013182792985994",
                "id": "clktk57mx000l35785l8n5rzj",
                "icon": "02",
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Se puede aplicar una película barrera sin alcohol</span><sup><span style=\"font-size: 14px;\">2</span></sup><span style=\"font-size: 20px;\">.&nbsp;</span></p>",
                "isNewlyInserted": true
              },
              {
                "x": "11.341540404040403",
                "y": "72.42967074555318",
                "id": "clktk57mx000m3578yomqukk2",
                "icon": "02",
                "title": "",
                "hasMedia": false,
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Utilice un apósito adhesivo adecuado y gentil con la piel para la fijación del catéter</span><sup><span style=\"font-size: 14px;\">2</span></sup><sup><span style=\"font-size: 14px;\">,17,20</span></sup><span style=\"font-size: 20px;\">.&nbsp;</span></p>"
              },
              {
                "x": "11.647727272727272",
                "y": "90.62697111139146",
                "id": "clktk57mx000n3578s5uyrti4",
                "icon": "02",
                "title": "",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Utilice una técnica de remoción adecuada. Asegúrate de retirarlo lentamente y a nivel de la piel</span><sup><span style=\"font-size: 14px;\">2</span></sup><span style=\"font-size: 20px;\">.&nbsp;</span></p>"
              }
            ],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/xPzwTZ_8TNYodbTi-Leukoplast%2520STEPS_lifestyle%2520visual_home%2520care%2520man%2520nurse%2520cancer.jpg",
                "type": "image",
                "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_home%20care%20man%20nurse%20cancer.jpg",
                "originalUrl": "Leukoplast STEPS_lifestyle visual_home care man nurse cancer.jpg",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "markerColor": "",
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cli011z5o003r356ph0g2qnuj",
            "type": "text",
            "items": [
              {
                "id": "cli011r25003n356psg9rd2lp",
                "paragraph": "<p><a href=\"https://www.skintears.org/\" rel=\"noopener noreferrer\" target=\"_blank\"></a><span style=\"font-size: 24px;\"><span style=\"color: rgb(255, 255, 255);\">En el próximo capítulo, analizaremos más de cerca cómo tratar el MARSI.&nbsp;</span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl6c208r8003a356qrxd8sy3q",
            "type": "divider",
            "items": [
              {
                "id": "ckus5rpu70010386fx0vf3m3s",
                "type": "",
                "title": "¿Cómo tratamos MARSI?",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "5iaLU3vSoEwYhP5PC4Bw3spHF-nyhR8c",
        "deleted": false,
        "createdAt": "2023-07-08T08:31:33.976Z",
        "updatedAt": "2024-03-26T11:39:45.040Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "bUaLs1GUOTgGrP3scNUfAkHdX0BPvO0e",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Cómo tratamos MARSI?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "clrhhqilg00k13b6w05v10x0b",
            "type": "image",
            "items": [
              {
                "id": "clrhhqilh00k23b6w8qxdxd23",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/St9ur1cm7TS8bWoe-disclaimer.png",
                    "type": "image",
                    "crushedKey": "disclaimer.png",
                    "originalUrl": "disclaimer.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "hero",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "customPaddingTop": 3,
              "entranceAnimation": true,
              "customPaddingBottom": 3,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clsntnt2i00f13b747xikn1ft",
            "type": "image",
            "items": [
              {
                "id": "clsntnt2i00f23b74r788i1xm",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/69uAOmBswyKFG6iv-Leukoplast%2520STEPS_lifestyle%2520visual_woman%2520nurse%2520hospital-mirrored.png",
                    "type": "image",
                    "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_woman%20nurse%20hospital-mirrored.jpg",
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_woman nurse hospital-mirrored.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>En caso de que la piel se haya dañado por el uso de adhesivos médicos, debe seguir los principios de cuidado de heridas basados en la evidencia<span style=\"font-size: 14px;\"><sup>5</sup></span>.&nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clpmlgx4800jb3b6wxljfnx5o",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/SRbm7TLwp5GRY5V5-non-infected.gif",
                "type": "image",
                "crushedKey": "non-infected.gif",
                "originalUrl": "non-infected.gif",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "tmp": {}
              }
            }
          },
          {
            "id": "450657TcSIqPj5UD03a547Aw51eCu7-S",
            "type": "image",
            "items": [
              {
                "id": "clpb52ape066c3b6wu7cuwvqj",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/LikGON8wQsnhT9ge-assessNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "assessNEW_NUMBERS.png",
                    "originalUrl": "assessNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><strong><span style=\"font-size: 24px;\">Evalúe la herida&nbsp;</span></strong><span style=\"font-size: 24px;\"> describa y documente el tipo, color, tamaño, disposición y ubicación.</span></p><p><span style=\"font-size: 24px;\">También <strong>busque signos de infección local o sistémica</strong> como calor, mal olor, edema, eritema, supuración, aumento del dolor, falla del colgajo de la piel y mayor distancia del borde de la herida.</span></p><p><br></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "E7WRvk-TUZIAHos3jvtmlHYucMBfmH62",
            "type": "text",
            "items": [
              {
                "id": "clhf87hnh006w356puvysbr78",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Algunos casos necesitan una evaluación más exhaustiva. En personas inmunodeprimidas, como adultos mayores o personas con diabetes, o en presencia de mala perfusión vascular, se pueden enmascarar los signos de infección local de la herida. Además, distinga entre la inflamación y la infección relacionadas con el trauma</span><span style=\"font-size: 14px; color: rgb(255, 255, 255);\"><sup>5,21</sup></span><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "Y2Vcr4emtBaed5nUrqg8-Y1im8gY5UUE",
            "type": "image",
            "items": [
              {
                "id": "clpb1uri404z83b6w2xiqnmdo",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/cauOwA_T76MWgOar-cleanNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "cleanNEW_NUMBERS.png",
                    "originalUrl": "cleanNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><strong><span style=\"font-size: 24px;\">Limpie</span></strong><span style=\"font-size: 24px;\"> la herida y la piel periherida. Use <strong>agua potable del grifo o una solución no citotóxica</strong> para eliminar los residuos de adhesivo, las bacterias y los desechos celulares.</span></p><p><span style=\"font-size: 24px;\">Las soluciones antisépticas solo deben usarse si existe un alto riesgo de infección, como por ejemplo en heridas traumáticas y contaminadas.</span></p><p><br></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "gstot8nWXfEc3IyVVLAdcxS9lGQ-hM4d",
            "type": "image",
            "items": [
              {
                "id": "clpb1wewu05lz3b6wdhk9fl0f",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/IYNF1Z9GVYMC8wwd-adhesive-selectionNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "adhesive-selectionNEW_NUMBERS.png",
                    "originalUrl": "adhesive-selectionNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Seleccione un producto en función del <strong>propósito previsto</strong>, <strong> el tiempo de uso para la ubicación anatómica específica</strong> y las<strong> condiciones presentes</strong>, incluida la exposición a la humedad, la transpiración, los irritantes y los fluidos corporales.&nbsp;</span></p><p><span style=\"font-size: 24px;\">En la selección, también debe incluir las <strong>propiedades intrínsecas del apósito adhesivo</strong>: cohesión, suavidad, transpirabilidad, elasticidad y flexibilidad.</span></p><p><br></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplbxngm02613b6wmtu78m2m",
            "type": "divider",
            "items": [],
            "family": "divider",
            "variant": "spacing divider",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 0,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 0,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#e40428",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplbxr1f026q3b6wv53sb7te",
            "type": "image",
            "items": [
              {
                "id": "clp2prhg101vh3b6w0ccpcsjk",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/8zqxiagtKtr3vcRd-hypafix-skin-sensitive-ecom-lifestyle.png",
                    "type": "image",
                    "crushedKey": "hypafix-skin-sensitive-ecom-lifestyle.jpg",
                    "originalUrl": "hypafix-skin-sensitive-ecom-lifestyle.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><strong><span style=\"font-size: 24px;\">Educación del paciente</span></strong></p><p><span style=\"font-size: 24px;\">Asegúrese siempre de que los pacientes estén al tanto de la <strong>progresión normal prevista de la cicatrización de las heridas</strong>, así como de los <strong>síntomas alarmantes</strong> que podrían indicar una posible infección o complicaciones</span><span style=\"font-size: 14px;\"><sup>22</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "clplbxzli027g3b6w2utphqdi",
            "type": "text",
            "items": [
              {
                "id": "clpb0hil003hh3b6wwhvghfit",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Si no hay respuesta al tratamiento conservador en un plazo de siete días, o si la herida se deteriora a pesar de los cuidados conservadores, se debe consultar a un especialista en el cuidado de las heridas</span><span style=\"font-size: 14px; color: rgb(255, 255, 255);\"><sup>5</sup></span><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "clpmhzfgu00jh3b6wvbrmug1q",
            "type": "text",
            "items": [
              {
                "id": "clpmhzfgu00ji3b6wq9pan2n9",
                "paragraph": "<p><span style=\"font-size: 24px;\">Durante la evaluación de la herida, debe buscar signos de infección. Si considera los signos mencionados anteriormente, ¿cuál de las heridas a continuación cree usted que está infectada? Haga clic en la imagen que cree que muestra una herida infectada. Recibirá comentarios inmediatamente.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "fwhcK8UHgF_z_k4rNfTmTIZwL5bGeVRv",
            "type": "interactive",
            "items": [
              {
                "id": "clp2qjclr00763b6wnel2a6b0",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p style=\"text-align: left;\"><span style=\"font-size: 20px;\">Esta herida no es reciente y se ha infectado, presentando supuración, tendencia al edema y eritema.&nbsp;</span></p>"
                },
                "front": {
                  "type": "fullimage",
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/KaXmD5UEFiljpm8b.jpg",
                      "type": "image",
                      "isSquare": true,
                      "crushedKey": "10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT%20%281%29.jpg",
                      "dimensions": {
                        "top": 312,
                        "left": 716,
                        "width": 312,
                        "height": 310,
                        "originalWidth": 1600,
                        "originalHeight": 704
                      },
                      "originalUrl": "10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT (1).png",
                      "originalImage": {
                        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/X4RYyOAYI44nRGQA-10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT%2520(1).png",
                        "type": "image",
                        "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/DrccyUR5OLXjnupN.jpg",
                        "originalUrl": "10_Hypafix_Skin_Sensitive_Dressing_Fixation_RGB_800x500_IT (1).png",
                        "useCrushedKey": true
                      },
                      "useCrushedKey": true
                    }
                  },
                  "description": "Front of card 1"
                }
              },
              {
                "id": "clp2qz0ok007v3b6wstoecuia",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p style=\"text-align: left;\"><span style=\"font-size: 20px;\">Este tipo de herida, una laceración, es aguda y se produce por un desgarro o por una fuerza contundente fuerte y de corta duración. No hay signos de infección.</span></p>"
                },
                "front": {
                  "type": "fullimage",
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/7ogYbXL5fTkqIc_d.jpg",
                      "type": "image",
                      "isSquare": true,
                      "crushedKey": "lacerations.jpg",
                      "dimensions": {
                        "top": 240,
                        "left": 242,
                        "width": 478,
                        "height": 477,
                        "originalWidth": 1200,
                        "originalHeight": 1200
                      },
                      "originalUrl": "lacerations.png",
                      "originalImage": {
                        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/6MnHoXEXMiaHfxx_-lacerations.png",
                        "type": "image",
                        "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/d4XgjkwJS1FKsKkz.jpg",
                        "originalUrl": "lacerations.png",
                        "useCrushedKey": true
                      },
                      "useCrushedKey": true
                    }
                  },
                  "description": "Front of card"
                },
                "isNewlyInserted": true
              },
              {
                "id": "clp2qjclr00773b6whog4gd0q",
                "back": {
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/8Nidr4304mElV5mj-lacerations.png",
                      "type": "image",
                      "crushedKey": "-cQyke/lacerations.jpg",
                      "originalUrl": "lacerations.png",
                      "useCrushedKey": true
                    }
                  },
                  "description": "<p style=\"text-align: left;\"><span style=\"font-size: 20px;\">Esta herida es una falla de colgajo cutáneo. No está infectada, pero puede infectarse fácilmente si no se cuida adecuadamente durante la cicatrización, ya que grandes áreas quedan desprotegidas debido a la pérdida de piel.</span></p>"
                },
                "front": {
                  "type": "fullimage",
                  "media": {
                    "image": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/DPN0T-_ViiDAmFu4.png",
                      "type": "image",
                      "isSquare": true,
                      "crushedKey": "skin%20tear%20types%20question.png",
                      "dimensions": {
                        "top": 0,
                        "left": 0,
                        "width": 486,
                        "height": 486,
                        "originalWidth": 1680,
                        "originalHeight": 593
                      },
                      "originalUrl": "skin tear types question.png",
                      "originalImage": {
                        "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/2GLZ2cosFbw9sUWp-skin%2520tear%2520types%2520question.png",
                        "type": "image",
                        "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/nNQsNwpeYuPNeDSn.png",
                        "originalUrl": "skin tear types question.png",
                        "useCrushedKey": true
                      },
                      "useCrushedKey": true
                    }
                  },
                  "description": "Front of card 2"
                }
              }
            ],
            "family": "flashcard",
            "variant": "flashcard",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "l5yn4vzi8ejWwO8f5I8yRjGDYcVGqwsM",
            "type": "text",
            "items": [
              {
                "id": "cl6m7erow002c356q2xrha4xk",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Continúe para aprender sobre el tratamiento de la infección por MARSI.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "SBhDmA-eN4d7fMtxibLW451rS-4KN8Gx",
            "type": "divider",
            "items": [
              {
                "id": "clhn4fmyj008x356u04y506rz",
                "type": "",
                "title": "¿Cómo tratamos un MARSI infectado?",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "Ijn_6pw-QPy_sXocwuP8EJ1GCSeNxbHm",
        "deleted": false,
        "createdAt": "2023-11-30T15:05:35.311Z",
        "updatedAt": "2024-02-16T13:49:25.630Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": 2,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "kzhVHVe0GDWHNZSrS5BJgr7F05ppubJj",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Cómo tratamos un MARSI infectado?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "clrhhvsdo013j3b6wnse79j4c",
            "type": "image",
            "items": [
              {
                "id": "clrhhvsdp013k3b6wxsbspk9a",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/NgJAlWB7WYLvtz0U-disclaimer.png",
                    "type": "image",
                    "crushedKey": "R6B8VI/disclaimer.png",
                    "originalUrl": "disclaimer.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "hero",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "customPaddingTop": 3,
              "entranceAnimation": true,
              "customPaddingBottom": 3,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "1GxIkugWpWgKzmj_zeKvU_Y_RnUveUQM",
            "type": "image",
            "items": [
              {
                "id": "clpb957lg043b3b6w1itaesg0",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/j9S35wubrtGXfm6I.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product%20application.jpg",
                    "dimensions": {
                      "top": 266,
                      "left": 0,
                      "width": 1296,
                      "height": 595,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product application.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/Uyg5WUJAhwc9d0bi-Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product%2520application.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ye7xH0lCbk1sKPBK.jpg",
                      "originalUrl": "Leukoplast_Compress_Cotton_Gauze_Ulcus_Cruris_Product application.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Múltiples estudios muestran que puede ocurrir un mayor crecimiento microbiano debajo de las cintas oclusivas. Cualquier signo de infección durante la evaluación de MARSI necesita tratamiento, especialmente en pacientes vulnerables que son más susceptibles a la infección, como los ancianos, los recién nacidos y los prematuros<sup><span style=\"font-size: 14px;\">5</span></sup>. Siga los principios para el manejo de un MARSI infectado<sup><span style=\"font-size: 14px;\">21</span></sup>.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "styleMode": "BRANDED",
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundMode": "COLOR",
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clpmlu6vj013n3b6wo7rt4zys",
            "type": "interactive",
            "items": [],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/pFt2wyzOutFWQibA-infected.gif",
                "type": "image",
                "crushedKey": "infected.gif",
                "originalUrl": "infected.gif",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "tmp": {}
              }
            }
          },
          {
            "id": "lkR5Z9lbF-WLPqZ3TZDHOi0aA6zflTd7",
            "type": "image",
            "items": [
              {
                "id": "clpb6i9lg017q3b6w4qlohrb2",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/O00-syoeem4z4qJU-assessNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "qINd2Z/assessNEW_NUMBERS.png",
                    "originalUrl": "assessNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>Evalúe la herida</strong>, documente y describa el color, el tamaño, la disposición y la ubicación.&nbsp;</span><span style=\"font-size: 24px;\">También <strong>busque signos de infección local o sistémica</strong>, como calor, mal olor, edema, eritema, supuración, aumento del dolor, falla del colgajo de piel y aumento de la distancia entre el borde de la herida.</span></p><p><span style=\"font-size: 24px;\">Si hay signos de propagación o infección sistémica, o si una herida infectada no responde al tratamiento antimicrobiano, puede ser necesario un <strong>análisis microbiológico</strong>.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 5,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "BeO7xV1oVXdQLsbstK-K8Oi57bXrMqyg",
            "type": "image",
            "items": [
              {
                "id": "clpb6icqm01853b6wgjbwtuw7",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/-Vv38Aj0pytt4rtf-cleanNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "RTUiIS/cleanNEW_NUMBERS.png",
                    "originalUrl": "cleanNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Use una <strong>solución limpiadora antiséptica</strong>. El método de desbridamiento debe basarse en el contexto clínico, los objetivos de la atención, la experiencia del médico, así como en las políticas y procedimientos locales.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "isCustomColor": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#eff1f2",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "ljQSASoMPTCdB2-osmTWSaRS7nVHCFy6",
            "type": "image",
            "items": [
              {
                "id": "clpb6ief8018j3b6wx8hhf8qp",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/0YoeUnskHpxOQYSy-antimicro-dressingNEW_NUMBERS.png",
                    "type": "image",
                    "crushedKey": "antimicro-dressingNEW_NUMBERS.png",
                    "originalUrl": "antimicro-dressingNEW_NUMBERS.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\">Use <strong>apósitos antimicrobianos</strong> cuando haya signos de heridas expuestas, síntomas de infección local de heridas y si se sospecha o se confirma que las heridas tienen biopelícula.</span></p><p><span style=\"font-size: 24px;\">Combínelo con <strong>antibióticos sistémicos</strong> para heridas con signos de exposición y cuando haya síntomas de propagación o infección sistémica.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 2,
              "opacity": 0.5,
              "cardMode": "WHITE",
              "imageSize": "small",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 1,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "jMQQ0lKOWLFgW2zPOttDtb92EaeocBqg",
            "type": "interactive",
            "items": [
              {
                "id": "cloh5xryn02n53b6xks0gl89v",
                "media": {
                  "tmp": {},
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/vKFoEgI2sJrjD_xZ-dermatitis-round.png",
                    "type": "image",
                    "align": "center",
                    "fillWidth": false,
                    "crushedKey": "dermatitis-round.png",
                    "trackingId": "cloh5y0c202p03b6xzq2ddw0k",
                    "originalUrl": "dermatitis-round.png",
                    "useCrushedKey": true,
                    "trackingContext": "block:accordion"
                  }
                },
                "title": "En caso de dermatitis",
                "description": "<p><span style=\"font-size: 22px;\">Investigue las sospechas fuertes de dermatitis por contacto alérgico o irritante o considere una derivación inmediata.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br></span></p><p><span style=\"font-size: 22px;\">En el caso de la <strong>dermatitis de contacto alérgica</strong>, la inflamación aguda debe tratarse con compresas frías y esteroides tópicos de potencia baja a media.&nbsp;</span></p><p><span style=\"font-size: 22px;\">En el caso de <strong>dermatitis de contacto irritante</strong>, se debe identificar y eliminar el agente causal. Los humectantes ricos en lípidos pueden ayudar a mejorar la barrera cutánea</span><span style=\"font-size: 14px;\"><sup>5,</sup><sup>19</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></p>"
              },
              {
                "id": "cloh5xryn02n63b6xs28kvwwk",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/3kMcmxc_4qS6VAES-folliculitis-round.png",
                    "type": "image",
                    "align": "center",
                    "fillWidth": false,
                    "crushedKey": "folliculitis-round.png",
                    "trackingId": "cloh5y0c202p03b6xzq2ddw0k",
                    "originalUrl": "folliculitis-round.png",
                    "useCrushedKey": true,
                    "trackingContext": "block:accordion"
                  }
                },
                "title": "En caso de foliculitis",
                "description": "<p><span style=\"font-size: 22px;\">En el caso de la <strong>foliculitis</strong>, se debe realizar una higiene adecuada de la piel y pueden ser necesarios antibióticos tópicos y/u orales</span><span style=\"font-size: 14px;\"><sup>5</sup></span><span style=\"font-size: 22px;\">.&nbsp;</span></p>"
              }
            ],
            "family": "interactive",
            "variant": "accordion",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            },
            "background": {
              "media": {
                "image": {
                  "type": "image",
                  "useCrushedKey": false
                }
              }
            }
          },
          {
            "id": "UgtY6BhVqPmjMi-gkGMg0fNchAAerS2W",
            "type": "text",
            "items": [
              {
                "id": "cl6m7erow002c356q2xrha4xk",
                "paragraph": "<p><span style=\"font-size: 24px; color: rgb(255, 255, 255);\">Continúe aprendiendo sobre la selección de soluciones adhesivas.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "#9CA9B1",
              "entranceAnimation": true
            }
          },
          {
            "id": "5b3L01L3sFjUyjlo-NLoCf_WGU1S5z6x",
            "type": "divider",
            "items": [
              {
                "id": "clhn4fmyj008x356u04y506rz",
                "type": "",
                "title": "¿Cómo seleccionamos las soluciones adhesivas?",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 5,
              "paddingLinked": true,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true,
              "markerColorContrast": "AUTO",
              "snippetColorContrast": "AUTO",
              "customBackgroundColorContrast": "AUTO"
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "bUaLs1GUOTgGrP3scNUfAkHdX0BPvO0e",
        "deleted": false,
        "createdAt": "2023-11-30T15:05:39.722Z",
        "updatedAt": "2024-01-17T08:05:40.167Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": 3,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "JiVw-mmCf2-OIYpHlEFfS8C-BK-cnNZb",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "¿Cómo seleccionamos las soluciones adhesivas?",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl445k9390006356ocm3cwnek",
            "type": "image",
            "items": [
              {
                "id": "cl445k9390007356okbzuplbp",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/oAAGC6UJ2Hrdx0mQ-Leukoplast-Leukomed-Skin-Sensitive-B2C-Website-Lifestyle-1000x1000px_mirrored.png",
                    "type": "image",
                    "crushedKey": "Leukoplast-Leukomed-Skin-Sensitive-B2C-Website-Lifestyle-1000x1000px_mirrored.png",
                    "originalUrl": "Leukoplast-Leukomed-Skin-Sensitive-B2C-Website-Lifestyle-1000x1000px_mirrored.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>La selección de adhesivos forma parte de las cinco medidas importantes para prevenir y tratar el MARSI. Se debe elegir un adhesivo adecuado en función de una combinación de la piel del paciente, los factores de riesgo y las características del adhesivo médico, y el tipo de MARSI.&nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clsxdynp5014t3b74dix91rll",
            "type": "image",
            "items": [
              {
                "id": "clsxdynp5014u3b74t3k5ezdz",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/5FOZMiyNJmg8Cr7U-appropriate-adhesive-selectionNEW.png",
                    "type": "image",
                    "crushedKey": "p9LsEI/appropriate-adhesive-selectionNEW.png",
                    "originalUrl": "appropriate-adhesive-selectionNEW.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "",
                "paragraph": "<p><span style=\"font-size: 24px;\"><strong>La selección adecuada de adhesivos</strong> implica una evaluación de la piel antes de la aplicación, así como la capacitación y el conocimiento adecuados sobre los adhesivos y la aplicación del producto</span><span style=\"font-size: 14px;\"><sup>6</sup></span><span style=\"font-size: 24px;\">,  por ejemplo,adhesivos médicos con respaldo elástico en áreas con movimiento</span><span style=\"font-size: 14px;\"><sup>12</sup></span><span style=\"font-size: 24px;\">.</span></p>"
              }
            ],
            "family": "image",
            "variant": "text aside",
            "settings": {
              "v": 1,
              "opacity": 0.4,
              "cardMode": null,
              "paddingTop": 5,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#FFFFFF",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7uoxw002h356r1j8m7q24",
            "type": "text",
            "items": [
              {
                "id": "cliuduha3000h356zq704sfcj",
                "paragraph": "<p><span style=\"font-size: 24px;\">La selección de los adhesivos adecuados también implica el conocimiento de las propiedades características de los productos, ya que ciertas propiedades pueden ayudar a reducir ciertos tipos de MARSI</span><span style=\"font-size: 14px;\"><sup>5,6</sup></span><span style=\"font-size: 24px;\">.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7sjfy0026356rq1o5fqiw",
            "type": "image",
            "items": [
              {
                "id": "clhyssjaj0003356xwm06uoad",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/GZz5Qk1hnB8SxGlE-skin-stripping-round.png",
                    "type": "image",
                    "crushedKey": "skin-stripping-round.png",
                    "originalUrl": "skin-stripping-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">El riesgo de <strong>desprendimiento de la piel</strong> se puede reducir mediante la selección de adhesivos que son muy suaves para la piel en la eliminación para asegurar la <strong>eliminación atraumática</strong>.&nbsp;</span></p>"
              },
              {
                "id": "clhyssjaj0004356xdfigvguq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/GbMCBXVniF5AwZVX-skin-tears-round.png",
                    "type": "image",
                    "crushedKey": "skin-tears-round.png",
                    "originalUrl": "skin-tears-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">El riesgo de <strong>desgarros de la piel</strong> también se puede reducir mediante el uso de adhesivos con propiedades de <strong>eliminación atraumática</strong>.&nbsp;</span></p>"
              },
              {
                "id": "clhyssjaj0005356xb5m46986",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/TYS8r_RIu0PODXSs-tension-injury-round.png",
                    "type": "image",
                    "crushedKey": "tension-injury-round.png",
                    "originalUrl": "tension-injury-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">El riesgo de <strong>ampollas por tensión</strong> se puede reducir mediante el uso de <strong>material elástico y flexible</strong>, que es muy maleable.&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7sz9f002d356rvsnupk5t",
            "type": "image",
            "items": [
              {
                "id": "cliwylv4l0020356r0l5c9smk",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/mm_sFrLHNJOc35Aa-dermatitis-round.png",
                    "type": "image",
                    "crushedKey": "d8n8qP/dermatitis-round.png",
                    "originalUrl": "dermatitis-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">El riesgo de <strong>dermatitis</strong> se puede reducir mediante el uso de <strong>adhesivos amigables con la piel</strong> y material de respaldo con bajo potencial de alergia.</span><span style=\"font-size: 20px;\">&nbsp;</span></p>"
              },
              {
                "id": "cliwylv4l0021356rqd1zdcaq",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/osmTbSdDovUPfaTD-maceration-round.png",
                    "type": "image",
                    "crushedKey": "maceration-round.png",
                    "originalUrl": "maceration-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">El riesgo de <strong>maceración</strong> se puede reducir mediante el uso de <strong>material transpirable</strong> para evitar la acumulación de humedad.&nbsp;</span><span style=\"font-size: 20px;\">&nbsp; &nbsp;</span></p>"
              },
              {
                "id": "cliwylv4l0022356rppyvjiug",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/kHT77dJx3LQ_N88l-folliculitis-round.png",
                    "type": "image",
                    "crushedKey": "zfGRsv/folliculitis-round.png",
                    "originalUrl": "folliculitis-round.png",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 22px;\">El riesgo de <strong>foliculitis</strong> se puede reducir con un tratamiento antimicrobiano, sin embargo, no hay propiedades específicas relacionadas con el apósito que puedan ayudar a reducir el riesgo.</span><span style=\"font-size: 20px;\">&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "three column",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clje7ukcb002e356rjpbimwsn",
            "type": "text",
            "items": [
              {
                "id": "clje7ukcb002f356rkt63h5k5",
                "paragraph": "<p><span style=\"font-size: 24px;\">Existen tres grupos de adhesivos médicos con diferentes propiedades y cualidades:</span><ul><li style=\"font-size: 24px;\">Adhesivos a base de caucho.</li><li style=\"font-size: 24px;\">adhesivos a base de acrílico.</li><li style=\"font-size: 24px;\">Adhesivos a base de silicona.</li></lu></p><p><span style=\"font-size: 24px;\">Haga clic en cada pestaña a continuación para obtener más información.</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsxdpy7y00ot3b74u2sfr0gx",
            "type": "interactive",
            "items": [
              {
                "id": "clsxdpy7y00ou3b743x5e36o9",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/_dZEOJXQWDM8dVNX-shutterstock_326780933%2520PLASTER%2520EDITED%2520v6.png",
                    "type": "image",
                    "align": "center",
                    "fillWidth": false,
                    "crushedKey": "shutterstock_326780933%20PLASTER%20EDITED%20v6.jpg",
                    "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                    "originalUrl": "shutterstock_326780933 PLASTER EDITED v6.png",
                    "useCrushedKey": true,
                    "trackingContext": "block:tabs"
                  }
                },
                "title": "A BASE DE CAUCHO",
                "description": "<p><span style=\"font-size: 22px;\">El adhesivo a <strong>base de caucho</strong> es un adhesivo tradicional que fue el primero en el mercado. Tiene un alto nivel de adherencia, pero puede tener un impacto en la integridad de la piel. Estas son algunas ventajas y desventajas:</span></p><p><span style=\"font-size: 22px;\"><br><strong>Ventajas:</strong></span></p><p><span style=\"font-size: 22px;\">+ Fuerte adhesión. Adecuado incluso para asegurar tubos pesados, apósitos y   dispositivos.</span></p><p><span style=\"font-size: 22px;\">+ Una buena tolerancia a la humedad significa que funciona bien cuando está en contacto con la humedad y las secreciones.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Desventajas:</strong></span></p><p><span style=\"font-size: 22px;\">- A menudo contiene látex, que tiene el potencial de causar reacciones alérgicas.&nbsp;</span></p><p><span style=\"font-size: 22px;\">- Puede tener un impacto en pieles frágiles o sensibles.&nbsp;</span></p>"
              },
              {
                "id": "clsxdpy7y00ov3b74tayssdh4",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/AwQN5L2GmnPO67eA.jpg",
                    "type": "image",
                    "align": "center",
                    "isSquare": false,
                    "crushedKey": "Leukosilk_punctureEDIT.jpg",
                    "dimensions": {
                      "top": 222,
                      "left": 0,
                      "width": 1680,
                      "height": 887,
                      "originalWidth": 1680,
                      "originalHeight": 1189
                    },
                    "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                    "originalUrl": "Leukosilk_punctureEDIT.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/LlTXMe1o_yZjPowO-Leukosilk_punctureEDIT.jpg",
                      "type": "image",
                      "align": "center",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/c1_sYmC0triQKH1X.jpg",
                      "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                      "originalUrl": "Leukosilk_punctureEDIT.jpg",
                      "useCrushedKey": true,
                      "trackingContext": "block:tabs"
                    },
                    "useCrushedKey": true,
                    "trackingContext": "block:tabs"
                  }
                },
                "title": "A BASE DE ACRÍLICO",
                "description": "<p><span style=\"font-size: 22px;\">Los adhesivos a <strong>base de acrílico</strong> tienen bajo riesgo de generar alergias y son amigables con la piel para el uso diario. Estas son algunas ventajas y desventajas de los adhesivos a base de acrílico</span></p><p><span style=\"font-size: 22px;\"><br><strong>Ventajas:</strong></span></p><p><span style=\"font-size: 22px;\">+ Bajo riesgo de alergia.</span></p><p><span style=\"font-size: 22px;\">+ Varias fuerzas de adhesión y diferentes materiales de respaldo están disponibles para diferentes ocasiones de uso.&nbsp;</span></p><p><span style=\"font-size: 22px;\">+ Adecuado para la sujeción crítica de dispositivos.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Desventajas:</strong></span></p><p><span style=\"font-size: 22px;\">- Puede causar traumatismos cutáneos si se aplica o retira incorrectamente, o en el caso de pieles muy sensibles o frágiles.</span></p>"
              },
              {
                "id": "clsxdpy7y00ow3b74ju3tmf7f",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/-B4Y954jAa2qd3Bm.jpg",
                    "type": "image",
                    "align": "left",
                    "isSquare": false,
                    "crushedKey": "Leukoplast_STEPS_skin%20tear_clinical%20image_11.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 1680,
                      "height": 826,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/ySvr2PuAn5kYn0Uv-Leukoplast_STEPS_skin%2520tear_clinical%2520image_11.jpg",
                      "type": "image",
                      "align": "left",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/M7rxHyXKu7dC9U3g.jpg",
                      "trackingId": "clsxdpy7y00ot3b74u2sfr0gx",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                      "useCrushedKey": true,
                      "trackingContext": "block:tabs"
                    },
                    "useCrushedKey": true,
                    "trackingContext": "block:tabs"
                  }
                },
                "title": "A BASE DE SILICONA",
                "description": "<p><span style=\"font-size: 22px;\">Los adhesivos a <strong>base de silicona</strong> son la generación de adhesivos más reciente. Su principal ventaja es la eliminación atraumática, sin embargo, su nivel de adherencia es menor que el de los otros tipos de adhesivos. Estas son algunas ventajas y desventajas:&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Ventajas:</strong></span></p><p><span style=\"font-size: 22px;\">+ Muy suave con la piel al momento de retirarlo.</span></p><p><span style=\"font-size: 22px;\">+ Remoción atraumática sin dañar la piel.</span></p><p><span style=\"font-size: 22px;\">+ Menos dolor en la remoción.&nbsp;</span></p><p><span style=\"font-size: 22px;\">+ Buena opción para pieles muy sensibles y frágiles o en casos de cambios frecuentes de apósitos.</span></p><p><span style=\"font-size: 22px;\">+ Reposicionable.&nbsp;</span></p><p><span style=\"font-size: 22px;\"><br><strong>Desventajas:</strong></span></p><p><span style=\"font-size: 22px;\">- No se recomienda para la fijación crítica primaria de tubos y dispositivos.&nbsp;</span></p><p><span style=\"font-size: 22px;\">- Menor adherencia en ambientes húmedos.&nbsp;</span></p>"
              }
            ],
            "family": "interactive",
            "variant": "tabs",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": false,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#ffffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljeeb9y6005u356rnl8tci4b",
            "type": "text",
            "items": [
              {
                "id": "cljeeag49005h356r8aapmz80",
                "paragraph": "<p><span style=\"font-size: 24px;\">¿Cuál es la mejor opción de adhesivo para pacientes con piel frágil o comprometida? Haga clic en la categoría de abajo que considera usted que es la mejor, recibirá retroalimentación directamente.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cliwwgn140005356rjsf5zzwc",
            "type": "interactive",
            "items": [
              {
                "id": "cli9b9xhp000j356pai76pi7y",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><strong>Esta no es una buena opción</strong>. Los adhesivos a base de caucho son muy fuertes, pero pueden ser agresivos para la piel sensible o frágil y contienen látex que puede causar reacciones alérgicas.</p>"
                },
                "front": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><span style=\"font-size: 28px;\"><span style=\"color: rgb(228, 4, 40);\"><strong>Adhesivo a base de caucho</strong></span></span></p>"
                }
              },
              {
                "id": "cli9b9xhp000k356pwuafzdn2",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><strong>Esta no es la mejor opción</strong>. A pesar de que los adhesivos a base de acrílico son ampliamente utilizados y son amigables con la piel, pueden causar trauma en la piel si no se aplican o eliminan correctamente o si la piel es demasiado frágil.</p>"
                },
                "front": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><span style=\"font-size: 28px;\"><strong><span style=\"color: rgb(228, 4, 40); background-color: rgb(255, 255, 255);\">Adhesivo a base de acrílico</span></strong></span></p>"
                }
              },
              {
                "id": "cliudv8qe000q356zc91uxq5t",
                "back": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><strong>¡Buena opción!</strong> Los adhesivos a base de silicona son la mejor opción para prevenir el MARSI en pacientes de alto riesgo con piel frágil o comprometida.&nbsp;</p>"
                },
                "front": {
                  "media": {
                    "image": {
                      "key": "assets/rise/assets/block-defaults/mountains.jpg",
                      "src": "LYBZxL/mountains.jpg",
                      "type": "image",
                      "thumbnail": "https://articulateusercontent.com/assets/rise/assets/block-defaults/mountains_thumb.jpg",
                      "originalUrl": "mountains.jpg"
                    }
                  },
                  "description": "<p><span style=\"color: rgb(228, 2, 40); font-size: 28px;\"><strong>Adhesivo a base de silicona</strong></span></p>"
                },
                "isNewlyInserted": true
              }
            ],
            "family": "flashcard",
            "variant": "flashcard",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 1,
              "accentColor": null,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljee3jer004s356rzry9bfca",
            "type": "image",
            "items": [
              {
                "id": "cljeej4iu0067356rfixz4sse",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/JMLr81qV_wqKXRQN.jpg",
                    "type": "image",
                    "isSquare": true,
                    "crushedKey": "Leukoplast%20STEPS_lifestyle%20visual_nursing%20home%20woman.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 1120,
                      "height": 1120,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast STEPS_lifestyle visual_nursing home woman.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/qyZk7nmrGXmxL9a5-Leukoplast%2520STEPS_lifestyle%2520visual_nursing%2520home%2520woman.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/Yz4pvmXPp95HCs0b.jpg",
                      "originalUrl": "Leukoplast STEPS_lifestyle visual_nursing home woman.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">Para los <strong>pacientes de alto riesgo</strong> con piel frágil, una variedad de <strong>adhesivos a base de silicona</strong> sensibles a la piel ayuda a reducir el riesgo de contraer MARSI. &nbsp;</span></p>",
                "isNewlyInserted": true
              },
              {
                "id": "clje6tj0l001n356rbql8jul2",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/F1INR-cVwu32RiLa-shutterstock_2393485965.jpg",
                    "type": "image",
                    "crushedKey": "shutterstock_2393485965.jpg",
                    "originalUrl": "shutterstock_2393485965.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p><span style=\"font-size: 24px;\">Para los <strong>pacientes de bajo riesgo</strong> con piel normal, una variedad estándar de <strong>adhesivos a base de acrílico</strong> ayuda a reducir el riesgo de contraer MARSI.&nbsp;</span></p>",
                "paragraph": "<p><span style=\"font-size: 24px;\">Para los pacientes con bajo riesgo de desarrollar MARSI, las propiedades del apósito en un surtido estándar con adhesivo acrilato ayudarán a reducir el riesgo.&nbsp;</span></p>"
              }
            ],
            "family": "gallery",
            "variant": "two column",
            "settings": {
              "v": 1,
              "opacity": 0.5,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": false,
              "opacityColor": "#000000",
              "imagePosition": "left",
              "paddingBottom": 3,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "cljeeb405005q356rv2jx9k4g",
            "type": "text",
            "items": [
              {
                "id": "cljeeb405005r356r3qtq7y8s",
                "paragraph": "<p><span style=\"font-size: 24px;\">¿Recuerda las propiedades de apósito que mejor previenen el riesgo de tipos específicos de MARSI? &nbsp;A continuación mueva las descripciones de las propiedades a la casilla MARSI correcta. Usted recibirá retroalimentación directamente. &nbsp;&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "paddingTop": 5,
              "accentColor": null,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljee9xvv0057356r4fw35tlz",
            "type": "interactive",
            "items": [
              {
                "id": "cljee9xvv0058356re1k6a0is",
                "title": "Remoción atraumática",
                "pileId": 1
              },
              {
                "id": "cljee9xvw0059356roqcuhilv",
                "title": "Material elástico y flexible, muy maleable",
                "pileId": 2
              },
              {
                "id": "cljeecj4r005w356rimua0nug",
                "title": "Material transpirable",
                "pileId": "cljeecj4r005v356rtirwp62n"
              },
              {
                "id": "cljeecjv3005y356rjk8a99h4",
                "title": "Adhesivos amigables con la piel y material de respaldo con bajo potencial de alergia",
                "pileId": "cljeecjv3005x356rxz79v54v"
              }
            ],
            "piles": [
              {
                "id": 1,
                "title": "Desprendimiento de la piel y desgarro de la piel"
              },
              {
                "id": 2,
                "title": "Lesión por tensión o ampolla"
              },
              {
                "id": "cljeecj4r005v356rtirwp62n",
                "title": "Maceración"
              },
              {
                "id": "cljeecjv3005x356rxz79v54v",
                "title": "Dermatitis"
              }
            ],
            "family": "interactive-fullscreen",
            "variant": "sorting",
            "settings": {
              "v": 2,
              "cardMode": "WHITE",
              "mediaWidth": "1",
              "paddingTop": 3,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 3,
              "paddingLinked": true,
              "backgroundType": "COLOR",
              "backgroundColor": "#EFF1F2",
              "entranceAnimation": true
            }
          },
          {
            "id": "clsopinr900kv3b74kkooa4th",
            "type": "image",
            "items": [
              {
                "id": "clsopinr900kw3b7417yizsdx",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/PIamDHCzoalVsTde.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "sOYlTg/Leukoplast_STEPS_skin%20tear_clinical%20image_11.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 0,
                      "width": 1680,
                      "height": 945,
                      "originalWidth": 1680,
                      "originalHeight": 945
                    },
                    "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/v9s-dbVgHLZqA99a-Leukoplast_STEPS_skin%2520tear_clinical%2520image_11.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/d_kXaq9Op2bRgGEH.jpg",
                      "originalUrl": "Leukoplast_STEPS_skin tear_clinical image_11.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>La tecnología de silicona de los adhesivos para piel sensible ayuda a la eliminación atraumática y el dolor al retirarse se reduce. Incluso se pueden reposicionar sin perder su fuerza adhesiva.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "v": 1,
              "opacity": 0.3,
              "cardMode": null,
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundType": null,
              "entranceAnimation": true
            }
          },
          {
            "id": "clkwcj8f50017357866ms2560",
            "type": "text",
            "items": [
              {
                "id": "clkwcj49u00153578ttxhucny",
                "paragraph": "<p><span style=\"font-size: 24px;\">Las ventajas de la tecnología de silicona se refieren a la tensión superficial. Haga clic en los marcadores en la imagen de abajo para aprender cómo se diferencia entre los adhesivos tradicionales y los adhesivos de silicona cuando se trata de tensión superficial y sensibilidad de la piel.&nbsp;</span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "v": 1,
              "cardMode": null,
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 1,
              "backgroundType": null,
              "backgroundColor": "#fffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "cljy7dzp8000435705ea8djij",
            "type": "interactive",
            "items": [
              {
                "x": "14.154062605063114",
                "y": "37.17207166883681",
                "id": "cljy7dzp900053570sgkg6pb3",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/gkjt3hcTb2-qXoU4.png",
                    "type": "image",
                    "align": "left",
                    "isSquare": false,
                    "crushedKey": "standard%20dressing.png",
                    "dimensions": {
                      "top": 0,
                      "left": 22,
                      "width": 1635,
                      "height": 530,
                      "originalWidth": 1680,
                      "originalHeight": 530
                    },
                    "originalUrl": "standard dressing.png",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/HTh58apJJiJkOIQ3-standard%2520dressing.png",
                      "type": "image",
                      "align": "left",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/9FGPIIandQLvW-e6.png",
                      "originalUrl": "standard dressing.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "title": "Adhesivo tradicional",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">El adhesivo tradicional solo tiene un contacto limitado con la piel al principio y requiere una mayor adherencia. Se calienta con el tiempo y rellena los huecos, aumentando aún más la adherencia. Requiere más fuerza para retirarlo.</span></p>"
              },
              {
                "x": "58.297162134285905",
                "y": "38.777008056640625",
                "id": "cljy7dzp900063570ogvmylwb",
                "icon": "02",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/pYy6N5gt4dUw0TsK.jpg",
                    "type": "image",
                    "align": "left",
                    "isSquare": false,
                    "crushedKey": "silicone%20dressing.jpg",
                    "dimensions": {
                      "top": 0,
                      "left": 43,
                      "width": 1593,
                      "height": 549,
                      "originalWidth": 1680,
                      "originalHeight": 549
                    },
                    "originalUrl": "silicone dressing.png",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/nGPW1gUrun3nUwnm-silicone%2520dressing.png",
                      "type": "image",
                      "align": "left",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/P2AJ4czrTzhIgk-y.jpg",
                      "originalUrl": "silicone dressing.png",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "title": "Adhesivo de silicona",
                "isActive": false,
                "description": "<p><span style=\"font-size: 20px;\">Los apósitos adhesivos de silicona tienen una tensión superficial baja, lo que les permite entrar en contacto con toda la superficie de la piel desde el principio. Necesitan menos adherencia para crear una unión segura y requieren menos fuerza para retirarlos.</span></p>"
              }
            ],
            "media": {
              "image": {
                "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/parvGdATKJBfo978-Standard%2520vs%2520silicone%2520adhesive.png",
                "type": "image",
                "crushedKey": "Standard%20vs%20silicone%20adhesive.png",
                "originalUrl": "Standard vs silicone adhesive.png",
                "useCrushedKey": true
              }
            },
            "family": "interactive-fullscreen",
            "variant": "labeledgraphic",
            "settings": {
              "v": 1,
              "cardMode": null,
              "mediaWidth": "1",
              "paddingTop": 0,
              "accentColor": null,
              "zoomOnClick": true,
              "paddingBottom": 5,
              "backgroundType": null,
              "backgroundColor": "#fffff",
              "entranceAnimation": true
            }
          },
          {
            "id": "clix15wol0035356rdf5l61tf",
            "type": "divider",
            "items": [
              {
                "id": "ckus5rpu70010386fx0vf3m3s",
                "type": "",
                "title": "Continúe con la prueba de conocimiento",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "",
        "deleted": false,
        "createdAt": "2021-01-18T13:04:23.387Z",
        "updatedAt": "2024-03-25T13:13:03.930Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "e8GBrtGkhqC3uGofNjrWINibhF3ZVXGe",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "Prueba del conocimiento",
        "description": "<p><span style=\"font-size: 24px;\">¡Es hora de poner a prueba tus conocimientos! Debes responder correctamente 8 de las 10 preguntas para aprobar la prueba y completar el curso.</span></p><p><br></p>",
        "type": "quiz",
        "icon": "Quiz",
        "items": [
          {
            "id": "cl6kq79y80003356qo5i1cbx8",
            "type": "MULTIPLE_RESPONSE",
            "media": {
              "tmp": {
                "image": {
                  "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/xuQR9WouCrZP65US.jpg",
                  "type": "image",
                  "align": "left",
                  "isSquare": false,
                  "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/xuQR9WouCrZP65US.jpg",
                  "dimensions": {
                    "top": 0,
                    "left": 0,
                    "width": 1680,
                    "height": 882,
                    "originalWidth": 1680,
                    "originalHeight": 1144
                  },
                  "originalUrl": "Leukoplast_SkinTears_Women_Pose03+Wound_1565_CMYK.png",
                  "originalImage": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/VFpcFegzFbDkcbkv-Leukoplast_SkinTears_Women_Pose03%252BWound_1565_CMYK.png",
                    "type": "image",
                    "align": "left",
                    "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/rKWvownzH-dDnEjw.jpg",
                    "originalUrl": "Leukoplast_SkinTears_Women_Pose03+Wound_1565_CMYK.png",
                    "useCrushedKey": true
                  },
                  "useCrushedKey": true
                }
              }
            },
            "title": "<p><span style=\"font-size: 22px;\">¿Cuáles de las siguientes medidas son importantes para prevenir las MARSI?</span></p><p><span style=\"font-size: 22px;\">Respuesta de selección multiple.</span></p>",
            "answers": [
              {
                "id": "cl6kq79y80004356qdi3y18nx",
                "title": "<p><span style=\"font-size: 22px;\">Identificación de pacientes de alto riesgo.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cl6kq79y80005356qb4hcuttk",
                "title": "<p><span style=\"font-size: 22px;\">Régimen individualizado de cuidado de la piel.</span></p>",
                "feedback": ""
              },
              {
                "id": "cl6x7egb10002356qiauf7um8",
                "title": "<p><span style=\"font-size: 22px;\">Utilice principalmente adhesivos a base de caucho.</span></p>"
              },
              {
                "id": "clkwgsn53006j35784hgww116",
                "title": "<p><span style=\"font-size: 22px;\">Selección apropiada del adhesivo. </span></p>"
              },
              {
                "id": "clkwgt46e00833578bqqmyups",
                "title": "<p><span style=\"font-size: 22px;\">Buenas técnicas de aplicación y remoción. </span></p>"
              },
              {
                "id": "clkwgtj6z009q3578d7pu1pgg",
                "title": "<p><span style=\"font-size: 22px;\">Uso de productos barrera y removedores de adhesivos. </span></p>"
              }
            ],
            "correct": "cl6kq79y80005356qb4hcuttk",
            "corrects": [
              "cl6kq79y80004356qdi3y18nx",
              "cl6kq79y80005356qb4hcuttk",
              "clkwgsn53006j35784hgww116",
              "clkwgt46e00833578bqqmyups",
              "clkwgtj6z009q3578d7pu1pgg"
            ],
            "feedback": ""
          },
          {
            "id": "cl6kq79y80006356qqyjmx5y2",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">¿Cuáles de las siguientes circunstancias son indicaciones de pacientes de alto riesgo?</span></p><p><span style=\"font-size: 22px;\">Respuesta de selección multiple.</span></p>",
            "answers": [
              {
                "id": "cl6kq79y80007356ql6hczpby",
                "title": "<p><span style=\"font-size: 22px;\">Extremos de edad: Muy joven o muy viejo.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cl6kq79y8000a356qtljjedtk",
                "title": "<p><span style=\"font-size: 22px;\">Condiciones dermatológicas.</span></p>",
                "feedback": ""
              },
              {
                "id": "cl6kq79y80008356q7r8a2pqu",
                "title": "<p><span style=\"font-size: 22px;\">Actividades deportivas extremas.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli03xop7009b356pfrt5m8iu",
                "title": "<p><span style=\"font-size: 22px;\">Desnutrición y deshidratación.</span></p>"
              },
              {
                "id": "cli03ybl3009y356pxaj4ykmr",
                "title": "<p><span style=\"font-size: 22px;\">Edema.</span></p>"
              }
            ],
            "correct": "cl6kq79y80008356q7r8a2pqu",
            "corrects": [
              "cl6kq79y80007356ql6hczpby",
              "cl6kq79y8000a356qtljjedtk",
              "cli03xop7009b356pfrt5m8iu",
              "cli03ybl3009y356pxaj4ykmr"
            ],
            "feedback": ""
          },
          {
            "id": "cli04iomj0011356p9veupu5n",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">¿Qué se necesita para una evaluación completa de la piel?</span></p><p><span style=\"font-size: 22px;\">Respuesta de selección multiple.</span></p>",
            "answers": [
              {
                "id": "cli04iomm0012356ph5ubvfq5",
                "title": "<p><span style=\"font-size: 22px;\">Inspección visual de la piel y palpación si es necesario. </span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04iomm0014356pdd6e0c16",
                "title": "<p><span style=\"font-size: 22px;\">Evaluación de la temperatura, el color, el nivel de humedad, la fragilidad, la turgencia y la integridad de la piel.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04iomm0015356pg1hxfkh5",
                "title": "<p><span style=\"font-size: 22px;\">Información del tipo de sangre.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04iomm0013356pitlt9578",
                "title": "<p><span style=\"font-size: 22px;\">Documentación</span></p>",
                "correct": true,
                "feedback": ""
              }
            ],
            "correct": "cli04iomm0012356ph5ubvfq5",
            "corrects": [
              "cli04iomm0012356ph5ubvfq5",
              "cli04iomm0013356pitlt9578",
              "cli04iomm0014356pdd6e0c16"
            ],
            "feedback": ""
          },
          {
            "id": "cli04c0z00009356phxrat49g",
            "type": "MATCHING",
            "title": "<p><span style=\"font-size: 22px;\">¿Qué caracteriza a los tres tipos de adhesivos?. A base de caucho, a base de acrílico y a base de silicona.</span></p><p><span style=\"font-size: 22px;\">Haga coincidir los diferentes tipos de adhesivo con las características correctas para completar las oraciones.</span></p>",
            "answers": [
              {
                "id": "cli04c0z0000a356popuenf0s",
                "title": "Adhesivos a base de caucho son ",
                "matchTitle": "Adhesivos tradicionales con alto nivel de adherencia pero con posible impacto en la integridad de la piel."
              },
              {
                "id": "cli04c0z0000b356pmcj9sa42",
                "title": "Adhesivos a base de acrílico son ",
                "matchTitle": "adhesivos de baja alergia y amigables con la piel para el uso diario en pacientes de bajo riesgo."
              },
              {
                "id": "cli04c0z0000c356p2l4cjkjh",
                "title": "Adhesivos a base de silicona son ",
                "matchTitle": "adhesivos amigables para la piel con un nivel de adhesión más bajo pero buenos para la remoción atraumática."
              }
            ],
            "feedback": ""
          },
          {
            "id": "cli04m66e006k356pf07xfruc",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">¿Qué factores son importantes para una selección adecuada del adhesivo para el tratamiento o la prevención de la MARSI?</span></p><p><span style=\"font-size: 22px;\">Respuesta de selección multiple.</span></p>",
            "answers": [
              {
                "id": "cli04m66h006l356pangbfv7d",
                "title": "<p><span style=\"font-size: 22px;\">Género del paciente.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04m66h006o356p69bz99qz",
                "title": "<p><span style=\"font-size: 22px;\">Evaluación de la piel.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04m66h006m356pqschbryq",
                "title": "<p><span style=\"font-size: 22px;\">Tipo de MARSI. </span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli04m66h006n356pmz198k5n",
                "title": "<p><span style=\"font-size: 22px;\">Factores de riesgo del paciente.&nbsp;</span></p>",
                "feedback": ""
              },
              {
                "id": "cli04nx7q00bd356phuzznf91",
                "title": "<p><span style=\"font-size: 22px;\">Características adhesivas.</span></p>"
              }
            ],
            "correct": "cli04m66h006l356pangbfv7d",
            "corrects": [
              "cli04m66h006m356pqschbryq",
              "cli04m66h006n356pmz198k5n",
              "cli04m66h006o356p69bz99qz",
              "cli04nx7q00bd356phuzznf91"
            ],
            "feedback": ""
          },
          {
            "id": "cli1cp27y0020356ppmmwa7km",
            "type": "MATCHING",
            "title": "<p><span style=\"font-size: 22px;\">Al seleccionar adhesivos, ciertas propiedades pueden ayudar a reducir el riesgo de ciertos tipos de MARSI. Haga coincidir el tipo MARSI con la propiedad adhesiva correcta para completar las oraciones.</span></p>",
            "answers": [
              {
                "id": "cli1cp2810021356puu5nto5r",
                "title": "El riesgo de desprendimiento de la piel se puede reducir seleccionando adhesivos que sean ",
                "matchTitle": "Muy suave con la piel para garantizar una remoción atraumática."
              },
              {
                "id": "cli1cp2810022356prnfeqis8",
                "title": "El riesgo de dermatitis se puede reducir seleccionando adhesivos y material de respaldo que sea ",
                "matchTitle": "amigable con la piel y con bajo potencial de alergia."
              },
              {
                "id": "cli1cp2810023356p5y247gg7",
                "title": "El riesgo de ampollas por tensión se puede reducir seleccionando adhesivos que sean ",
                "matchTitle": "estirable, flexible y muy maleable."
              }
            ],
            "feedback": ""
          },
          {
            "id": "cli1cu3uh0024356p2d6cdf74",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">¿Cómo se asegura una buena <strong>aplicación</strong> de adhesivo para reducir el riesgo de MARSI? Seleccione todos los factores importantes.</span></p>",
            "answers": [
              {
                "id": "cli1cu3ul0025356p1yq1w4ho",
                "title": "<p><span style=\"font-size: 22px;\">Asegúrese de que la piel esté siempre seca.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0027356p2qfxr9no",
                "title": "<p><span style=\"font-size: 22px;\">Asegúrese de que la piel esté siempre húmeda.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0028356psgp7yi23",
                "title": "<p><span style=\"font-size: 22px;\">Asegúrese de estirar el producto adhesivo médico tanto como sea posible.</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0026356ptgqaoji5",
                "title": "<p><span style=\"font-size: 22px;\">Aplique productos adhesivos médicos elásticos con la orientación correcta si se espera hinchazón.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cwai4009s356p9v85t8w9",
                "title": "<p><span style=\"font-size: 22px;\">Utilice una presión suave durante la aplicación.</span></p>"
              },
              {
                "id": "clkwhvp7c01ix3578wv6iiltu",
                "title": "<p><span style=\"font-size: 22px;\">Reajuste el producto adhesivo médico si es necesario.</span></p>"
              }
            ],
            "correct": "",
            "corrects": [
              "cli1cu3ul0025356p1yq1w4ho",
              "cli1cu3ul0026356ptgqaoji5",
              "cli1cwai4009s356p9v85t8w9",
              "clkwhvp7c01ix3578wv6iiltu"
            ],
            "feedback": ""
          },
          {
            "id": "clkwhwwsh01k63578pz56pzzi",
            "type": "MULTIPLE_RESPONSE",
            "title": "<p><span style=\"font-size: 22px;\">¿Cómo se garantiza una buena <strong>eliminación</strong> del adhesivo para reducir el riesgo de MARSI? Selecciona todos los factores importantes.&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1cu3ul0025356p1yq1w4ho",
                "title": "<p><span style=\"font-size: 22px;\">Utilice siempre las dos manos. </span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0027356p2qfxr9no",
                "title": "<p><span style=\"font-size: 22px;\">Retire el producto adhesivo médico lo más rápido posible.&nbsp;</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0028356psgp7yi23",
                "title": "<p><span style=\"font-size: 22px;\">Retire el producto adhesivo médico lentamente. &nbsp;</span></p>",
                "feedback": ""
              },
              {
                "id": "cli1cu3ul0026356ptgqaoji5",
                "title": "<p><span style=\"font-size: 22px;\">Nunca hurgue ni rasque el borde del apósito.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cwai4009s356p9v85t8w9",
                "title": "<p><span style=\"font-size: 22px;\">Asegúrese de no arrancar nunca el adhesivo halando hacia arriba con una mano.</span></p>"
              }
            ],
            "correct": "cli1cu3ul0025356p1yq1w4ho",
            "corrects": [
              "cli1cu3ul0025356p1yq1w4ho",
              "cli1cwai4009s356p9v85t8w9",
              "cli1cu3ul0028356psgp7yi23",
              "cli1cu3ul0026356ptgqaoji5"
            ],
            "feedback": ""
          },
          {
            "id": "cli1cxp0m00a4356pyb4lkh9c",
            "type": "MULTIPLE_CHOICE",
            "title": "<p><span style=\"font-size: 22px;\">Los productos de barrera cutánea y los removedores de adhesivos médicos pueden ayudar a prevenir y proteger contra el MARSI. ¿Es esto verdadero o falso?&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1cxp0r00a5356p94f2mact",
                "title": "<p><span style=\"font-size: 22px;\">Falso</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cxp0r00a6356ppi6egala",
                "title": "<p><span style=\"font-size: 22px;\">Verdadero</span></p>",
                "feedback": ""
              }
            ],
            "correct": "cli1cxp0r00a6356ppi6egala",
            "corrects": [
              "cli1cxp0r00a5356p94f2mact"
            ],
            "feedback": ""
          },
          {
            "id": "clkwi2eub01r335783l3dg5ef",
            "type": "MULTIPLE_CHOICE",
            "title": "<p><span style=\"font-size: 22px;\">¿Qué tipo de adhesivo utiliza la tensión superficial a su favor para la remoción atraumática?&nbsp;</span></p>",
            "answers": [
              {
                "id": "cli1cxp0r00a5356p94f2mact",
                "title": "<p><span style=\"font-size: 22px;\">Adhesivos tradicionales.</span></p>",
                "correct": true,
                "feedback": ""
              },
              {
                "id": "cli1cxp0r00a6356ppi6egala",
                "title": "<p><span style=\"font-size: 22px;\">Adhesivos de silicona.</span></p>",
                "feedback": ""
              }
            ],
            "correct": "cli1cxp0r00a6356ppi6egala",
            "corrects": [
              "cli1cxp0r00a5356p94f2mact"
            ],
            "feedback": ""
          }
        ],
        "media": {},
        "piles": [],
        "settings": {
          "retryCount": -1,
          "passingScore": 80,
          "revealAnswers": "all",
          "passToContinue": false,
          "shuffleAnswerChoices": true,
          "randomizeQuestionOrder": true
        },
        "duplicatedFromId": "",
        "deleted": false,
        "createdAt": "2022-08-08T12:24:30.112Z",
        "updatedAt": "2024-01-11T09:27:25.602Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": false,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "sbx88kt9TlBjd6eESUAmYy7INZO44uea",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "Bien hecho",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl1v0rioj00063c5xna9scnfk",
            "type": "image",
            "items": [
              {
                "id": "cl1v0rioj00073c5x75oqdb7o",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/5eyVWRgyw1CP90AZ.jpg",
                    "type": "image",
                    "isSquare": false,
                    "crushedKey": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                    "dimensions": {
                      "top": 165,
                      "left": 0,
                      "width": 1680,
                      "height": 572,
                      "originalWidth": 1680,
                      "originalHeight": 1120
                    },
                    "originalUrl": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                    "originalImage": {
                      "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/yR1q9lE44orGwD7T-Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                      "type": "image",
                      "crushedKey": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/y1ltTWazVZBTUkah.jpg",
                      "originalUrl": "Leukoplast-Skin-Sensitive-2_0-Lady-With-Dressing-And-Baby-Lifestyle.jpg",
                      "useCrushedKey": true
                    },
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Ha completado con éxito este módulo sobre la prevención y el tratamiento de las MARSI. Ahora puede salir del módulo o continuar con la lista de referencias.</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cku8spgyz00gl386ilzk3tt50",
            "type": "interactive",
            "items": [
              {
                "id": "cku8rl5qx000p386i1ehfwql0",
                "type": "exit-course",
                "label": "SALIR",
                "description": "<p><span style=\"font-size: 24px;\"><span style=\"color: rgb(49, 53, 55);\">Haga clic para salir del módulo.</span></span></p>",
                "destination": "exit-course"
              }
            ],
            "family": "buttons",
            "variant": "button",
            "settings": {
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "clkwi9e3b01r43578zf1ha901",
            "type": "divider",
            "items": [
              {
                "id": "clkwi9e3c01r535786yds0pzd",
                "type": "",
                "title": "LISTA DE REFERENCIAS",
                "buttonColor": "brand",
                "completeHint": "Completa el contenido arriba antes de continuar."
              }
            ],
            "family": "continue",
            "variant": "continue",
            "settings": {
              "cardMode": "WHITE",
              "paddingTop": 3,
              "accentColor": null,
              "paddingBottom": 3,
              "backgroundType": "LIGHT",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "arEwMnP9-PDVNH1Zwn9ro3tavZLbw1lI",
        "deleted": false,
        "createdAt": "2021-11-29T14:15:43.266Z",
        "updatedAt": "2023-11-03T12:42:26.918Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      },
      {
        "id": "dIUnrfEyRPuEf_B2tClBz2UPuw8cokCA",
        "originalId": null,
        "author": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "selectedAuthorId": "none",
        "courseId": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9",
        "title": "Referencias",
        "description": "",
        "type": "blocks",
        "icon": "Article",
        "items": [
          {
            "id": "cl1v0rioj00063c5xna9scnfk",
            "type": "image",
            "items": [
              {
                "id": "cl1v0rioj00073c5x75oqdb7o",
                "media": {
                  "image": {
                    "key": "rise/courses/vnLtOI39SNd04SGqBSwCvgse-DIy7ap9/jQCCRrD5YbQ7WaaE-TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "type": "image",
                    "crushedKey": "TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "originalUrl": "TENA-PRO-Solutions-Image-Hands-Landscape.jpg",
                    "useCrushedKey": true
                  }
                },
                "caption": "<p>Las siguientes publicaciones se han utilizado como referencias a lo largo del módulo. &nbsp;</p>",
                "paragraph": ""
              }
            ],
            "family": "image",
            "variant": "text overlay",
            "settings": {
              "opacity": 0.4,
              "paddingTop": 0,
              "zoomOnClick": true,
              "opacityColor": "#000000",
              "paddingBottom": 0,
              "backgroundColor": "",
              "entranceAnimation": true
            }
          },
          {
            "id": "cl6kjta2c001r356qv1xab5m1",
            "type": "text",
            "items": [
              {
                "id": "cl6kjta2c001s356qf5t5o62x",
                "paragraph": "<p><span style=\"font-size: 24px;\">1. Stephen-Haynes J &amp; Carville K.&nbsp;</span><span style=\"font-size: 24px;\">Skin tears made easy.<em>&nbsp;</em>Wounds International. 2011;2(4):1-6.</span></p><p><span style=\"font-size: 24px;\">2. Thayer D. Skin damage associated with intravenous therapy: &nbsp; &nbsp; &nbsp; &nbsp; common problems and strategies for prevention. J Infus Nurs. 2012;35(6):390-401.</span></p><p><span style=\"font-size: 24px;\">3. Lawton S. Skin 1: the structure and functions of the skin. Nurs Times. 2019;115(12):30-3.</span></p><p><span style=\"font-size: 24px;\">4. LeBlanc K et al. Best practice recommendations for the prevention and management of skin tears in aged skin. Wounds International. 2018.</span></p><p><span style=\"font-size: 24px;\">5. McNichol L et al. Medical adhesives and patient safety: state of the science: consensus statements for the assessment, prevention, and treatment of adhesive-related skin injuries.<em>&nbsp;</em>J Wound Ostomy Continence Nurs. 2013;40(4):365-E2.&nbsp;</span></p><p><span style=\"font-size: 24px;\">6. Fumarola S et al. Overlooked and underestimated: medical adhesive-related skin injuries. Best practice consensus document on prevention. J Wound Care. 2020;29(3):1.</span></p><p><span style=\"font-size: 24px;\">7. Ousey K &amp; Wasek S. Clinician perspectives on medical adhesive-related skin injuries. Wounds UK. 2016;12(4).</span></p><p><span style=\"font-size: 24px;\">8. Maene B. Hidden costs of medical tape-induced skin injuries. Wounds UK. 2013;9(1).</span></p><p><span style=\"font-size: 24px;\">9. Downie F &amp; Collier M. Medical adhesive related skin injury (MARSI): Wounds UK<em>&nbsp;</em>made easy. Wounds UK. 2021;17(1).</span></p><p><span style=\"font-size: 24px;\">10. LeBlanc K et al. Best practice recommendations for prevention and management of periwound skin complications. Wounds international. 2021.</span></p><p><span style=\"font-size: 24px;\">11. Dunk et al. Best practice recommendations for holistic strategies to promote and maintain skin integrity. Wounds International. 2020.</span></p><p><span style=\"font-size: 24px;\">12. Yates S, McNichol L, Heinecke SB, Gray M. Embracing the concept, defining the practice, and changing the outcome: setting the standard for medical adhesive-related skin injury interventions in WOC nursing practice. J Wound Ostomy Continence Nurs. 2017;44(1):13-17.</span></p><p><span style=\"font-size: 24px;\">13. Upton P et al. Complications associated with postoperative dressings: a clinician&rsquo;s perspective. Wound Practice and Research. 2019; 27(4): 158-63.</span></p><p><span style=\"font-size: 24px;\">14. Konya C et al. Skin injuries caused by medical adhesive tape in older people and associated factors. J Clin Nurs. 2010;19(9-10):1236-42.</span></p><p><span style=\"font-size: 24px;\">15. Farris MK et al. Medical adhesive-related skin injury prevalence among adult acute care patients: a single-center observational study. J Wound Ostomy Continence Nurs. 2015;42(6):589-98.</span></p><p><span style=\"font-size: 24px;\">16. Wang D et al. Medical adhesive-related skin injuries and associated risk factors in a pediatric intensive care unit. Adv Skin Wound Care. 2019;32(4):176-182.</span></p><p><span style=\"font-size: 24px;\">17. Zhao H et al. Prevalence of medical adhesive-related skin injury at peripherally inserted central catheter insertion site in oncology patients.<em>&nbsp;</em>J Vasc Access. 2018;19(1):23-27.</span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">18. Ratliff CR. Descriptive study of the frequency of medical adhesive-related skin injuries in a vascular clinic. J Vasc Nurs. 2017;35(2):86-89.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">19. Alavi A, Sibbald RG, Ladizinski B, Saraiya A, Lee KC, Skotneicki-Grant S, Maibach H. Wound-related allergic/irritant contact dermatitis. Advances in skin &amp; wound care. 2016;29(6).</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">20. Hitchcock J, Savine L. Medical adhesive-related skin injuries associated with vascular access. Br J Nurs. 2017;26(8):S4-S12.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">21. International Wound Infection Institute (IWII). Wound Infection in Clinical Practice. Wounds International 2022.</span></span></p><p><span style=\"color: rgb(49, 53, 55);\"><span style=\"font-size: 24px;\">22. Ubbink DT et al. Evidence-Based Care of Acute Wounds: A Perspective. Adv Wound Care (New Rochelle). 2015;4(5):286-294.</span></span></p>"
              }
            ],
            "family": "text",
            "variant": "paragraph",
            "settings": {
              "cardMode": "WHITE",
              "styleMode": "BRANDED",
              "paddingTop": 5,
              "paddingBottom": 5,
              "backgroundMode": "COLOR",
              "backgroundColor": "",
              "entranceAnimation": true
            }
          }
        ],
        "media": {},
        "piles": [],
        "settings": {},
        "duplicatedFromId": "BbO7I2lMdMWToVrdPnR82stmcOdl0Otc",
        "deleted": false,
        "createdAt": "2022-08-08T09:23:46.938Z",
        "updatedAt": "2024-01-11T08:59:21.063Z",
        "lastUpdatedBy": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "ready": true,
        "position": null,
        "transferredAt": null,
        "isPartnerContentAuthor": null,
        "headerImage": {},
        "sourceLessonLocaleId": null,
        "experiments": null
      }
    ],
    "jobs": [],
    "labelSetId": "vsB-kUOtq5l7HkElQ8hasPAQ",
    "deleted": false,
    "createdAt": "2023-05-24T12:51:49.384Z",
    "updatedAt": "2024-03-28T08:59:08.565Z",
    "markComplete": false,
    "isDefault": false,
    "ready": true,
    "reviewId": "c601cfef-b349-4c05-be91-a7e757478b14",
    "exportSettings": {
      "title": "Prevención y tratamiento de MARSI",
      "format": "zip",
      "quizId": "e8GBrtGkhqC3uGofNjrWINibhF3ZVXGe",
      "target": "scorm12",
      "shareId": "4CygSh496UxqWy-4wQr6QjcEFSgSvIoS",
      "activeLMS": 0,
      "reporting": "passed-incomplete",
      "exportType": "lms",
      "identifier": "vnLtOI39SNd04SGqBSwCvgse-DIy7ap9_rise",
      "targetName": "SCORM 1.2",
      "storylineId": null,
      "completeWith": "quiz",
      "quizComplete": true,
      "activeEdition": 0,
      "disableCoverPage": false,
      "enableExitCourse": false,
      "resetLearnerData": false,
      "updateResumeData": true,
      "storylineComplete": false,
      "completionPercentage": 100
    },
    "headingTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
    "bodyTypefaceId": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
    "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
    "sidebarMode": "open",
    "tenantId": "8db6028c-93bd-4564-a695-adf0dd261aab",
    "showLessonCount": true,
    "showNavigationButtons": true,
    "allowSearch": true,
    "animateBlockEntrance": true,
    "transferredAt": "2023-02-02T14:11:07.832Z",
    "allowCopy": false,
    "enableVideoPlaybackSpeed": true,
    "jobType": null,
    "partnerContentId": null,
    "cardImage": {},
    "theme": {
      "themeId": "classic",
      "navigation": true,
      "showAuthor": true,
      "allowSearch": true,
      "colorAccent": "#e40428",
      "blockCorners": "ROUNDED",
      "buttonScheme": "LIGHT",
      "uiTypefaceId": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "coverPageType": "LEFT_OVERLAY",
      "bodyTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
      "navigationType": "SIDEBAR",
      "blockPaddingTop": 30,
      "coverImageAlpha": 50,
      "navigationStyle": "LIGHT_IMAGE",
      "showLessonCount": true,
      "lessonHeaderSize": "MEDIUM",
      "buttonInlineStyle": "ROUNDED",
      "coverImageDefault": "https://articulateusercontent.com/assets/rise/assets/themes/classic/cover-image/4_architecture.jpg",
      "headingTypefaceId": "JFCd9VZoTbod1Mz_XWh-NQ1Z",
      "lessonHeaderColor": null,
      "lessonHeaderStyle": "LIGHT",
      "sidebarStartsOpen": true,
      "blockPaddingBottom": 30,
      "markLessonsComplete": false,
      "animateBlockEntrance": true,
      "navigationRestricted": false,
      "buttonNavigationStyle": "FULL",
      "showNavigationButtons": true,
      "compactShowLessonCount": true,
      "lessonHeaderImageAlpha": 0.6,
      "lessonHeaderImageColor": "DARK",
      "navigationOverlayImage": "https://articulateusercontent.com/assets/rise/assets/themes/example-header-image.jpg",
      "enableVideoPlaybackSpeed": true,
      "navigationOverlayImageAlpha": 0.6,
      "navigationOverlayImageColor": "DARK"
    },
    "lessonHeaderImage": {},
    "overlayNavigationImage": {},
    "type": null,
    "lastImportedXliff": null,
    "locale": null,
    "sourceCourseLocaleId": null,
    "experiments": null,
    "features": {
      "rise-authoring-controls": true,
      "rise-auto-calc-contrast": true,
      "rise-block-controls-phase-one": true,
      "rise-block-controls-phase-two": true,
      "rise-course-navigation": true,
      "rise-course-themes": true,
      "rise-randomize-block-bg-images": true,
      "rise-theme-image-overlay-updates": true
    },
    "authors": [
      {
        "id": "aid|cf75ff59-0fb7-4041-a856-fd56dbd2676c",
        "avatar": "U1QpqS/small.png",
        "authorName": "Lisa Agerbæk"
      },
      {
        "id": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
        "avatar": "96Vmub/small.png",
        "authorName": "Malina Andrén"
      },
      {
        "id": "aid|e62fe687-e9f0-4030-aa1b-2739aa5f80f1",
        "avatar": "c2g81V/small.png",
        "authorName": "Olga Kuzmenko"
      },
      {
        "id": "aid|188dd1f1-afab-48b7-a744-b322fd5ab0c3",
        "avatar": "U1QpqS/small.png",
        "authorName": "Lotten Andrér"
      }
    ],
    "bodyTypeface": "Open Sans",
    "headingTypeface": "Open Sans",
    "uiTypeface": "Lato",
    "lmsOptions": {
      "enableExitCourse": false,
      "disableCoverPage": false
    },
    "mondrian": {}
  },
  "labelSet": {
    "id": "vsB-kUOtq5l7HkElQ8hasPAQ",
    "author": "auth0|25be8ba0-e25f-0131-1c98-22000b2f96a1",
    "name": "Dynacast AS - english - Transferred",
    "defaultId": null,
    "defaultSet": false,
    "labels": {
            "result": "resultado",
            "search": "buscar",
            "results": "resultados",
            "quizNext": "SIGUIENTE",
            "tabGroup": "Pestaña",
            "codeGroup": "Código",
            "noResults": "No hay resultados para",
            "noteGroup": "Nota",
            "quizScore": "Tu puntuación",
            "quizStart": "INICIAR PRUEBA",
            "courseExit": "SALIR DEL CURSO",
            "courseHome": "Inicio",
            "lessonName": "Lección",
            "quizSubmit": "ENVIAR",
            "quoteGroup": "Cita",
            "salutation": "👋 ¡Adiós!",
            "buttonGroup": "Botón",
            "courseStart": "INICIAR CURSO",
            "embedViewOn": "VER EN",
            "exitMessage": "Ahora puedes abandonar esta página.",
            "quizCorrect": "",
            "quizPassing": "APROBADO",
            "quizResults": "Resultados del test",
            "courseResume": "REANUDAR CURSO",
            "processStart": "INICIAR",
            "processSwipe": "Desliza para continuar",
            "quizContinue": "Continuar",
            "quizLandmark": "Prueba",
            "quizQuestion": "Pregunta",
            "courseDetails": "DETALLES",
            "embedReadMore": "Leer más",
            "feedbackGroup": "Comentarios",
            "quizIncorrect": "",
            "quizTakeAgain": "REALIZAR NUEVAMENTE",
            "sortingReplay": "REPRODUCIR DE NUEVO",
            "accordionGroup": "Acordeón",
            "embedLinkGroup": "Contenido web embebido",
            "lessonComplete": "COMPLETADO",
            "statementGroup": "Declaración",
            "storylineGroup": "Historia",
            "attachmentGroup": "Archivo adjunto",
            "embedPhotoGroup": "Foto embebida",
            "embedVideoGroup": "Video embebido",
            "playButtonLabel": "Reproducir",
            "processComplete": "Completo",
            "processLandmark": "Proceso",
            "processNextStep": "SIGUIENTE PASO",
            "processStepName": "Paso",
            "seekSliderLabel": "Buscar",
            "sortingLandmark": "Actividad de clasificación",
            "audioPlayerGroup": "Reproductor de audio. Puedes usar la barra espaciadora para activar/desactivar la reproducción y las teclas de flecha para avanzar.",
            "buttonStackGroup": "Pila de botones",
            "embedPlayerGroup": "Reproductor de medios embebido",
            "lessonRestricted": "Las lecciones deben completarse en orden",
            "pauseButtonLabel": "Pausar",
            "scenarioComplete": "Escenario completado",
            "scenarioContinue": "CONTINUAR",
            "scenarioTryAgain": "INTENTAR DE NUEVO",
            "textOnImageGroup": "Texto sobre imagen",
            "timelineLandmark": "Línea de tiempo",
            "urlEmbedLandmark": "URL/Embeber",
            "videoPlayerGroup": "Reproductor de video. Puedes usar la barra espaciadora para activar/desactivar la reproducción y las teclas de flecha para avanzar.",
            "blocksClickToFlip": "Haz clic en las tarjetas para voltear",
            "blocksPreposition": "de",
            "bulletedListGroup": "Lista con viñetas",
            "checkboxListGroup": "Lista de casillas",
            "imageAndTextGroup": "Imagen y texto",
            "imageGalleryGroup": "Galería de imágenes",
            "lessonPreposition": "de",
            "numberedListGroup": "Lista numerada",
            "processLessonName": "Lección",
            "processStartAgain": "INICIAR DE NUEVO",
            "scenarioStartOver": "COMENZAR DESDE CERO",
            "courseSkipToLesson": "SALTAR A LA LECCIÓN",
            "flashcardBackLabel": "Parte posterior de la tarjeta",
            "flashcardGridGroup": "Cuadrícula de tarjetas",
            "nextFlashCardLabel": "Siguiente tarjeta",
            "flashcardFrontLabel": "Parte delantera de la tarjeta",
            "flashcardStackGroup": "Pila de tarjetas",
            "knowledgeCheckGroup": "Verificación de conocimientos",
            "sortingCardsCorrect": "Cartas correctas",
            "hamburgerButtonLabel": "Barra lateral de visión general del curso",
            "lessonHeaderLandmark": "Encabezado de lección",
            "numberedDividerGroup": "Divisor numerado",
            "lessonContentLandmark": "Contenido de la lección",
            "lessonSidebarLandmark": "Barra lateral de lección",
            "quizAnswerPlaceholder": "Escribe tu respuesta aquí",
            "labeledGraphicLandmark": "Gráfico etiquetado",
            "previousFlashCardLabel": "Tarjeta anterior",
            "processStepPreposition": "de",
            "overviewPageTitleSuffix": "Visión general",
            "quizAcceptableResponses": "Respuestas aceptables",
            "quizRequirePassingScore": "Debe aprobar el test antes de continuar",
            "timelineCardGroupPrefix": "Tarjeta de línea de tiempo",
            "labeledGraphicBubbleLabel": "Burbuja de gráfico etiquetado",
            "labeledGraphicMarkerLabel": "Marcador de gráfico etiquetado",
            "labeledGraphicNextMarkerLabel": "Siguiente marcador",
            "labeledGraphicPreviousMarkerLabel": "Marcador anterior",
            "a11yAnswerLive": "Tu respuesta",
            "a11yAuthorPrefix": "Por",
            "a11yBlockChartBar": "Gráfico de barras",
            "a11yBlockChartLine": "Gráfico de líneas",
            "a11yBlockChartPie": "Gráfico de pastel",
            "a11yBlockCode": "Código",
            "a11yBlockEmbed": "Contenido embebido",
            "a11yBlockFlashcardBack": "Parte posterior de la tarjeta",
            "a11yBlockFlashcardFront": "Parte delantera de la tarjeta",
            "a11yBlockFlashcardGrid": "Cuadrícula de tarjetas",
            "a11yBlockFlashcardStack": "Carrusel de tarjetas",
            "a11yBlockKnowledgeCheck": "Verificación de conocimientos",
            "a11yBlockKnowledgeCheckFIB": "Verificación de conocimientos: Rellenar el espacio en blanco",
            "a11yBlockKnowledgeCheckMC": "Verificación de conocimientos: Opción múltiple",
            "a11yBlockKnowledgeCheckM": "Verificación de conocimientos: Emparejamiento",
            "a11yBlockKnowledgeCheckMR": "Verificación de conocimientos: Respuesta múltiple",
            "a11yBlockQuoteCarousel": "Carrusel de citas",
            "a11yBlockStoryline": "Historia",
            "a11yBlockTimeline": "Línea de tiempo",
            "a11yCarouselNext": "Siguiente",
            "a11yCarouselPrevious": "Anterior",
            "a11yCorrectLive": "Respuesta correcta",
            "a11yExcelIcon": "Hoja de cálculo de Microsoft Excel",
            "a11yFileIcon": "Archivo",
            "a11yGroupAudioPlayer": "Reproductor de audio",
            "a11yGroupVideoPlayer": "Reproductor de video",
            "a11yLabeledGraphicBlock": "Gráfico etiquetado",
            "a11yLabeledGraphicButtonMarker": "Marcador",
            "a11yLabeledGraphicIconPlus": "Más",
            "a11yLabeledGraphicIconDot": "Punto",
            "a11yLabeledGraphicIconInformation": "Información",
            "a11yLabeledGraphicIconQuestion": "Signo de interrogación",
            "a11yLabeledGraphicIconCheck": "Marca de verificación",
            "a11yLabeledGraphicIconX": "X",
            "a11yLabeledGraphicIconHeart": "Corazón",
            "a11yLabeledGraphicIconPin": "Pin de mapa",
            "a11yLabeledGraphicIconArrowLeft": "Flecha izquierda",
            "a11yLabeledGraphicIconArrowRight": "Flecha derecha",
            "a11yLabeledGraphicIconArrowUp": "Flecha arriba",
            "a11yLabeledGraphicIconArrowDown": "Flecha abajo",
            "a11yLabeledGraphicIconArrowUpLeft": "Flecha arriba izquierda",
            "a11yLabeledGraphicIconArrowUpRight": "Flecha arriba derecha",
            "a11yLabeledGraphicIconArrowDownLeft": "Flecha abajo izquierda",
            "a11yLabeledGraphicIconArrowDownRight": "Flecha abajo derecha",
            "a11yLabeledGraphicUnviewed": "No visto",
            "a11yLabeledGraphicViewed": "Visto",
            "a11yMediaPause": "Pausar",
            "a11yMediaPlay": "Reproducir",
            "a11yMediaSeek": "Buscar",
            "a11yNavigationMenuClose": "Cerrar menú de navegación",
            "a11yNavigationMenuOpen": "Abrir menú de navegación",
            "a11yPageMarker": "Parte superior de la página",
            "a11yPDFIcon": "Archivo PDF",
            "a11yPPTIcon": "Presentación de PowerPoint",
            "a11yQuizFailed": "Fallado",
            "a11yQuizFeedback": "Comentarios",
            "a11yQuizPassed": "Aprobado",
            "a11yQuizReviewCorrectlyChecked": "Correctamente marcado",
            "a11yQuizReviewCorrectlySelected": "Correctamente seleccionado",
            "a11yQuizReviewCorrectlyUnchecked": "Correctamente desmarcado",
            "a11yQuizReviewCorrectlyUnselected": "Correctamente no seleccionado",
            "a11yQuizReviewIncorrectlyChecked": "Incorrectamente marcado",
            "a11yQuizReviewIncorrectlySelected": "Incorrectamente seleccionado",
            "a11yQuizReviewIncorrectlyUnchecked": "Incorrectamente desmarcado",
            "a11yQuizReviewIncorrectlyUnselected": "Incorrectamente no seleccionado",
            "a11yRegionMainLesson": "Contenido de la lección",
            "a11yRegionMainOverview": "Visión general del curso",
            "a11yRegionNavLesson": "Menú de navegación",
            "a11yRegionNavOverview": "Tabla de contenidos",
            "a11yRestrictedNav": "Esta lección no está disponible actualmente",
            "a11yRTFIcon": "Archivo de texto enriquecido",
            "a11ySearchClose": "Cerrar menú de búsqueda",
            "a11ySearchInput": "Buscar",
            "a11ySearchOpen": "Abrir menú de búsqueda",
            "a11yStatusContinued": "Continuado",
            "a11yStatusAdditionalContent": "Se ha cargado contenido adicional",
            "a11yUnzoomImage": "Deshacer zoom de la imagen",
            "a11yWordIcon": "Documento de Microsoft Word",
            "a11yZipIcon": "Archivo zip",
            "a11yZoomImage": "Hacer zoom en la imagen",
            "quizRequireAnswer": "Por favor, responde la pregunta para continuar",
            "quizRestart": "Reiniciar",
            "progressPieUnstarted": "No comenzado",
            "progressPieCompleted": "Completado",
            "progressPieClickToComplete": "Haz clic para completar",
            "progressPieClickToReset": "Haz clic para reiniciar",
            "progressPieQuizFailed": "Fallado"
      },
    "deleted": false,
    "createdAt": "2022-04-13T08:55:03.285Z",
    "updatedAt": "2022-04-13T08:55:40.602Z",
    "iso639Code": "en",
    "transferredAt": "2023-09-13T07:05:25.000Z"
  },
  "fonts": [
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Italic.woff",
      "style": "italic",
      "weight": "400"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Bold.woff",
      "style": "normal",
      "weight": "700"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Regular.woff",
      "style": "normal",
      "weight": "400"
    },
    {
      "id": "aVCB402mpH4k8LIWNp48JAG8qdgmsFVq",
      "name": "Open Sans",
      "default": true,
      "key": "assets/rise/fonts/OpenSans-Light.woff",
      "style": "normal",
      "weight": "300"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Black.woff",
      "style": "normal",
      "weight": "900"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Italic.woff",
      "style": "italic",
      "weight": "400"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Bold.woff",
      "style": "normal",
      "weight": "700"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Regular.woff",
      "style": "normal",
      "weight": "400"
    },
    {
      "id": "_vy9IVqRPwz6wQlKi0wsA9dsYpZ7gsQ3",
      "name": "Lato",
      "default": true,
      "key": "assets/rise/fonts/Lato-Light.woff",
      "style": "normal",
      "weight": "300"
    }
  ],
  "media": []
}
")
